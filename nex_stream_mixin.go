// This file is autogenerated.
// I apologise in advance.
package nex
import "fmt"
import "reflect"
func (stream *InputStream) Struct(typeName string) interface{} {
	switch typeName {
    case "AccountData":
        return stream.StructAccountData()
    case "AutoMatchmakeParam":
        return stream.StructAutoMatchmakeParam()
    case "BasicAccountInfo":
        return stream.StructBasicAccountInfo()
    case "BlacklistedPrincipal":
        return stream.StructBlacklistedPrincipal()
    case "BufferQueueParam":
        return stream.StructBufferQueueParam()
    case "Comment":
        return stream.StructComment()
    case "ConnectionData":
        return stream.StructConnectionData()
    case "CreateMatchmakeSessionParam":
        return stream.StructCreateMatchmakeSessionParam()
    case "Data":
        return stream.StructData()
    case "DataStoreChangeMetaCompareParam":
        return stream.StructDataStoreChangeMetaCompareParam()
    case "DataStoreChangeMetaParam":
        return stream.StructDataStoreChangeMetaParam()
    case "DataStoreChangeMetaParamV1":
        return stream.StructDataStoreChangeMetaParamV1()
    case "DataStoreCompletePostParam":
        return stream.StructDataStoreCompletePostParam()
    case "DataStoreCompletePostParamV1":
        return stream.StructDataStoreCompletePostParamV1()
    case "DataStoreCompleteUpdateParam":
        return stream.StructDataStoreCompleteUpdateParam()
    case "DataStoreDeleteParam":
        return stream.StructDataStoreDeleteParam()
    case "DataStoreFetchMyInfosAchievementResult":
        return stream.StructDataStoreFetchMyInfosAchievementResult()
    case "DataStoreFetchMyInfosBalloonResult":
        return stream.StructDataStoreFetchMyInfosBalloonResult()
    case "DataStoreFetchMyInfosParam":
        return stream.StructDataStoreFetchMyInfosParam()
    case "DataStoreFetchMyInfosResult":
        return stream.StructDataStoreFetchMyInfosResult()
    case "DataStoreGetMetaParam":
        return stream.StructDataStoreGetMetaParam()
    case "DataStoreGetNewArrivedNotificationsParam":
        return stream.StructDataStoreGetNewArrivedNotificationsParam()
    case "DataStoreGetNotificationUrlParam":
        return stream.StructDataStoreGetNotificationUrlParam()
    case "DataStoreGetSpecificMetaParam":
        return stream.StructDataStoreGetSpecificMetaParam()
    case "DataStoreGetSpecificMetaParamV1":
        return stream.StructDataStoreGetSpecificMetaParamV1()
    case "DataStoreKeyValue":
        return stream.StructDataStoreKeyValue()
    case "DataStoreMetaInfo":
        return stream.StructDataStoreMetaInfo()
    case "DataStoreNotification":
        return stream.StructDataStoreNotification()
    case "DataStoreNotificationV1":
        return stream.StructDataStoreNotificationV1()
    case "DataStorePasswordInfo":
        return stream.StructDataStorePasswordInfo()
    case "DataStorePermission":
        return stream.StructDataStorePermission()
    case "DataStorePersistenceInfo":
        return stream.StructDataStorePersistenceInfo()
    case "DataStorePersistenceInitParam":
        return stream.StructDataStorePersistenceInitParam()
    case "DataStorePersistenceTarget":
        return stream.StructDataStorePersistenceTarget()
    case "DataStorePrepareGetParam":
        return stream.StructDataStorePrepareGetParam()
    case "DataStorePrepareGetParamV1":
        return stream.StructDataStorePrepareGetParamV1()
    case "DataStorePreparePostParam":
        return stream.StructDataStorePreparePostParam()
    case "DataStorePreparePostParamV1":
        return stream.StructDataStorePreparePostParamV1()
    case "DataStorePrepareUpdateParam":
        return stream.StructDataStorePrepareUpdateParam()
    case "DataStoreRateObjectParam":
        return stream.StructDataStoreRateObjectParam()
    case "DataStoreRatingInfo":
        return stream.StructDataStoreRatingInfo()
    case "DataStoreRatingInfoWithSlot":
        return stream.StructDataStoreRatingInfoWithSlot()
    case "DataStoreRatingInitParam":
        return stream.StructDataStoreRatingInitParam()
    case "DataStoreRatingInitParamWithSlot":
        return stream.StructDataStoreRatingInitParamWithSlot()
    case "DataStoreRatingLog":
        return stream.StructDataStoreRatingLog()
    case "DataStoreRatingTarget":
        return stream.StructDataStoreRatingTarget()
    case "DataStoreReqGetAdditionalMeta":
        return stream.StructDataStoreReqGetAdditionalMeta()
    case "DataStoreReqGetInfo":
        return stream.StructDataStoreReqGetInfo()
    case "DataStoreReqGetInfoV1":
        return stream.StructDataStoreReqGetInfoV1()
    case "DataStoreReqGetNotificationUrlInfo":
        return stream.StructDataStoreReqGetNotificationUrlInfo()
    case "DataStoreReqPostInfo":
        return stream.StructDataStoreReqPostInfo()
    case "DataStoreReqPostInfoV1":
        return stream.StructDataStoreReqPostInfoV1()
    case "DataStoreReqUpdateInfo":
        return stream.StructDataStoreReqUpdateInfo()
    case "DataStoreSearchBalloonParam":
        return stream.StructDataStoreSearchBalloonParam()
    case "DataStoreSearchBalloonResult":
        return stream.StructDataStoreSearchBalloonResult()
    case "DataStoreSearchBalloonResultSet":
        return stream.StructDataStoreSearchBalloonResultSet()
    case "DataStoreSearchParam":
        return stream.StructDataStoreSearchParam()
    case "DataStoreSearchResult":
        return stream.StructDataStoreSearchResult()
    case "DataStoreSpecificMetaInfo":
        return stream.StructDataStoreSpecificMetaInfo()
    case "DataStoreSpecificMetaInfoV1":
        return stream.StructDataStoreSpecificMetaInfoV1()
    case "DataStoreTouchObjectParam":
        return stream.StructDataStoreTouchObjectParam()
    case "DeletionEntry":
        return stream.StructDeletionEntry()
    case "FindMatchmakeSessionByParticipantParam":
        return stream.StructFindMatchmakeSessionByParticipantParam()
    case "FindMatchmakeSessionByParticipantResult":
        return stream.StructFindMatchmakeSessionByParticipantResult()
    case "FriendData":
        return stream.StructFriendData()
    case "FriendInfo":
        return stream.StructFriendInfo()
    case "FriendMii":
        return stream.StructFriendMii()
    case "FriendMiiList":
        return stream.StructFriendMiiList()
    case "FriendMiiRequest":
        return stream.StructFriendMiiRequest()
    case "FriendPersistentInfo":
        return stream.StructFriendPersistentInfo()
    case "FriendPicture":
        return stream.StructFriendPicture()
    case "FriendPresence":
        return stream.StructFriendPresence()
    case "FriendRelationship":
        return stream.StructFriendRelationship()
    case "FriendRequest":
        return stream.StructFriendRequest()
    case "FriendRequestMessage":
        return stream.StructFriendRequestMessage()
    case "GameKey":
        return stream.StructGameKey()
    case "Gathering":
        return stream.StructGathering()
    case "GatheringStats":
        return stream.StructGatheringStats()
    case "GatheringURLs":
        return stream.StructGatheringURLs()
    case "Invitation":
        return stream.StructInvitation()
    case "JoinMatchmakeSessionParam":
        return stream.StructJoinMatchmakeSessionParam()
    case "MatchmakeBlockListParam":
        return stream.StructMatchmakeBlockListParam()
    case "MatchmakeParam":
        return stream.StructMatchmakeParam()
    case "MatchmakeSession":
        return stream.StructMatchmakeSession()
    case "MatchmakeSessionSearchCriteria":
        return stream.StructMatchmakeSessionSearchCriteria()
    case "MessageRecipient":
        return stream.StructMessageRecipient()
    case "Mii":
        return stream.StructMii()
    case "MiiList":
        return stream.StructMiiList()
    case "MiiV2":
        return stream.StructMiiV2()
    case "MyProfile":
        return stream.StructMyProfile()
    case "NNAInfo":
        return stream.StructNNAInfo()
    case "NintendoNotificationEvent":
        return stream.StructNintendoNotificationEvent()
    case "NintendoNotificationEventGeneral":
        return stream.StructNintendoNotificationEventGeneral()
    case "NintendoNotificationEventProfile":
        return stream.StructNintendoNotificationEventProfile()
    case "NintendoPresence":
        return stream.StructNintendoPresence()
    case "NintendoPresenceV2":
        return stream.StructNintendoPresenceV2()
    case "NotificationEvent":
        return stream.StructNotificationEvent()
    case "ParticipantDetails":
        return stream.StructParticipantDetails()
    case "PersistentGathering":
        return stream.StructPersistentGathering()
    case "PersistentNotification":
        return stream.StructPersistentNotification()
    case "PlayedGame":
        return stream.StructPlayedGame()
    case "PlayingSession":
        return stream.StructPlayingSession()
    case "PrincipalBasicInfo":
        return stream.StructPrincipalBasicInfo()
    case "PrincipalPreference":
        return stream.StructPrincipalPreference()
    case "PrincipalRequestBlockSetting":
        return stream.StructPrincipalRequestBlockSetting()
    case "RVConnectionData":
        return stream.StructRVConnectionData()
    case "RankingCachedResult":
        return stream.StructRankingCachedResult()
    case "RankingChangeAttributesParam":
        return stream.StructRankingChangeAttributesParam()
    case "RankingOrderParam":
        return stream.StructRankingOrderParam()
    case "RankingRankData":
        return stream.StructRankingRankData()
    case "RankingResult":
        return stream.StructRankingResult()
    case "RankingScoreData":
        return stream.StructRankingScoreData()
    case "RankingStats":
        return stream.StructRankingStats()
    case "RelationshipData":
        return stream.StructRelationshipData()
    case "ResultRange":
        return stream.StructResultRange()
    case "SimpleCommunity":
        return stream.StructSimpleCommunity()
    case "SimplePlayingSession":
        return stream.StructSimplePlayingSession()
    case "Structure":
        return stream.StructStructure()
    case "UniqueIdInfo":
        return stream.StructUniqueIdInfo()
    case "UpdateMatchmakeSessionParam":
        return stream.StructUpdateMatchmakeSessionParam()
    case "UserMessage":
        return stream.StructUserMessage()

	default:
		fmt.Println("struct: invalid type", typeName)
		return nil
	}
}
func (stream *OutputStream) Struct(out interface{}) {
	switch out.(type) {
    case AccountData:
        stream.StructAccountData(out.(AccountData))
    case AutoMatchmakeParam:
        stream.StructAutoMatchmakeParam(out.(AutoMatchmakeParam))
    case BasicAccountInfo:
        stream.StructBasicAccountInfo(out.(BasicAccountInfo))
    case BlacklistedPrincipal:
        stream.StructBlacklistedPrincipal(out.(BlacklistedPrincipal))
    case BufferQueueParam:
        stream.StructBufferQueueParam(out.(BufferQueueParam))
    case Comment:
        stream.StructComment(out.(Comment))
    case ConnectionData:
        stream.StructConnectionData(out.(ConnectionData))
    case CreateMatchmakeSessionParam:
        stream.StructCreateMatchmakeSessionParam(out.(CreateMatchmakeSessionParam))
    case Data:
        stream.StructData(out.(Data))
    case DataStoreChangeMetaCompareParam:
        stream.StructDataStoreChangeMetaCompareParam(out.(DataStoreChangeMetaCompareParam))
    case DataStoreChangeMetaParam:
        stream.StructDataStoreChangeMetaParam(out.(DataStoreChangeMetaParam))
    case DataStoreChangeMetaParamV1:
        stream.StructDataStoreChangeMetaParamV1(out.(DataStoreChangeMetaParamV1))
    case DataStoreCompletePostParam:
        stream.StructDataStoreCompletePostParam(out.(DataStoreCompletePostParam))
    case DataStoreCompletePostParamV1:
        stream.StructDataStoreCompletePostParamV1(out.(DataStoreCompletePostParamV1))
    case DataStoreCompleteUpdateParam:
        stream.StructDataStoreCompleteUpdateParam(out.(DataStoreCompleteUpdateParam))
    case DataStoreDeleteParam:
        stream.StructDataStoreDeleteParam(out.(DataStoreDeleteParam))
    case DataStoreFetchMyInfosAchievementResult:
        stream.StructDataStoreFetchMyInfosAchievementResult(out.(DataStoreFetchMyInfosAchievementResult))
    case DataStoreFetchMyInfosBalloonResult:
        stream.StructDataStoreFetchMyInfosBalloonResult(out.(DataStoreFetchMyInfosBalloonResult))
    case DataStoreFetchMyInfosParam:
        stream.StructDataStoreFetchMyInfosParam(out.(DataStoreFetchMyInfosParam))
    case DataStoreFetchMyInfosResult:
        stream.StructDataStoreFetchMyInfosResult(out.(DataStoreFetchMyInfosResult))
    case DataStoreGetMetaParam:
        stream.StructDataStoreGetMetaParam(out.(DataStoreGetMetaParam))
    case DataStoreGetNewArrivedNotificationsParam:
        stream.StructDataStoreGetNewArrivedNotificationsParam(out.(DataStoreGetNewArrivedNotificationsParam))
    case DataStoreGetNotificationUrlParam:
        stream.StructDataStoreGetNotificationUrlParam(out.(DataStoreGetNotificationUrlParam))
    case DataStoreGetSpecificMetaParam:
        stream.StructDataStoreGetSpecificMetaParam(out.(DataStoreGetSpecificMetaParam))
    case DataStoreGetSpecificMetaParamV1:
        stream.StructDataStoreGetSpecificMetaParamV1(out.(DataStoreGetSpecificMetaParamV1))
    case DataStoreKeyValue:
        stream.StructDataStoreKeyValue(out.(DataStoreKeyValue))
    case DataStoreMetaInfo:
        stream.StructDataStoreMetaInfo(out.(DataStoreMetaInfo))
    case DataStoreNotification:
        stream.StructDataStoreNotification(out.(DataStoreNotification))
    case DataStoreNotificationV1:
        stream.StructDataStoreNotificationV1(out.(DataStoreNotificationV1))
    case DataStorePasswordInfo:
        stream.StructDataStorePasswordInfo(out.(DataStorePasswordInfo))
    case DataStorePermission:
        stream.StructDataStorePermission(out.(DataStorePermission))
    case DataStorePersistenceInfo:
        stream.StructDataStorePersistenceInfo(out.(DataStorePersistenceInfo))
    case DataStorePersistenceInitParam:
        stream.StructDataStorePersistenceInitParam(out.(DataStorePersistenceInitParam))
    case DataStorePersistenceTarget:
        stream.StructDataStorePersistenceTarget(out.(DataStorePersistenceTarget))
    case DataStorePrepareGetParam:
        stream.StructDataStorePrepareGetParam(out.(DataStorePrepareGetParam))
    case DataStorePrepareGetParamV1:
        stream.StructDataStorePrepareGetParamV1(out.(DataStorePrepareGetParamV1))
    case DataStorePreparePostParam:
        stream.StructDataStorePreparePostParam(out.(DataStorePreparePostParam))
    case DataStorePreparePostParamV1:
        stream.StructDataStorePreparePostParamV1(out.(DataStorePreparePostParamV1))
    case DataStorePrepareUpdateParam:
        stream.StructDataStorePrepareUpdateParam(out.(DataStorePrepareUpdateParam))
    case DataStoreRateObjectParam:
        stream.StructDataStoreRateObjectParam(out.(DataStoreRateObjectParam))
    case DataStoreRatingInfo:
        stream.StructDataStoreRatingInfo(out.(DataStoreRatingInfo))
    case DataStoreRatingInfoWithSlot:
        stream.StructDataStoreRatingInfoWithSlot(out.(DataStoreRatingInfoWithSlot))
    case DataStoreRatingInitParam:
        stream.StructDataStoreRatingInitParam(out.(DataStoreRatingInitParam))
    case DataStoreRatingInitParamWithSlot:
        stream.StructDataStoreRatingInitParamWithSlot(out.(DataStoreRatingInitParamWithSlot))
    case DataStoreRatingLog:
        stream.StructDataStoreRatingLog(out.(DataStoreRatingLog))
    case DataStoreRatingTarget:
        stream.StructDataStoreRatingTarget(out.(DataStoreRatingTarget))
    case DataStoreReqGetAdditionalMeta:
        stream.StructDataStoreReqGetAdditionalMeta(out.(DataStoreReqGetAdditionalMeta))
    case DataStoreReqGetInfo:
        stream.StructDataStoreReqGetInfo(out.(DataStoreReqGetInfo))
    case DataStoreReqGetInfoV1:
        stream.StructDataStoreReqGetInfoV1(out.(DataStoreReqGetInfoV1))
    case DataStoreReqGetNotificationUrlInfo:
        stream.StructDataStoreReqGetNotificationUrlInfo(out.(DataStoreReqGetNotificationUrlInfo))
    case DataStoreReqPostInfo:
        stream.StructDataStoreReqPostInfo(out.(DataStoreReqPostInfo))
    case DataStoreReqPostInfoV1:
        stream.StructDataStoreReqPostInfoV1(out.(DataStoreReqPostInfoV1))
    case DataStoreReqUpdateInfo:
        stream.StructDataStoreReqUpdateInfo(out.(DataStoreReqUpdateInfo))
    case DataStoreSearchBalloonParam:
        stream.StructDataStoreSearchBalloonParam(out.(DataStoreSearchBalloonParam))
    case DataStoreSearchBalloonResult:
        stream.StructDataStoreSearchBalloonResult(out.(DataStoreSearchBalloonResult))
    case DataStoreSearchBalloonResultSet:
        stream.StructDataStoreSearchBalloonResultSet(out.(DataStoreSearchBalloonResultSet))
    case DataStoreSearchParam:
        stream.StructDataStoreSearchParam(out.(DataStoreSearchParam))
    case DataStoreSearchResult:
        stream.StructDataStoreSearchResult(out.(DataStoreSearchResult))
    case DataStoreSpecificMetaInfo:
        stream.StructDataStoreSpecificMetaInfo(out.(DataStoreSpecificMetaInfo))
    case DataStoreSpecificMetaInfoV1:
        stream.StructDataStoreSpecificMetaInfoV1(out.(DataStoreSpecificMetaInfoV1))
    case DataStoreTouchObjectParam:
        stream.StructDataStoreTouchObjectParam(out.(DataStoreTouchObjectParam))
    case DeletionEntry:
        stream.StructDeletionEntry(out.(DeletionEntry))
    case FindMatchmakeSessionByParticipantParam:
        stream.StructFindMatchmakeSessionByParticipantParam(out.(FindMatchmakeSessionByParticipantParam))
    case FindMatchmakeSessionByParticipantResult:
        stream.StructFindMatchmakeSessionByParticipantResult(out.(FindMatchmakeSessionByParticipantResult))
    case FriendData:
        stream.StructFriendData(out.(FriendData))
    case FriendInfo:
        stream.StructFriendInfo(out.(FriendInfo))
    case FriendMii:
        stream.StructFriendMii(out.(FriendMii))
    case FriendMiiList:
        stream.StructFriendMiiList(out.(FriendMiiList))
    case FriendMiiRequest:
        stream.StructFriendMiiRequest(out.(FriendMiiRequest))
    case FriendPersistentInfo:
        stream.StructFriendPersistentInfo(out.(FriendPersistentInfo))
    case FriendPicture:
        stream.StructFriendPicture(out.(FriendPicture))
    case FriendPresence:
        stream.StructFriendPresence(out.(FriendPresence))
    case FriendRelationship:
        stream.StructFriendRelationship(out.(FriendRelationship))
    case FriendRequest:
        stream.StructFriendRequest(out.(FriendRequest))
    case FriendRequestMessage:
        stream.StructFriendRequestMessage(out.(FriendRequestMessage))
    case GameKey:
        stream.StructGameKey(out.(GameKey))
    case Gathering:
        stream.StructGathering(out.(Gathering))
    case GatheringStats:
        stream.StructGatheringStats(out.(GatheringStats))
    case GatheringURLs:
        stream.StructGatheringURLs(out.(GatheringURLs))
    case Invitation:
        stream.StructInvitation(out.(Invitation))
    case JoinMatchmakeSessionParam:
        stream.StructJoinMatchmakeSessionParam(out.(JoinMatchmakeSessionParam))
    case MatchmakeBlockListParam:
        stream.StructMatchmakeBlockListParam(out.(MatchmakeBlockListParam))
    case MatchmakeParam:
        stream.StructMatchmakeParam(out.(MatchmakeParam))
    case MatchmakeSession:
        stream.StructMatchmakeSession(out.(MatchmakeSession))
    case MatchmakeSessionSearchCriteria:
        stream.StructMatchmakeSessionSearchCriteria(out.(MatchmakeSessionSearchCriteria))
    case MessageRecipient:
        stream.StructMessageRecipient(out.(MessageRecipient))
    case Mii:
        stream.StructMii(out.(Mii))
    case MiiList:
        stream.StructMiiList(out.(MiiList))
    case MiiV2:
        stream.StructMiiV2(out.(MiiV2))
    case MyProfile:
        stream.StructMyProfile(out.(MyProfile))
    case NNAInfo:
        stream.StructNNAInfo(out.(NNAInfo))
    case NintendoNotificationEvent:
        stream.StructNintendoNotificationEvent(out.(NintendoNotificationEvent))
    case NintendoNotificationEventGeneral:
        stream.StructNintendoNotificationEventGeneral(out.(NintendoNotificationEventGeneral))
    case NintendoNotificationEventProfile:
        stream.StructNintendoNotificationEventProfile(out.(NintendoNotificationEventProfile))
    case NintendoPresence:
        stream.StructNintendoPresence(out.(NintendoPresence))
    case NintendoPresenceV2:
        stream.StructNintendoPresenceV2(out.(NintendoPresenceV2))
    case NotificationEvent:
        stream.StructNotificationEvent(out.(NotificationEvent))
    case ParticipantDetails:
        stream.StructParticipantDetails(out.(ParticipantDetails))
    case PersistentGathering:
        stream.StructPersistentGathering(out.(PersistentGathering))
    case PersistentNotification:
        stream.StructPersistentNotification(out.(PersistentNotification))
    case PlayedGame:
        stream.StructPlayedGame(out.(PlayedGame))
    case PlayingSession:
        stream.StructPlayingSession(out.(PlayingSession))
    case PrincipalBasicInfo:
        stream.StructPrincipalBasicInfo(out.(PrincipalBasicInfo))
    case PrincipalPreference:
        stream.StructPrincipalPreference(out.(PrincipalPreference))
    case PrincipalRequestBlockSetting:
        stream.StructPrincipalRequestBlockSetting(out.(PrincipalRequestBlockSetting))
    case RVConnectionData:
        stream.StructRVConnectionData(out.(RVConnectionData))
    case RankingCachedResult:
        stream.StructRankingCachedResult(out.(RankingCachedResult))
    case RankingChangeAttributesParam:
        stream.StructRankingChangeAttributesParam(out.(RankingChangeAttributesParam))
    case RankingOrderParam:
        stream.StructRankingOrderParam(out.(RankingOrderParam))
    case RankingRankData:
        stream.StructRankingRankData(out.(RankingRankData))
    case RankingResult:
        stream.StructRankingResult(out.(RankingResult))
    case RankingScoreData:
        stream.StructRankingScoreData(out.(RankingScoreData))
    case RankingStats:
        stream.StructRankingStats(out.(RankingStats))
    case RelationshipData:
        stream.StructRelationshipData(out.(RelationshipData))
    case ResultRange:
        stream.StructResultRange(out.(ResultRange))
    case SimpleCommunity:
        stream.StructSimpleCommunity(out.(SimpleCommunity))
    case SimplePlayingSession:
        stream.StructSimplePlayingSession(out.(SimplePlayingSession))
    case Structure:
        stream.StructStructure(out.(Structure))
    case UniqueIdInfo:
        stream.StructUniqueIdInfo(out.(UniqueIdInfo))
    case UpdateMatchmakeSessionParam:
        stream.StructUpdateMatchmakeSessionParam(out.(UpdateMatchmakeSessionParam))
    case UserMessage:
        stream.StructUserMessage(out.(UserMessage))

	default:
	fmt.Println("struct: invalid type", reflect.TypeOf(out))
	}
}
func (stream *InputStream) List(typeName string, cb interface{}) interface{} {
switch typeName {
    case "BasicAccountInfo":
        return stream.ListBasicAccountInfo(cb.(func(*InputStream)BasicAccountInfo))
    case "BlacklistedPrincipal":
        return stream.ListBlacklistedPrincipal(cb.(func(*InputStream)BlacklistedPrincipal))
    case "Buffer":
        return stream.ListBuffer(cb.(func(*InputStream)Buffer))
    case "BufferQueueParam":
        return stream.ListBufferQueueParam(cb.(func(*InputStream)BufferQueueParam))
    case "ConnectionData":
        return stream.ListConnectionData(cb.(func(*InputStream)ConnectionData))
    case "Data":
        return stream.ListData(cb.(func(*InputStream)Data))
    case "DeletionEntry":
        return stream.ListDeletionEntry(cb.(func(*InputStream)DeletionEntry))
    case "Double":
        return stream.ListDouble(cb.(func(*InputStream)float64))
    case "FindMatchmakeSessionByParticipantResult":
        return stream.ListFindMatchmakeSessionByParticipantResult(cb.(func(*InputStream)FindMatchmakeSessionByParticipantResult))
    case "Float":
        return stream.ListFloat(cb.(func(*InputStream)float32))
    case "FriendData":
        return stream.ListFriendData(cb.(func(*InputStream)FriendData))
    case "FriendInfo":
        return stream.ListFriendInfo(cb.(func(*InputStream)FriendInfo))
    case "FriendMii":
        return stream.ListFriendMii(cb.(func(*InputStream)FriendMii))
    case "FriendMiiList":
        return stream.ListFriendMiiList(cb.(func(*InputStream)FriendMiiList))
    case "FriendMiiRequest":
        return stream.ListFriendMiiRequest(cb.(func(*InputStream)FriendMiiRequest))
    case "FriendPersistentInfo":
        return stream.ListFriendPersistentInfo(cb.(func(*InputStream)FriendPersistentInfo))
    case "FriendPicture":
        return stream.ListFriendPicture(cb.(func(*InputStream)FriendPicture))
    case "FriendPresence":
        return stream.ListFriendPresence(cb.(func(*InputStream)FriendPresence))
    case "FriendRelationship":
        return stream.ListFriendRelationship(cb.(func(*InputStream)FriendRelationship))
    case "FriendRequest":
        return stream.ListFriendRequest(cb.(func(*InputStream)FriendRequest))
    case "GatheringStats":
        return stream.ListGatheringStats(cb.(func(*InputStream)GatheringStats))
    case "GatheringURLs":
        return stream.ListGatheringURLs(cb.(func(*InputStream)GatheringURLs))
    case "Invitation":
        return stream.ListInvitation(cb.(func(*InputStream)Invitation))
    case "List<DataStoreRatingInfoWithSlot>":
        return stream.ListList_DataStoreRatingInfoWithSlot_(cb.(func(*InputStream)[]DataStoreRatingInfoWithSlot))
    case "List<qBuffer>":
        return stream.ListList_qBuffer_(cb.(func(*InputStream)[]QBuffer))
    case "MatchmakeSession":
        return stream.ListMatchmakeSession(cb.(func(*InputStream)MatchmakeSession))
    case "MatchmakeSessionSearchCriteria":
        return stream.ListMatchmakeSessionSearchCriteria(cb.(func(*InputStream)MatchmakeSessionSearchCriteria))
    case "NotificationEvent":
        return stream.ListNotificationEvent(cb.(func(*InputStream)NotificationEvent))
    case "PID":
        return stream.ListPID(cb.(func(*InputStream)PID))
    case "ParticipantDetails":
        return stream.ListParticipantDetails(cb.(func(*InputStream)ParticipantDetails))
    case "PersistentGathering":
        return stream.ListPersistentGathering(cb.(func(*InputStream)PersistentGathering))
    case "PersistentNotification":
        return stream.ListPersistentNotification(cb.(func(*InputStream)PersistentNotification))
    case "PlayedGame":
        return stream.ListPlayedGame(cb.(func(*InputStream)PlayedGame))
    case "PlayingSession":
        return stream.ListPlayingSession(cb.(func(*InputStream)PlayingSession))
    case "PrincipalBasicInfo":
        return stream.ListPrincipalBasicInfo(cb.(func(*InputStream)PrincipalBasicInfo))
    case "PrincipalRequestBlockSetting":
        return stream.ListPrincipalRequestBlockSetting(cb.(func(*InputStream)PrincipalRequestBlockSetting))
    case "RankingCachedResult":
        return stream.ListRankingCachedResult(cb.(func(*InputStream)RankingCachedResult))
    case "RankingOrderParam":
        return stream.ListRankingOrderParam(cb.(func(*InputStream)RankingOrderParam))
    case "RankingRankData":
        return stream.ListRankingRankData(cb.(func(*InputStream)RankingRankData))
    case "RelationshipData":
        return stream.ListRelationshipData(cb.(func(*InputStream)RelationshipData))
    case "Result":
        return stream.ListResult(cb.(func(*InputStream)Result))
    case "SimpleCommunity":
        return stream.ListSimpleCommunity(cb.(func(*InputStream)SimpleCommunity))
    case "SimplePlayingSession":
        return stream.ListSimplePlayingSession(cb.(func(*InputStream)SimplePlayingSession))
    case "StationURL":
        return stream.ListStationURL(cb.(func(*InputStream)StationURL))
    case "String":
        return stream.ListString(cb.(func(*InputStream)string))
    case "Uint16":
        return stream.ListUint16(cb.(func(*InputStream)uint16))
    case "Uint32":
        return stream.ListUint32(cb.(func(*InputStream)uint32))
    case "Uint64":
        return stream.ListUint64(cb.(func(*InputStream)uint64))
    case "Uint8":
        return stream.ListUint8(cb.(func(*InputStream)uint8))
    case "UniqueIdInfo":
        return stream.ListUniqueIdInfo(cb.(func(*InputStream)UniqueIdInfo))
    case "UserMessage":
        return stream.ListUserMessage(cb.(func(*InputStream)UserMessage))
    case "qBuffer":
        return stream.ListqBuffer(cb.(func(*InputStream)QBuffer))

	default:
		fmt.Printf("list: invalid type", typeName)
		return nil
	}
}
func (stream *OutputStream) List(cb interface{}, list interface{}) {
switch list.(type) {
    case []BasicAccountInfo:
        stream.ListBasicAccountInfo(cb.(func(*OutputStream,BasicAccountInfo)), list.([]BasicAccountInfo)) // BasicAccountInfo
    case []BlacklistedPrincipal:
        stream.ListBlacklistedPrincipal(cb.(func(*OutputStream,BlacklistedPrincipal)), list.([]BlacklistedPrincipal)) // BlacklistedPrincipal
    case []Buffer:
        stream.ListBuffer(cb.(func(*OutputStream,Buffer)), list.([]Buffer)) // Buffer
    case []BufferQueueParam:
        stream.ListBufferQueueParam(cb.(func(*OutputStream,BufferQueueParam)), list.([]BufferQueueParam)) // BufferQueueParam
    case []ConnectionData:
        stream.ListConnectionData(cb.(func(*OutputStream,ConnectionData)), list.([]ConnectionData)) // ConnectionData
    case []Data:
        stream.ListData(cb.(func(*OutputStream,Data)), list.([]Data)) // Data
    case []DeletionEntry:
        stream.ListDeletionEntry(cb.(func(*OutputStream,DeletionEntry)), list.([]DeletionEntry)) // DeletionEntry
    case []float64:
        stream.ListDouble(cb.(func(*OutputStream,float64)), list.([]float64)) // Double
    case []FindMatchmakeSessionByParticipantResult:
        stream.ListFindMatchmakeSessionByParticipantResult(cb.(func(*OutputStream,FindMatchmakeSessionByParticipantResult)), list.([]FindMatchmakeSessionByParticipantResult)) // FindMatchmakeSessionByParticipantResult
    case []float32:
        stream.ListFloat(cb.(func(*OutputStream,float32)), list.([]float32)) // Float
    case []FriendData:
        stream.ListFriendData(cb.(func(*OutputStream,FriendData)), list.([]FriendData)) // FriendData
    case []FriendInfo:
        stream.ListFriendInfo(cb.(func(*OutputStream,FriendInfo)), list.([]FriendInfo)) // FriendInfo
    case []FriendMii:
        stream.ListFriendMii(cb.(func(*OutputStream,FriendMii)), list.([]FriendMii)) // FriendMii
    case []FriendMiiList:
        stream.ListFriendMiiList(cb.(func(*OutputStream,FriendMiiList)), list.([]FriendMiiList)) // FriendMiiList
    case []FriendMiiRequest:
        stream.ListFriendMiiRequest(cb.(func(*OutputStream,FriendMiiRequest)), list.([]FriendMiiRequest)) // FriendMiiRequest
    case []FriendPersistentInfo:
        stream.ListFriendPersistentInfo(cb.(func(*OutputStream,FriendPersistentInfo)), list.([]FriendPersistentInfo)) // FriendPersistentInfo
    case []FriendPicture:
        stream.ListFriendPicture(cb.(func(*OutputStream,FriendPicture)), list.([]FriendPicture)) // FriendPicture
    case []FriendPresence:
        stream.ListFriendPresence(cb.(func(*OutputStream,FriendPresence)), list.([]FriendPresence)) // FriendPresence
    case []FriendRelationship:
        stream.ListFriendRelationship(cb.(func(*OutputStream,FriendRelationship)), list.([]FriendRelationship)) // FriendRelationship
    case []FriendRequest:
        stream.ListFriendRequest(cb.(func(*OutputStream,FriendRequest)), list.([]FriendRequest)) // FriendRequest
    case []GatheringStats:
        stream.ListGatheringStats(cb.(func(*OutputStream,GatheringStats)), list.([]GatheringStats)) // GatheringStats
    case []GatheringURLs:
        stream.ListGatheringURLs(cb.(func(*OutputStream,GatheringURLs)), list.([]GatheringURLs)) // GatheringURLs
    case []Invitation:
        stream.ListInvitation(cb.(func(*OutputStream,Invitation)), list.([]Invitation)) // Invitation
    case [][]DataStoreRatingInfoWithSlot:
        stream.ListList_DataStoreRatingInfoWithSlot_(cb.(func(*OutputStream,[]DataStoreRatingInfoWithSlot)), list.([][]DataStoreRatingInfoWithSlot)) // List<DataStoreRatingInfoWithSlot>
    case [][]QBuffer:
        stream.ListList_qBuffer_(cb.(func(*OutputStream,[]QBuffer)), list.([][]QBuffer)) // List<qBuffer>
    case []MatchmakeSession:
        stream.ListMatchmakeSession(cb.(func(*OutputStream,MatchmakeSession)), list.([]MatchmakeSession)) // MatchmakeSession
    case []MatchmakeSessionSearchCriteria:
        stream.ListMatchmakeSessionSearchCriteria(cb.(func(*OutputStream,MatchmakeSessionSearchCriteria)), list.([]MatchmakeSessionSearchCriteria)) // MatchmakeSessionSearchCriteria
    case []NotificationEvent:
        stream.ListNotificationEvent(cb.(func(*OutputStream,NotificationEvent)), list.([]NotificationEvent)) // NotificationEvent
    case []PID:
        stream.ListPID(cb.(func(*OutputStream,PID)), list.([]PID)) // PID
    case []ParticipantDetails:
        stream.ListParticipantDetails(cb.(func(*OutputStream,ParticipantDetails)), list.([]ParticipantDetails)) // ParticipantDetails
    case []PersistentGathering:
        stream.ListPersistentGathering(cb.(func(*OutputStream,PersistentGathering)), list.([]PersistentGathering)) // PersistentGathering
    case []PersistentNotification:
        stream.ListPersistentNotification(cb.(func(*OutputStream,PersistentNotification)), list.([]PersistentNotification)) // PersistentNotification
    case []PlayedGame:
        stream.ListPlayedGame(cb.(func(*OutputStream,PlayedGame)), list.([]PlayedGame)) // PlayedGame
    case []PlayingSession:
        stream.ListPlayingSession(cb.(func(*OutputStream,PlayingSession)), list.([]PlayingSession)) // PlayingSession
    case []PrincipalBasicInfo:
        stream.ListPrincipalBasicInfo(cb.(func(*OutputStream,PrincipalBasicInfo)), list.([]PrincipalBasicInfo)) // PrincipalBasicInfo
    case []PrincipalRequestBlockSetting:
        stream.ListPrincipalRequestBlockSetting(cb.(func(*OutputStream,PrincipalRequestBlockSetting)), list.([]PrincipalRequestBlockSetting)) // PrincipalRequestBlockSetting
    case []RankingCachedResult:
        stream.ListRankingCachedResult(cb.(func(*OutputStream,RankingCachedResult)), list.([]RankingCachedResult)) // RankingCachedResult
    case []RankingOrderParam:
        stream.ListRankingOrderParam(cb.(func(*OutputStream,RankingOrderParam)), list.([]RankingOrderParam)) // RankingOrderParam
    case []RankingRankData:
        stream.ListRankingRankData(cb.(func(*OutputStream,RankingRankData)), list.([]RankingRankData)) // RankingRankData
    case []RelationshipData:
        stream.ListRelationshipData(cb.(func(*OutputStream,RelationshipData)), list.([]RelationshipData)) // RelationshipData
    case []Result:
        stream.ListResult(cb.(func(*OutputStream,Result)), list.([]Result)) // Result
    case []SimpleCommunity:
        stream.ListSimpleCommunity(cb.(func(*OutputStream,SimpleCommunity)), list.([]SimpleCommunity)) // SimpleCommunity
    case []SimplePlayingSession:
        stream.ListSimplePlayingSession(cb.(func(*OutputStream,SimplePlayingSession)), list.([]SimplePlayingSession)) // SimplePlayingSession
    case []StationURL:
        stream.ListStationURL(cb.(func(*OutputStream,StationURL)), list.([]StationURL)) // StationURL
    case []string:
        stream.ListString(cb.(func(*OutputStream,string)), list.([]string)) // String
    case []uint16:
        stream.ListUint16(cb.(func(*OutputStream,uint16)), list.([]uint16)) // Uint16
    case []uint32:
        stream.ListUint32(cb.(func(*OutputStream,uint32)), list.([]uint32)) // Uint32
    case []uint64:
        stream.ListUint64(cb.(func(*OutputStream,uint64)), list.([]uint64)) // Uint64
    case []uint8:
        stream.ListUint8(cb.(func(*OutputStream,uint8)), list.([]uint8)) // Uint8
    case []UniqueIdInfo:
        stream.ListUniqueIdInfo(cb.(func(*OutputStream,UniqueIdInfo)), list.([]UniqueIdInfo)) // UniqueIdInfo
    case []UserMessage:
        stream.ListUserMessage(cb.(func(*OutputStream,UserMessage)), list.([]UserMessage)) // UserMessage
    case []QBuffer:
        stream.ListqBuffer(cb.(func(*OutputStream,QBuffer)), list.([]QBuffer)) // qBuffer

	default:
	fmt.Printf("list: invalid type", reflect.TypeOf(list))
	}
	return
}
func (stream *InputStream) Map(typeName string, cb interface{}) interface{} {
switch typeName {
    case "Map<Sint8,DataStoreRatingInfo>":
        return stream.MapSint8_DataStoreRatingInfo(cb.(func(*InputStream)(int8,DataStoreRatingInfo)))
    case "Map<Sint8,List<qBuffer>>":
        return stream.MapSint8_List_qBuffer_(cb.(func(*InputStream)(int8,[]QBuffer)))
    case "Map<String,Variant>":
        return stream.MapString_Variant(cb.(func(*InputStream)(string,Variant)))
    case "Map<Uint16,Sint32>":
        return stream.MapUint16_Sint32(cb.(func(*InputStream)(uint16,int32)))
    case "Map<Uint16,String>":
        return stream.MapUint16_String(cb.(func(*InputStream)(uint16,string)))

	default:
		fmt.Printf("map: invalid type", typeName)
		return nil
	}
}
func (stream *OutputStream) Map(cb interface{}, m interface{}) {
switch m.(type) {
    case map[int8]DataStoreRatingInfo:
        stream.MapSint8_DataStoreRatingInfo(cb.(func(*OutputStream,int8,DataStoreRatingInfo)), m.(map[int8]DataStoreRatingInfo))
    case map[int8][]QBuffer:
        stream.MapSint8_List_qBuffer_(cb.(func(*OutputStream,int8,[]QBuffer)), m.(map[int8][]QBuffer))
    case map[string]Variant:
        stream.MapString_Variant(cb.(func(*OutputStream,string,Variant)), m.(map[string]Variant))
    case map[uint16]int32:
        stream.MapUint16_Sint32(cb.(func(*OutputStream,uint16,int32)), m.(map[uint16]int32))
    case map[uint16]string:
        stream.MapUint16_String(cb.(func(*OutputStream,uint16,string)), m.(map[uint16]string))

	default:
		fmt.Printf("map: invalid type", reflect.TypeOf(m))
	}
	return
}
func (stream *InputStream) StructAccountData() (in AccountData) {
    in.Base = stream.Struct("Structure").(Structure)
    in.Pid = PID(stream.UInt32LE())
    in.StrName = string(stream.String())
    in.UiGroups = stream.UInt32LE()
    in.StrEmail = string(stream.String())
    in.DtCreationDate = DateTime(stream.UInt64LE())
    in.DtEffectiveDate = DateTime(stream.UInt64LE())
    in.StrNotEffectiveMsg = string(stream.String())
    in.DtExpiryDate = DateTime(stream.UInt64LE())
    in.StrExpiredMsg = string(stream.String())
    return
}
func (stream *OutputStream) StructAccountData(out AccountData) {
    stream.Struct(out.Base)
    stream.UInt32LE(uint32(out.Pid))
    stream.String(string(out.StrName))
    stream.UInt32LE(out.UiGroups)
    stream.String(string(out.StrEmail))
    stream.UInt64LE(uint64(out.DtCreationDate))
    stream.UInt64LE(uint64(out.DtEffectiveDate))
    stream.String(string(out.StrNotEffectiveMsg))
    stream.UInt64LE(uint64(out.DtExpiryDate))
    stream.String(string(out.StrExpiredMsg))
    return
}
func (stream *InputStream) StructAutoMatchmakeParam() (in AutoMatchmakeParam) {
    in.Base = stream.Struct("Structure").(Structure)
    in.SourceMatchmakeSession = stream.Struct("MatchmakeSession").(MatchmakeSession)
    in.AdditionalParticipants = stream.List("PID", func (innerStream *InputStream) PID { return PID(innerStream.UInt32LE()) }).([]PID)
    in.GidForParticipationCheck = stream.UInt32LE()
    in.AutoMatchmakeOption = stream.UInt32LE()
    in.JoinMessage = string(stream.String())
    in.ParticipationCount = stream.UInt16LE()
    in.LstSearchCriteria = stream.List("MatchmakeSessionSearchCriteria", func (innerStream *InputStream) MatchmakeSessionSearchCriteria { return innerStream.Struct("MatchmakeSessionSearchCriteria").(MatchmakeSessionSearchCriteria) }).([]MatchmakeSessionSearchCriteria)
    in.TargetGids = stream.List("Uint32", func (innerStream *InputStream) uint32 { return innerStream.UInt32LE() }).([]uint32)
    in.BlockListParam = stream.Struct("MatchmakeBlockListParam").(MatchmakeBlockListParam)
    return
}
func (stream *OutputStream) StructAutoMatchmakeParam(out AutoMatchmakeParam) {
    stream.Struct(out.Base)
    stream.Struct(out.SourceMatchmakeSession)
    stream.List(func (innerStream *OutputStream, data PID) { innerStream.UInt32LE(uint32(data)) }, out.AdditionalParticipants)
    stream.UInt32LE(out.GidForParticipationCheck)
    stream.UInt32LE(out.AutoMatchmakeOption)
    stream.String(string(out.JoinMessage))
    stream.UInt16LE(out.ParticipationCount)
    stream.List(func (innerStream *OutputStream, data MatchmakeSessionSearchCriteria) { innerStream.Struct(data) }, out.LstSearchCriteria)
    stream.List(func (innerStream *OutputStream, data uint32) { innerStream.UInt32LE(data) }, out.TargetGids)
    stream.Struct(out.BlockListParam)
    return
}
func (stream *InputStream) StructBasicAccountInfo() (in BasicAccountInfo) {
    in.Base = stream.Struct("Structure").(Structure)
    in.PidOwner = PID(stream.UInt32LE())
    in.StrName = string(stream.String())
    return
}
func (stream *OutputStream) StructBasicAccountInfo(out BasicAccountInfo) {
    stream.Struct(out.Base)
    stream.UInt32LE(uint32(out.PidOwner))
    stream.String(string(out.StrName))
    return
}
func (stream *InputStream) StructBlacklistedPrincipal() (in BlacklistedPrincipal) {
    in.PrincipalBasicInfo = stream.Struct("PrincipalBasicInfo").(PrincipalBasicInfo)
    in.GameKey = stream.Struct("GameKey").(GameKey)
    in.BlacklistedSince = DateTime(stream.UInt64LE())
    return
}
func (stream *OutputStream) StructBlacklistedPrincipal(out BlacklistedPrincipal) {
    stream.Struct(out.PrincipalBasicInfo)
    stream.Struct(out.GameKey)
    stream.UInt64LE(uint64(out.BlacklistedSince))
    return
}
func (stream *InputStream) StructBufferQueueParam() (in BufferQueueParam) {
    in.Base = stream.Struct("Structure").(Structure)
    in.DataId = stream.UInt64LE()
    in.Slot = stream.UInt32LE()
    return
}
func (stream *OutputStream) StructBufferQueueParam(out BufferQueueParam) {
    stream.Struct(out.Base)
    stream.UInt64LE(out.DataId)
    stream.UInt32LE(out.Slot)
    return
}
func (stream *InputStream) StructComment() (in Comment) {
    in.Unknown = stream.UInt8()
    in.StatusMessage = string(stream.String())
    in.LastChangedOn = DateTime(stream.UInt64LE())
    return
}
func (stream *OutputStream) StructComment(out Comment) {
    stream.UInt8(out.Unknown)
    stream.String(string(out.StatusMessage))
    stream.UInt64LE(uint64(out.LastChangedOn))
    return
}
func (stream *InputStream) StructConnectionData() (in ConnectionData) {
    in.Base = stream.Struct("Structure").(Structure)
    in.StationUrl = StationURL(stream.String())
    in.ConnectionID = stream.UInt32LE()
    return
}
func (stream *OutputStream) StructConnectionData(out ConnectionData) {
    stream.Struct(out.Base)
    stream.String(string(out.StationUrl))
    stream.UInt32LE(out.ConnectionID)
    return
}
func (stream *InputStream) StructCreateMatchmakeSessionParam() (in CreateMatchmakeSessionParam) {
    in.Base = stream.Struct("Structure").(Structure)
    in.SourceMatchmakeSession = stream.Struct("MatchmakeSession").(MatchmakeSession)
    in.AdditionalParticipants = stream.List("PID", func (innerStream *InputStream) PID { return PID(innerStream.UInt32LE()) }).([]PID)
    in.GidForParticipationCheck = stream.UInt32LE()
    in.CreateMatchmakeSessionOption = stream.UInt32LE()
    in.JoinMessage = string(stream.String())
    in.ParticipationCount = stream.UInt16LE()
    return
}
func (stream *OutputStream) StructCreateMatchmakeSessionParam(out CreateMatchmakeSessionParam) {
    stream.Struct(out.Base)
    stream.Struct(out.SourceMatchmakeSession)
    stream.List(func (innerStream *OutputStream, data PID) { innerStream.UInt32LE(uint32(data)) }, out.AdditionalParticipants)
    stream.UInt32LE(out.GidForParticipationCheck)
    stream.UInt32LE(out.CreateMatchmakeSessionOption)
    stream.String(string(out.JoinMessage))
    stream.UInt16LE(out.ParticipationCount)
    return
}
func (stream *InputStream) StructData() (in Data) {
    in.type_name = string(stream.String())
    in.len_plus_four = stream.UInt32LE()
    in.data = stream.Buffer()
    return
}
func (stream *OutputStream) StructData(out Data) {
    stream.String(string(out.type_name))
    stream.UInt32LE(out.len_plus_four)
    stream.Buffer(out.data)
    return
}
func (stream *InputStream) StructDataStoreChangeMetaCompareParam() (in DataStoreChangeMetaCompareParam) {
    in.Base = stream.Struct("Structure").(Structure)
    in.ComparisonFlag = stream.UInt32LE()
    in.Name = string(stream.String())
    in.Permission = stream.Struct("DataStorePermission").(DataStorePermission)
    in.DelPermission = stream.Struct("DataStorePermission").(DataStorePermission)
    in.Period = stream.UInt16LE()
    in.MetaBinary = stream.Buffer()
    in.Tags = stream.List("String", func (innerStream *InputStream) string { return string(innerStream.String()) }).([]string)
    in.ReferredCnt = stream.UInt32LE()
    in.DataType = stream.UInt16LE()
    in.Status = stream.UInt8()
    return
}
func (stream *OutputStream) StructDataStoreChangeMetaCompareParam(out DataStoreChangeMetaCompareParam) {
    stream.Struct(out.Base)
    stream.UInt32LE(out.ComparisonFlag)
    stream.String(string(out.Name))
    stream.Struct(out.Permission)
    stream.Struct(out.DelPermission)
    stream.UInt16LE(out.Period)
    stream.Buffer(out.MetaBinary)
    stream.List(func (innerStream *OutputStream, data string) { innerStream.String(string(data)) }, out.Tags)
    stream.UInt32LE(out.ReferredCnt)
    stream.UInt16LE(out.DataType)
    stream.UInt8(out.Status)
    return
}
func (stream *InputStream) StructDataStoreChangeMetaParam() (in DataStoreChangeMetaParam) {
    in.Base = stream.Struct("Structure").(Structure)
    in.DataId = stream.UInt64LE()
    in.ModifiesFlag = stream.UInt32LE()
    in.Name = string(stream.String())
    in.Permission = stream.Struct("DataStorePermission").(DataStorePermission)
    in.DelPermission = stream.Struct("DataStorePermission").(DataStorePermission)
    in.Period = stream.UInt16LE()
    in.MetaBinary = stream.Buffer()
    in.Tags = stream.List("String", func (innerStream *InputStream) string { return string(innerStream.String()) }).([]string)
    in.UpdatePassword = stream.UInt64LE()
    in.ReferredCnt = stream.UInt32LE()
    in.DataType = stream.UInt16LE()
    in.Status = stream.UInt8()
    in.CompareParam = stream.Struct("DataStoreChangeMetaCompareParam").(DataStoreChangeMetaCompareParam)
    in.PersistenceTarget = stream.Struct("DataStorePersistenceTarget").(DataStorePersistenceTarget)
    return
}
func (stream *OutputStream) StructDataStoreChangeMetaParam(out DataStoreChangeMetaParam) {
    stream.Struct(out.Base)
    stream.UInt64LE(out.DataId)
    stream.UInt32LE(out.ModifiesFlag)
    stream.String(string(out.Name))
    stream.Struct(out.Permission)
    stream.Struct(out.DelPermission)
    stream.UInt16LE(out.Period)
    stream.Buffer(out.MetaBinary)
    stream.List(func (innerStream *OutputStream, data string) { innerStream.String(string(data)) }, out.Tags)
    stream.UInt64LE(out.UpdatePassword)
    stream.UInt32LE(out.ReferredCnt)
    stream.UInt16LE(out.DataType)
    stream.UInt8(out.Status)
    stream.Struct(out.CompareParam)
    stream.Struct(out.PersistenceTarget)
    return
}
func (stream *InputStream) StructDataStoreChangeMetaParamV1() (in DataStoreChangeMetaParamV1) {
    in.Base = stream.Struct("Structure").(Structure)
    in.DataId = stream.UInt64LE()
    in.ModifiesFlag = stream.UInt32LE()
    in.Name = string(stream.String())
    in.Permission = stream.Struct("DataStorePermission").(DataStorePermission)
    in.DelPermission = stream.Struct("DataStorePermission").(DataStorePermission)
    in.Period = stream.UInt16LE()
    in.MetaBinary = stream.Buffer()
    in.Tags = stream.List("String", func (innerStream *InputStream) string { return string(innerStream.String()) }).([]string)
    in.UpdatePassword = stream.UInt64LE()
    return
}
func (stream *OutputStream) StructDataStoreChangeMetaParamV1(out DataStoreChangeMetaParamV1) {
    stream.Struct(out.Base)
    stream.UInt64LE(out.DataId)
    stream.UInt32LE(out.ModifiesFlag)
    stream.String(string(out.Name))
    stream.Struct(out.Permission)
    stream.Struct(out.DelPermission)
    stream.UInt16LE(out.Period)
    stream.Buffer(out.MetaBinary)
    stream.List(func (innerStream *OutputStream, data string) { innerStream.String(string(data)) }, out.Tags)
    stream.UInt64LE(out.UpdatePassword)
    return
}
func (stream *InputStream) StructDataStoreCompletePostParam() (in DataStoreCompletePostParam) {
    in.Base = stream.Struct("Structure").(Structure)
    in.DataId = stream.UInt64LE()
    in.IsSuccess = stream.Bool()
    return
}
func (stream *OutputStream) StructDataStoreCompletePostParam(out DataStoreCompletePostParam) {
    stream.Struct(out.Base)
    stream.UInt64LE(out.DataId)
    stream.Bool(out.IsSuccess)
    return
}
func (stream *InputStream) StructDataStoreCompletePostParamV1() (in DataStoreCompletePostParamV1) {
    in.Base = stream.Struct("Structure").(Structure)
    in.DataId = stream.UInt32LE()
    in.IsSuccess = stream.Bool()
    return
}
func (stream *OutputStream) StructDataStoreCompletePostParamV1(out DataStoreCompletePostParamV1) {
    stream.Struct(out.Base)
    stream.UInt32LE(out.DataId)
    stream.Bool(out.IsSuccess)
    return
}
func (stream *InputStream) StructDataStoreCompleteUpdateParam() (in DataStoreCompleteUpdateParam) {
    in.Base = stream.Struct("Structure").(Structure)
    in.DataId = stream.UInt64LE()
    in.Version = stream.UInt32LE()
    in.IsSuccess = stream.Bool()
    return
}
func (stream *OutputStream) StructDataStoreCompleteUpdateParam(out DataStoreCompleteUpdateParam) {
    stream.Struct(out.Base)
    stream.UInt64LE(out.DataId)
    stream.UInt32LE(out.Version)
    stream.Bool(out.IsSuccess)
    return
}
func (stream *InputStream) StructDataStoreDeleteParam() (in DataStoreDeleteParam) {
    in.Base = stream.Struct("Structure").(Structure)
    in.DataId = stream.UInt64LE()
    in.UpdatePassword = stream.UInt64LE()
    return
}
func (stream *OutputStream) StructDataStoreDeleteParam(out DataStoreDeleteParam) {
    stream.Struct(out.Base)
    stream.UInt64LE(out.DataId)
    stream.UInt64LE(out.UpdatePassword)
    return
}
func (stream *InputStream) StructDataStoreFetchMyInfosAchievementResult() (in DataStoreFetchMyInfosAchievementResult) {
    in.Base = stream.Struct("Structure").(Structure)
    in.DataId = stream.UInt64LE()
    in.DataType = stream.UInt16LE()
    in.MetaBinary = stream.Buffer()
    in.CreatedTime = DateTime(stream.UInt64LE())
    in.Ratings = stream.Map("Map<Sint8,DataStoreRatingInfo>", func (innerStream *InputStream)(int8, DataStoreRatingInfo) { return innerStream.Int8(), innerStream.Struct("DataStoreRatingInfo").(DataStoreRatingInfo) }).(map[int8]DataStoreRatingInfo)
    in.Buffers = stream.Map("Map<Sint8,List<QBuffer>>", func (innerStream *InputStream)(int8, []QBuffer) { return innerStream.Int8(), innerStream.List("QBuffer", func (innerStream *InputStream) QBuffer { return innerStream.Buffer() }).([]QBuffer) }).(map[int8][]QBuffer)
    return
}
func (stream *OutputStream) StructDataStoreFetchMyInfosAchievementResult(out DataStoreFetchMyInfosAchievementResult) {
    stream.Struct(out.Base)
    stream.UInt64LE(out.DataId)
    stream.UInt16LE(out.DataType)
    stream.Buffer(out.MetaBinary)
    stream.UInt64LE(uint64(out.CreatedTime))
    stream.Map(func (innerStream *OutputStream, key int8, value DataStoreRatingInfo) { innerStream.Int8(key); innerStream.Struct(value) }, out.Ratings)
    stream.Map(func (innerStream *OutputStream, key int8, value []QBuffer) { innerStream.Int8(key); innerStream.List(func (innerStream *OutputStream, data QBuffer) { innerStream.Buffer(data) }, value) }, out.Buffers)
    return
}
func (stream *InputStream) StructDataStoreFetchMyInfosBalloonResult() (in DataStoreFetchMyInfosBalloonResult) {
    in.Base = stream.Struct("Structure").(Structure)
    in.DataId = stream.UInt64LE()
    in.DataType = stream.UInt16LE()
    in.MetaBinary = stream.Buffer()
    in.CreatedTime = DateTime(stream.UInt64LE())
    in.UpdatedTime = DateTime(stream.UInt64LE())
    in.IsCleared = stream.Bool()
    in.Ratings = stream.Map("Map<Sint8,DataStoreRatingInfo>", func (innerStream *InputStream)(int8, DataStoreRatingInfo) { return innerStream.Int8(), innerStream.Struct("DataStoreRatingInfo").(DataStoreRatingInfo) }).(map[int8]DataStoreRatingInfo)
    in.Buffers = stream.Map("Map<Sint8,List<QBuffer>>", func (innerStream *InputStream)(int8, []QBuffer) { return innerStream.Int8(), innerStream.List("QBuffer", func (innerStream *InputStream) QBuffer { return innerStream.Buffer() }).([]QBuffer) }).(map[int8][]QBuffer)
    return
}
func (stream *OutputStream) StructDataStoreFetchMyInfosBalloonResult(out DataStoreFetchMyInfosBalloonResult) {
    stream.Struct(out.Base)
    stream.UInt64LE(out.DataId)
    stream.UInt16LE(out.DataType)
    stream.Buffer(out.MetaBinary)
    stream.UInt64LE(uint64(out.CreatedTime))
    stream.UInt64LE(uint64(out.UpdatedTime))
    stream.Bool(out.IsCleared)
    stream.Map(func (innerStream *OutputStream, key int8, value DataStoreRatingInfo) { innerStream.Int8(key); innerStream.Struct(value) }, out.Ratings)
    stream.Map(func (innerStream *OutputStream, key int8, value []QBuffer) { innerStream.Int8(key); innerStream.List(func (innerStream *OutputStream, data QBuffer) { innerStream.Buffer(data) }, value) }, out.Buffers)
    return
}
func (stream *InputStream) StructDataStoreFetchMyInfosParam() (in DataStoreFetchMyInfosParam) {
    in.Base = stream.Struct("Structure").(Structure)
    in.BalloonDataTypes = stream.List("Uint16", func (innerStream *InputStream) uint16 { return innerStream.UInt16LE() }).([]uint16)
    in.AdditionalOperation = stream.UInt16LE()
    return
}
func (stream *OutputStream) StructDataStoreFetchMyInfosParam(out DataStoreFetchMyInfosParam) {
    stream.Struct(out.Base)
    stream.List(func (innerStream *OutputStream, data uint16) { innerStream.UInt16LE(data) }, out.BalloonDataTypes)
    stream.UInt16LE(out.AdditionalOperation)
    return
}
func (stream *InputStream) StructDataStoreFetchMyInfosResult() (in DataStoreFetchMyInfosResult) {
    in.Base = stream.Struct("Structure").(Structure)
    in.Balloons = stream.List("DataStoreFetchMyInfosBalloonResult", func (innerStream *InputStream) DataStoreFetchMyInfosBalloonResult { return innerStream.Struct("DataStoreFetchMyInfosBalloonResult").(DataStoreFetchMyInfosBalloonResult) }).([]DataStoreFetchMyInfosBalloonResult)
    in.Achievement = stream.Struct("DataStoreFetchMyInfosAchievementResult").(DataStoreFetchMyInfosAchievementResult)
    return
}
func (stream *OutputStream) StructDataStoreFetchMyInfosResult(out DataStoreFetchMyInfosResult) {
    stream.Struct(out.Base)
    stream.List(func (innerStream *OutputStream, data DataStoreFetchMyInfosBalloonResult) { innerStream.Struct(data) }, out.Balloons)
    stream.Struct(out.Achievement)
    return
}
func (stream *InputStream) StructDataStoreGetMetaParam() (in DataStoreGetMetaParam) {
    in.Base = stream.Struct("Structure").(Structure)
    in.DataId = stream.UInt64LE()
    in.PersistenceTarget = stream.Struct("DataStorePersistenceTarget").(DataStorePersistenceTarget)
    in.ResultOption = stream.UInt8()
    in.AccessPassword = stream.UInt64LE()
    return
}
func (stream *OutputStream) StructDataStoreGetMetaParam(out DataStoreGetMetaParam) {
    stream.Struct(out.Base)
    stream.UInt64LE(out.DataId)
    stream.Struct(out.PersistenceTarget)
    stream.UInt8(out.ResultOption)
    stream.UInt64LE(out.AccessPassword)
    return
}
func (stream *InputStream) StructDataStoreGetNewArrivedNotificationsParam() (in DataStoreGetNewArrivedNotificationsParam) {
    in.Base = stream.Struct("Structure").(Structure)
    in.LastNotificationId = stream.UInt64LE()
    in.Limit = stream.UInt16LE()
    return
}
func (stream *OutputStream) StructDataStoreGetNewArrivedNotificationsParam(out DataStoreGetNewArrivedNotificationsParam) {
    stream.Struct(out.Base)
    stream.UInt64LE(out.LastNotificationId)
    stream.UInt16LE(out.Limit)
    return
}
func (stream *InputStream) StructDataStoreGetNotificationUrlParam() (in DataStoreGetNotificationUrlParam) {
    in.Base = stream.Struct("Structure").(Structure)
    in.PreviousUrl = string(stream.String())
    return
}
func (stream *OutputStream) StructDataStoreGetNotificationUrlParam(out DataStoreGetNotificationUrlParam) {
    stream.Struct(out.Base)
    stream.String(string(out.PreviousUrl))
    return
}
func (stream *InputStream) StructDataStoreGetSpecificMetaParam() (in DataStoreGetSpecificMetaParam) {
    in.Base = stream.Struct("Structure").(Structure)
    in.DataIds = stream.List("Uint64", func (innerStream *InputStream) uint64 { return innerStream.UInt64LE() }).([]uint64)
    return
}
func (stream *OutputStream) StructDataStoreGetSpecificMetaParam(out DataStoreGetSpecificMetaParam) {
    stream.Struct(out.Base)
    stream.List(func (innerStream *OutputStream, data uint64) { innerStream.UInt64LE(data) }, out.DataIds)
    return
}
func (stream *InputStream) StructDataStoreGetSpecificMetaParamV1() (in DataStoreGetSpecificMetaParamV1) {
    in.Base = stream.Struct("Structure").(Structure)
    in.DataIds = stream.List("Uint32", func (innerStream *InputStream) uint32 { return innerStream.UInt32LE() }).([]uint32)
    return
}
func (stream *OutputStream) StructDataStoreGetSpecificMetaParamV1(out DataStoreGetSpecificMetaParamV1) {
    stream.Struct(out.Base)
    stream.List(func (innerStream *OutputStream, data uint32) { innerStream.UInt32LE(data) }, out.DataIds)
    return
}
func (stream *InputStream) StructDataStoreKeyValue() (in DataStoreKeyValue) {
    in.Base = stream.Struct("Structure").(Structure)
    in.Key = string(stream.String())
    in.Value = string(stream.String())
    return
}
func (stream *OutputStream) StructDataStoreKeyValue(out DataStoreKeyValue) {
    stream.Struct(out.Base)
    stream.String(string(out.Key))
    stream.String(string(out.Value))
    return
}
func (stream *InputStream) StructDataStoreMetaInfo() (in DataStoreMetaInfo) {
    in.Base = stream.Struct("Structure").(Structure)
    in.DataId = stream.UInt64LE()
    in.OwnerId = stream.UInt64LE()
    in.Size = stream.UInt32LE()
    in.Name = string(stream.String())
    in.DataType = stream.UInt16LE()
    in.MetaBinary = stream.Buffer()
    in.Permission = stream.Struct("DataStorePermission").(DataStorePermission)
    in.DelPermission = stream.Struct("DataStorePermission").(DataStorePermission)
    in.CreatedTime = DateTime(stream.UInt64LE())
    in.UpdatedTime = DateTime(stream.UInt64LE())
    in.Period = stream.UInt16LE()
    in.Status = stream.UInt8()
    in.ReferredCnt = stream.UInt32LE()
    in.ReferDataId = stream.UInt32LE()
    in.Flag = stream.UInt32LE()
    in.ReferredTime = DateTime(stream.UInt64LE())
    in.ExpireTime = DateTime(stream.UInt64LE())
    in.Tags = stream.List("String", func (innerStream *InputStream) string { return string(innerStream.String()) }).([]string)
    in.Ratings = stream.List("DataStoreRatingInfoWithSlot", func (innerStream *InputStream) DataStoreRatingInfoWithSlot { return innerStream.Struct("DataStoreRatingInfoWithSlot").(DataStoreRatingInfoWithSlot) }).([]DataStoreRatingInfoWithSlot)
    return
}
func (stream *OutputStream) StructDataStoreMetaInfo(out DataStoreMetaInfo) {
    stream.Struct(out.Base)
    stream.UInt64LE(out.DataId)
    stream.UInt64LE(out.OwnerId)
    stream.UInt32LE(out.Size)
    stream.String(string(out.Name))
    stream.UInt16LE(out.DataType)
    stream.Buffer(out.MetaBinary)
    stream.Struct(out.Permission)
    stream.Struct(out.DelPermission)
    stream.UInt64LE(uint64(out.CreatedTime))
    stream.UInt64LE(uint64(out.UpdatedTime))
    stream.UInt16LE(out.Period)
    stream.UInt8(out.Status)
    stream.UInt32LE(out.ReferredCnt)
    stream.UInt32LE(out.ReferDataId)
    stream.UInt32LE(out.Flag)
    stream.UInt64LE(uint64(out.ReferredTime))
    stream.UInt64LE(uint64(out.ExpireTime))
    stream.List(func (innerStream *OutputStream, data string) { innerStream.String(string(data)) }, out.Tags)
    stream.List(func (innerStream *OutputStream, data DataStoreRatingInfoWithSlot) { innerStream.Struct(data) }, out.Ratings)
    return
}
func (stream *InputStream) StructDataStoreNotification() (in DataStoreNotification) {
    in.Base = stream.Struct("Structure").(Structure)
    in.NotificationId = stream.UInt64LE()
    in.DataId = stream.UInt64LE()
    return
}
func (stream *OutputStream) StructDataStoreNotification(out DataStoreNotification) {
    stream.Struct(out.Base)
    stream.UInt64LE(out.NotificationId)
    stream.UInt64LE(out.DataId)
    return
}
func (stream *InputStream) StructDataStoreNotificationV1() (in DataStoreNotificationV1) {
    in.Base = stream.Struct("Structure").(Structure)
    in.NotificationId = stream.UInt64LE()
    in.DataId = stream.UInt32LE()
    return
}
func (stream *OutputStream) StructDataStoreNotificationV1(out DataStoreNotificationV1) {
    stream.Struct(out.Base)
    stream.UInt64LE(out.NotificationId)
    stream.UInt32LE(out.DataId)
    return
}
func (stream *InputStream) StructDataStorePasswordInfo() (in DataStorePasswordInfo) {
    in.Base = stream.Struct("Structure").(Structure)
    in.DataId = stream.UInt64LE()
    in.AccessPassword = stream.UInt64LE()
    in.UpdatePassword = stream.UInt64LE()
    return
}
func (stream *OutputStream) StructDataStorePasswordInfo(out DataStorePasswordInfo) {
    stream.Struct(out.Base)
    stream.UInt64LE(out.DataId)
    stream.UInt64LE(out.AccessPassword)
    stream.UInt64LE(out.UpdatePassword)
    return
}
func (stream *InputStream) StructDataStorePermission() (in DataStorePermission) {
    in.Base = stream.Struct("Structure").(Structure)
    in.Permission = stream.UInt8()
    in.RecipientIds = stream.List("Uint64", func (innerStream *InputStream) uint64 { return innerStream.UInt64LE() }).([]uint64)
    return
}
func (stream *OutputStream) StructDataStorePermission(out DataStorePermission) {
    stream.Struct(out.Base)
    stream.UInt8(out.Permission)
    stream.List(func (innerStream *OutputStream, data uint64) { innerStream.UInt64LE(data) }, out.RecipientIds)
    return
}
func (stream *InputStream) StructDataStorePersistenceInfo() (in DataStorePersistenceInfo) {
    in.Base = stream.Struct("Structure").(Structure)
    in.OwnerId = stream.UInt64LE()
    in.PersistenceSlotId = stream.UInt16LE()
    in.DataId = stream.UInt64LE()
    return
}
func (stream *OutputStream) StructDataStorePersistenceInfo(out DataStorePersistenceInfo) {
    stream.Struct(out.Base)
    stream.UInt64LE(out.OwnerId)
    stream.UInt16LE(out.PersistenceSlotId)
    stream.UInt64LE(out.DataId)
    return
}
func (stream *InputStream) StructDataStorePersistenceInitParam() (in DataStorePersistenceInitParam) {
    in.Base = stream.Struct("Structure").(Structure)
    in.PersistenceSlotId = stream.UInt16LE()
    in.DeleteLastObject = stream.Bool()
    return
}
func (stream *OutputStream) StructDataStorePersistenceInitParam(out DataStorePersistenceInitParam) {
    stream.Struct(out.Base)
    stream.UInt16LE(out.PersistenceSlotId)
    stream.Bool(out.DeleteLastObject)
    return
}
func (stream *InputStream) StructDataStorePersistenceTarget() (in DataStorePersistenceTarget) {
    in.Base = stream.Struct("Structure").(Structure)
    in.OwnerId = stream.UInt64LE()
    in.PersistenceSlotId = stream.UInt16LE()
    return
}
func (stream *OutputStream) StructDataStorePersistenceTarget(out DataStorePersistenceTarget) {
    stream.Struct(out.Base)
    stream.UInt64LE(out.OwnerId)
    stream.UInt16LE(out.PersistenceSlotId)
    return
}
func (stream *InputStream) StructDataStorePrepareGetParam() (in DataStorePrepareGetParam) {
    in.Base = stream.Struct("Structure").(Structure)
    in.DataId = stream.UInt64LE()
    in.LockId = stream.UInt32LE()
    in.PersistenceTarget = stream.Struct("DataStorePersistenceTarget").(DataStorePersistenceTarget)
    in.AccessPassword = stream.UInt64LE()
    in.ExtraData = stream.List("String", func (innerStream *InputStream) string { return string(innerStream.String()) }).([]string)
    return
}
func (stream *OutputStream) StructDataStorePrepareGetParam(out DataStorePrepareGetParam) {
    stream.Struct(out.Base)
    stream.UInt64LE(out.DataId)
    stream.UInt32LE(out.LockId)
    stream.Struct(out.PersistenceTarget)
    stream.UInt64LE(out.AccessPassword)
    stream.List(func (innerStream *OutputStream, data string) { innerStream.String(string(data)) }, out.ExtraData)
    return
}
func (stream *InputStream) StructDataStorePrepareGetParamV1() (in DataStorePrepareGetParamV1) {
    in.Base = stream.Struct("Structure").(Structure)
    in.DataId = stream.UInt32LE()
    in.LockId = stream.UInt32LE()
    return
}
func (stream *OutputStream) StructDataStorePrepareGetParamV1(out DataStorePrepareGetParamV1) {
    stream.Struct(out.Base)
    stream.UInt32LE(out.DataId)
    stream.UInt32LE(out.LockId)
    return
}
func (stream *InputStream) StructDataStorePreparePostParam() (in DataStorePreparePostParam) {
    in.Base = stream.Struct("Structure").(Structure)
    in.Size = stream.UInt32LE()
    in.Name = string(stream.String())
    in.DataType = stream.UInt16LE()
    in.MetaBinary = stream.Buffer()
    in.Permission = stream.Struct("DataStorePermission").(DataStorePermission)
    in.DelPermission = stream.Struct("DataStorePermission").(DataStorePermission)
    in.Flag = stream.UInt32LE()
    in.Period = stream.UInt16LE()
    in.ReferDataId = stream.UInt32LE()
    in.Tags = stream.List("String", func (innerStream *InputStream) string { return string(innerStream.String()) }).([]string)
    in.RatingInitParams = stream.List("DataStoreRatingInitParamWithSlot", func (innerStream *InputStream) DataStoreRatingInitParamWithSlot { return innerStream.Struct("DataStoreRatingInitParamWithSlot").(DataStoreRatingInitParamWithSlot) }).([]DataStoreRatingInitParamWithSlot)
    in.PersistenceInitParam = stream.Struct("DataStorePersistenceInitParam").(DataStorePersistenceInitParam)
    in.ExtraData = stream.List("String", func (innerStream *InputStream) string { return string(innerStream.String()) }).([]string)
    return
}
func (stream *OutputStream) StructDataStorePreparePostParam(out DataStorePreparePostParam) {
    stream.Struct(out.Base)
    stream.UInt32LE(out.Size)
    stream.String(string(out.Name))
    stream.UInt16LE(out.DataType)
    stream.Buffer(out.MetaBinary)
    stream.Struct(out.Permission)
    stream.Struct(out.DelPermission)
    stream.UInt32LE(out.Flag)
    stream.UInt16LE(out.Period)
    stream.UInt32LE(out.ReferDataId)
    stream.List(func (innerStream *OutputStream, data string) { innerStream.String(string(data)) }, out.Tags)
    stream.List(func (innerStream *OutputStream, data DataStoreRatingInitParamWithSlot) { innerStream.Struct(data) }, out.RatingInitParams)
    stream.Struct(out.PersistenceInitParam)
    stream.List(func (innerStream *OutputStream, data string) { innerStream.String(string(data)) }, out.ExtraData)
    return
}
func (stream *InputStream) StructDataStorePreparePostParamV1() (in DataStorePreparePostParamV1) {
    in.Base = stream.Struct("Structure").(Structure)
    in.Size = stream.UInt32LE()
    in.Name = string(stream.String())
    in.DataType = stream.UInt16LE()
    in.MetaBinary = stream.Buffer()
    in.Permission = stream.Struct("DataStorePermission").(DataStorePermission)
    in.DelPermission = stream.Struct("DataStorePermission").(DataStorePermission)
    in.Flag = stream.UInt32LE()
    in.Period = stream.UInt16LE()
    in.ReferDataId = stream.UInt32LE()
    in.Tags = stream.List("String", func (innerStream *InputStream) string { return string(innerStream.String()) }).([]string)
    in.RatingInitParams = stream.List("DataStoreRatingInitParamWithSlot", func (innerStream *InputStream) DataStoreRatingInitParamWithSlot { return innerStream.Struct("DataStoreRatingInitParamWithSlot").(DataStoreRatingInitParamWithSlot) }).([]DataStoreRatingInitParamWithSlot)
    return
}
func (stream *OutputStream) StructDataStorePreparePostParamV1(out DataStorePreparePostParamV1) {
    stream.Struct(out.Base)
    stream.UInt32LE(out.Size)
    stream.String(string(out.Name))
    stream.UInt16LE(out.DataType)
    stream.Buffer(out.MetaBinary)
    stream.Struct(out.Permission)
    stream.Struct(out.DelPermission)
    stream.UInt32LE(out.Flag)
    stream.UInt16LE(out.Period)
    stream.UInt32LE(out.ReferDataId)
    stream.List(func (innerStream *OutputStream, data string) { innerStream.String(string(data)) }, out.Tags)
    stream.List(func (innerStream *OutputStream, data DataStoreRatingInitParamWithSlot) { innerStream.Struct(data) }, out.RatingInitParams)
    return
}
func (stream *InputStream) StructDataStorePrepareUpdateParam() (in DataStorePrepareUpdateParam) {
    in.Base = stream.Struct("Structure").(Structure)
    in.DataId = stream.UInt64LE()
    in.Size = stream.UInt32LE()
    in.UpdatePassword = stream.UInt64LE()
    in.ExtraData = stream.List("String", func (innerStream *InputStream) string { return string(innerStream.String()) }).([]string)
    return
}
func (stream *OutputStream) StructDataStorePrepareUpdateParam(out DataStorePrepareUpdateParam) {
    stream.Struct(out.Base)
    stream.UInt64LE(out.DataId)
    stream.UInt32LE(out.Size)
    stream.UInt64LE(out.UpdatePassword)
    stream.List(func (innerStream *OutputStream, data string) { innerStream.String(string(data)) }, out.ExtraData)
    return
}
func (stream *InputStream) StructDataStoreRateObjectParam() (in DataStoreRateObjectParam) {
    in.Base = stream.Struct("Structure").(Structure)
    in.RatingValue = stream.Int32LE()
    in.AccessPassword = stream.UInt64LE()
    return
}
func (stream *OutputStream) StructDataStoreRateObjectParam(out DataStoreRateObjectParam) {
    stream.Struct(out.Base)
    stream.Int32LE(out.RatingValue)
    stream.UInt64LE(out.AccessPassword)
    return
}
func (stream *InputStream) StructDataStoreRatingInfo() (in DataStoreRatingInfo) {
    in.Base = stream.Struct("Structure").(Structure)
    in.TotalValue = stream.Int64LE()
    in.Count = stream.UInt32LE()
    in.InitialValue = stream.Int64LE()
    return
}
func (stream *OutputStream) StructDataStoreRatingInfo(out DataStoreRatingInfo) {
    stream.Struct(out.Base)
    stream.Int64LE(out.TotalValue)
    stream.UInt32LE(out.Count)
    stream.Int64LE(out.InitialValue)
    return
}
func (stream *InputStream) StructDataStoreRatingInfoWithSlot() (in DataStoreRatingInfoWithSlot) {
    in.Base = stream.Struct("Structure").(Structure)
    in.Slot = stream.Int8()
    in.Rating = stream.Struct("DataStoreRatingInfo").(DataStoreRatingInfo)
    return
}
func (stream *OutputStream) StructDataStoreRatingInfoWithSlot(out DataStoreRatingInfoWithSlot) {
    stream.Struct(out.Base)
    stream.Int8(out.Slot)
    stream.Struct(out.Rating)
    return
}
func (stream *InputStream) StructDataStoreRatingInitParam() (in DataStoreRatingInitParam) {
    in.Base = stream.Struct("Structure").(Structure)
    in.Flag = stream.UInt8()
    in.InternalFlag = stream.UInt8()
    in.LockType = stream.UInt8()
    in.InitialValue = stream.Int64LE()
    in.RangeMin = stream.Int32LE()
    in.RangeMax = stream.Int32LE()
    in.PeriodHour = stream.Int8()
    in.PeriodDuration = stream.Int16LE()
    return
}
func (stream *OutputStream) StructDataStoreRatingInitParam(out DataStoreRatingInitParam) {
    stream.Struct(out.Base)
    stream.UInt8(out.Flag)
    stream.UInt8(out.InternalFlag)
    stream.UInt8(out.LockType)
    stream.Int64LE(out.InitialValue)
    stream.Int32LE(out.RangeMin)
    stream.Int32LE(out.RangeMax)
    stream.Int8(out.PeriodHour)
    stream.Int16LE(out.PeriodDuration)
    return
}
func (stream *InputStream) StructDataStoreRatingInitParamWithSlot() (in DataStoreRatingInitParamWithSlot) {
    in.Base = stream.Struct("Structure").(Structure)
    in.Slot = stream.Int8()
    in.Param = stream.Struct("DataStoreRatingInitParam").(DataStoreRatingInitParam)
    return
}
func (stream *OutputStream) StructDataStoreRatingInitParamWithSlot(out DataStoreRatingInitParamWithSlot) {
    stream.Struct(out.Base)
    stream.Int8(out.Slot)
    stream.Struct(out.Param)
    return
}
func (stream *InputStream) StructDataStoreRatingLog() (in DataStoreRatingLog) {
    in.Base = stream.Struct("Structure").(Structure)
    in.IsRated = stream.Bool()
    in.Pid = stream.UInt64LE()
    in.RatingValue = stream.Int32LE()
    in.LockExpirationTime = DateTime(stream.UInt64LE())
    return
}
func (stream *OutputStream) StructDataStoreRatingLog(out DataStoreRatingLog) {
    stream.Struct(out.Base)
    stream.Bool(out.IsRated)
    stream.UInt64LE(out.Pid)
    stream.Int32LE(out.RatingValue)
    stream.UInt64LE(uint64(out.LockExpirationTime))
    return
}
func (stream *InputStream) StructDataStoreRatingTarget() (in DataStoreRatingTarget) {
    in.Base = stream.Struct("Structure").(Structure)
    in.DataId = stream.UInt64LE()
    in.Slot = stream.Int8()
    return
}
func (stream *OutputStream) StructDataStoreRatingTarget(out DataStoreRatingTarget) {
    stream.Struct(out.Base)
    stream.UInt64LE(out.DataId)
    stream.Int8(out.Slot)
    return
}
func (stream *InputStream) StructDataStoreReqGetAdditionalMeta() (in DataStoreReqGetAdditionalMeta) {
    in.Base = stream.Struct("Structure").(Structure)
    in.OwnerId = stream.UInt64LE()
    in.DataType = stream.UInt16LE()
    in.Version = stream.UInt16LE()
    in.MetaBinary = stream.Buffer()
    return
}
func (stream *OutputStream) StructDataStoreReqGetAdditionalMeta(out DataStoreReqGetAdditionalMeta) {
    stream.Struct(out.Base)
    stream.UInt64LE(out.OwnerId)
    stream.UInt16LE(out.DataType)
    stream.UInt16LE(out.Version)
    stream.Buffer(out.MetaBinary)
    return
}
func (stream *InputStream) StructDataStoreReqGetInfo() (in DataStoreReqGetInfo) {
    in.Base = stream.Struct("Structure").(Structure)
    in.Url = string(stream.String())
    in.RequestHeaders = stream.List("DataStoreKeyValue", func (innerStream *InputStream) DataStoreKeyValue { return innerStream.Struct("DataStoreKeyValue").(DataStoreKeyValue) }).([]DataStoreKeyValue)
    in.Size = stream.UInt32LE()
    in.RootCaCert = stream.Buffer()
    in.DataId = stream.UInt64LE()
    return
}
func (stream *OutputStream) StructDataStoreReqGetInfo(out DataStoreReqGetInfo) {
    stream.Struct(out.Base)
    stream.String(string(out.Url))
    stream.List(func (innerStream *OutputStream, data DataStoreKeyValue) { innerStream.Struct(data) }, out.RequestHeaders)
    stream.UInt32LE(out.Size)
    stream.Buffer(out.RootCaCert)
    stream.UInt64LE(out.DataId)
    return
}
func (stream *InputStream) StructDataStoreReqGetInfoV1() (in DataStoreReqGetInfoV1) {
    in.Base = stream.Struct("Structure").(Structure)
    in.Url = string(stream.String())
    in.RequestHeaders = stream.List("DataStoreKeyValue", func (innerStream *InputStream) DataStoreKeyValue { return innerStream.Struct("DataStoreKeyValue").(DataStoreKeyValue) }).([]DataStoreKeyValue)
    in.Size = stream.UInt32LE()
    in.RootCaCert = stream.Buffer()
    return
}
func (stream *OutputStream) StructDataStoreReqGetInfoV1(out DataStoreReqGetInfoV1) {
    stream.Struct(out.Base)
    stream.String(string(out.Url))
    stream.List(func (innerStream *OutputStream, data DataStoreKeyValue) { innerStream.Struct(data) }, out.RequestHeaders)
    stream.UInt32LE(out.Size)
    stream.Buffer(out.RootCaCert)
    return
}
func (stream *InputStream) StructDataStoreReqGetNotificationUrlInfo() (in DataStoreReqGetNotificationUrlInfo) {
    in.Base = stream.Struct("Structure").(Structure)
    in.Url = string(stream.String())
    in.Key = string(stream.String())
    in.Query = string(stream.String())
    in.RootCaCert = stream.Buffer()
    return
}
func (stream *OutputStream) StructDataStoreReqGetNotificationUrlInfo(out DataStoreReqGetNotificationUrlInfo) {
    stream.Struct(out.Base)
    stream.String(string(out.Url))
    stream.String(string(out.Key))
    stream.String(string(out.Query))
    stream.Buffer(out.RootCaCert)
    return
}
func (stream *InputStream) StructDataStoreReqPostInfo() (in DataStoreReqPostInfo) {
    in.Base = stream.Struct("Structure").(Structure)
    in.DataId = stream.UInt64LE()
    in.Url = string(stream.String())
    in.RequestHeaders = stream.List("DataStoreKeyValue", func (innerStream *InputStream) DataStoreKeyValue { return innerStream.Struct("DataStoreKeyValue").(DataStoreKeyValue) }).([]DataStoreKeyValue)
    in.FormFields = stream.List("DataStoreKeyValue", func (innerStream *InputStream) DataStoreKeyValue { return innerStream.Struct("DataStoreKeyValue").(DataStoreKeyValue) }).([]DataStoreKeyValue)
    in.RootCaCert = stream.Buffer()
    return
}
func (stream *OutputStream) StructDataStoreReqPostInfo(out DataStoreReqPostInfo) {
    stream.Struct(out.Base)
    stream.UInt64LE(out.DataId)
    stream.String(string(out.Url))
    stream.List(func (innerStream *OutputStream, data DataStoreKeyValue) { innerStream.Struct(data) }, out.RequestHeaders)
    stream.List(func (innerStream *OutputStream, data DataStoreKeyValue) { innerStream.Struct(data) }, out.FormFields)
    stream.Buffer(out.RootCaCert)
    return
}
func (stream *InputStream) StructDataStoreReqPostInfoV1() (in DataStoreReqPostInfoV1) {
    in.Base = stream.Struct("Structure").(Structure)
    in.DataId = stream.UInt32LE()
    in.Url = string(stream.String())
    in.RequestHeaders = stream.List("DataStoreKeyValue", func (innerStream *InputStream) DataStoreKeyValue { return innerStream.Struct("DataStoreKeyValue").(DataStoreKeyValue) }).([]DataStoreKeyValue)
    in.FormFields = stream.List("DataStoreKeyValue", func (innerStream *InputStream) DataStoreKeyValue { return innerStream.Struct("DataStoreKeyValue").(DataStoreKeyValue) }).([]DataStoreKeyValue)
    in.RootCaCert = stream.Buffer()
    return
}
func (stream *OutputStream) StructDataStoreReqPostInfoV1(out DataStoreReqPostInfoV1) {
    stream.Struct(out.Base)
    stream.UInt32LE(out.DataId)
    stream.String(string(out.Url))
    stream.List(func (innerStream *OutputStream, data DataStoreKeyValue) { innerStream.Struct(data) }, out.RequestHeaders)
    stream.List(func (innerStream *OutputStream, data DataStoreKeyValue) { innerStream.Struct(data) }, out.FormFields)
    stream.Buffer(out.RootCaCert)
    return
}
func (stream *InputStream) StructDataStoreReqUpdateInfo() (in DataStoreReqUpdateInfo) {
    in.Base = stream.Struct("Structure").(Structure)
    in.Version = stream.UInt32LE()
    in.Url = string(stream.String())
    in.RequestHeaders = stream.List("DataStoreKeyValue", func (innerStream *InputStream) DataStoreKeyValue { return innerStream.Struct("DataStoreKeyValue").(DataStoreKeyValue) }).([]DataStoreKeyValue)
    in.FormFields = stream.List("DataStoreKeyValue", func (innerStream *InputStream) DataStoreKeyValue { return innerStream.Struct("DataStoreKeyValue").(DataStoreKeyValue) }).([]DataStoreKeyValue)
    in.RootCaCert = stream.Buffer()
    return
}
func (stream *OutputStream) StructDataStoreReqUpdateInfo(out DataStoreReqUpdateInfo) {
    stream.Struct(out.Base)
    stream.UInt32LE(out.Version)
    stream.String(string(out.Url))
    stream.List(func (innerStream *OutputStream, data DataStoreKeyValue) { innerStream.Struct(data) }, out.RequestHeaders)
    stream.List(func (innerStream *OutputStream, data DataStoreKeyValue) { innerStream.Struct(data) }, out.FormFields)
    stream.Buffer(out.RootCaCert)
    return
}
func (stream *InputStream) StructDataStoreSearchBalloonParam() (in DataStoreSearchBalloonParam) {
    in.Base = stream.Struct("Structure").(Structure)
    in.DataType = stream.UInt16LE()
    in.UserRank = stream.UInt8()
    in.ResultSetCount = stream.UInt8()
    return
}
func (stream *OutputStream) StructDataStoreSearchBalloonParam(out DataStoreSearchBalloonParam) {
    stream.Struct(out.Base)
    stream.UInt16LE(out.DataType)
    stream.UInt8(out.UserRank)
    stream.UInt8(out.ResultSetCount)
    return
}
func (stream *InputStream) StructDataStoreSearchBalloonResult() (in DataStoreSearchBalloonResult) {
    in.Base = stream.Struct("Structure").(Structure)
    in.DataId = stream.UInt64LE()
    in.OwnerId = stream.UInt64LE()
    in.Size = stream.UInt32LE()
    in.Name = string(stream.String())
    in.DataType = stream.UInt16LE()
    in.MetaBinary = stream.Buffer()
    in.CreatedTime = DateTime(stream.UInt64LE())
    in.UpdatedTime = DateTime(stream.UInt64LE())
    in.OwnerDataId = stream.UInt64LE()
    in.OwnerName = string(stream.String())
    in.IsFriendBalloon = stream.Bool()
    in.Ratings = stream.Map("Map<Sint8,DataStoreRatingInfo>", func (innerStream *InputStream)(int8, DataStoreRatingInfo) { return innerStream.Int8(), innerStream.Struct("DataStoreRatingInfo").(DataStoreRatingInfo) }).(map[int8]DataStoreRatingInfo)
    in.OwnerRatings = stream.Map("Map<Sint8,DataStoreRatingInfo>", func (innerStream *InputStream)(int8, DataStoreRatingInfo) { return innerStream.Int8(), innerStream.Struct("DataStoreRatingInfo").(DataStoreRatingInfo) }).(map[int8]DataStoreRatingInfo)
    return
}
func (stream *OutputStream) StructDataStoreSearchBalloonResult(out DataStoreSearchBalloonResult) {
    stream.Struct(out.Base)
    stream.UInt64LE(out.DataId)
    stream.UInt64LE(out.OwnerId)
    stream.UInt32LE(out.Size)
    stream.String(string(out.Name))
    stream.UInt16LE(out.DataType)
    stream.Buffer(out.MetaBinary)
    stream.UInt64LE(uint64(out.CreatedTime))
    stream.UInt64LE(uint64(out.UpdatedTime))
    stream.UInt64LE(out.OwnerDataId)
    stream.String(string(out.OwnerName))
    stream.Bool(out.IsFriendBalloon)
    stream.Map(func (innerStream *OutputStream, key int8, value DataStoreRatingInfo) { innerStream.Int8(key); innerStream.Struct(value) }, out.Ratings)
    stream.Map(func (innerStream *OutputStream, key int8, value DataStoreRatingInfo) { innerStream.Int8(key); innerStream.Struct(value) }, out.OwnerRatings)
    return
}
func (stream *InputStream) StructDataStoreSearchBalloonResultSet() (in DataStoreSearchBalloonResultSet) {
    in.Base = stream.Struct("Structure").(Structure)
    in.Balloons = stream.List("DataStoreSearchBalloonResult", func (innerStream *InputStream) DataStoreSearchBalloonResult { return innerStream.Struct("DataStoreSearchBalloonResult").(DataStoreSearchBalloonResult) }).([]DataStoreSearchBalloonResult)
    return
}
func (stream *OutputStream) StructDataStoreSearchBalloonResultSet(out DataStoreSearchBalloonResultSet) {
    stream.Struct(out.Base)
    stream.List(func (innerStream *OutputStream, data DataStoreSearchBalloonResult) { innerStream.Struct(data) }, out.Balloons)
    return
}
func (stream *InputStream) StructDataStoreSearchParam() (in DataStoreSearchParam) {
    in.Base = stream.Struct("Structure").(Structure)
    in.SearchTarget = stream.UInt8()
    in.OwnerIds = stream.List("Uint64", func (innerStream *InputStream) uint64 { return innerStream.UInt64LE() }).([]uint64)
    in.OwnerType = stream.UInt8()
    in.DestinationIds = stream.List("Uint64", func (innerStream *InputStream) uint64 { return innerStream.UInt64LE() }).([]uint64)
    in.DataType = stream.UInt16LE()
    in.CreatedAfter = DateTime(stream.UInt64LE())
    in.CreatedBefore = DateTime(stream.UInt64LE())
    in.UpdatedAfter = DateTime(stream.UInt64LE())
    in.UpdatedBefore = DateTime(stream.UInt64LE())
    in.ReferDataId = stream.UInt32LE()
    in.Tags = stream.List("String", func (innerStream *InputStream) string { return string(innerStream.String()) }).([]string)
    in.ResultOrderColumn = stream.UInt8()
    in.ResultOrder = stream.UInt8()
    in.ResultRange = stream.Struct("ResultRange").(ResultRange)
    in.ResultOption = stream.UInt8()
    in.MinimalRatingFrequency = stream.UInt32LE()
    in.UseCache = stream.Bool()
    in.TotalCountEnabled = stream.Bool()
    in.DataTypes = stream.List("Uint16", func (innerStream *InputStream) uint16 { return innerStream.UInt16LE() }).([]uint16)
    return
}
func (stream *OutputStream) StructDataStoreSearchParam(out DataStoreSearchParam) {
    stream.Struct(out.Base)
    stream.UInt8(out.SearchTarget)
    stream.List(func (innerStream *OutputStream, data uint64) { innerStream.UInt64LE(data) }, out.OwnerIds)
    stream.UInt8(out.OwnerType)
    stream.List(func (innerStream *OutputStream, data uint64) { innerStream.UInt64LE(data) }, out.DestinationIds)
    stream.UInt16LE(out.DataType)
    stream.UInt64LE(uint64(out.CreatedAfter))
    stream.UInt64LE(uint64(out.CreatedBefore))
    stream.UInt64LE(uint64(out.UpdatedAfter))
    stream.UInt64LE(uint64(out.UpdatedBefore))
    stream.UInt32LE(out.ReferDataId)
    stream.List(func (innerStream *OutputStream, data string) { innerStream.String(string(data)) }, out.Tags)
    stream.UInt8(out.ResultOrderColumn)
    stream.UInt8(out.ResultOrder)
    stream.Struct(out.ResultRange)
    stream.UInt8(out.ResultOption)
    stream.UInt32LE(out.MinimalRatingFrequency)
    stream.Bool(out.UseCache)
    stream.Bool(out.TotalCountEnabled)
    stream.List(func (innerStream *OutputStream, data uint16) { innerStream.UInt16LE(data) }, out.DataTypes)
    return
}
func (stream *InputStream) StructDataStoreSearchResult() (in DataStoreSearchResult) {
    in.Base = stream.Struct("Structure").(Structure)
    in.TotalCount = stream.UInt32LE()
    in.Result = stream.List("DataStoreMetaInfo", func (innerStream *InputStream) DataStoreMetaInfo { return innerStream.Struct("DataStoreMetaInfo").(DataStoreMetaInfo) }).([]DataStoreMetaInfo)
    in.TotalCountType = stream.UInt8()
    return
}
func (stream *OutputStream) StructDataStoreSearchResult(out DataStoreSearchResult) {
    stream.Struct(out.Base)
    stream.UInt32LE(out.TotalCount)
    stream.List(func (innerStream *OutputStream, data DataStoreMetaInfo) { innerStream.Struct(data) }, out.Result)
    stream.UInt8(out.TotalCountType)
    return
}
func (stream *InputStream) StructDataStoreSpecificMetaInfo() (in DataStoreSpecificMetaInfo) {
    in.Base = stream.Struct("Structure").(Structure)
    in.DataId = stream.UInt64LE()
    in.OwnerId = stream.UInt64LE()
    in.Size = stream.UInt32LE()
    in.DataType = stream.UInt16LE()
    in.Version = stream.UInt32LE()
    return
}
func (stream *OutputStream) StructDataStoreSpecificMetaInfo(out DataStoreSpecificMetaInfo) {
    stream.Struct(out.Base)
    stream.UInt64LE(out.DataId)
    stream.UInt64LE(out.OwnerId)
    stream.UInt32LE(out.Size)
    stream.UInt16LE(out.DataType)
    stream.UInt32LE(out.Version)
    return
}
func (stream *InputStream) StructDataStoreSpecificMetaInfoV1() (in DataStoreSpecificMetaInfoV1) {
    in.Base = stream.Struct("Structure").(Structure)
    in.DataId = stream.UInt32LE()
    in.OwnerId = stream.UInt64LE()
    in.Size = stream.UInt32LE()
    in.DataType = stream.UInt16LE()
    in.Version = stream.UInt16LE()
    return
}
func (stream *OutputStream) StructDataStoreSpecificMetaInfoV1(out DataStoreSpecificMetaInfoV1) {
    stream.Struct(out.Base)
    stream.UInt32LE(out.DataId)
    stream.UInt64LE(out.OwnerId)
    stream.UInt32LE(out.Size)
    stream.UInt16LE(out.DataType)
    stream.UInt16LE(out.Version)
    return
}
func (stream *InputStream) StructDataStoreTouchObjectParam() (in DataStoreTouchObjectParam) {
    in.Base = stream.Struct("Structure").(Structure)
    in.DataId = stream.UInt64LE()
    in.LockId = stream.UInt32LE()
    in.AccessPassword = stream.UInt64LE()
    return
}
func (stream *OutputStream) StructDataStoreTouchObjectParam(out DataStoreTouchObjectParam) {
    stream.Struct(out.Base)
    stream.UInt64LE(out.DataId)
    stream.UInt32LE(out.LockId)
    stream.UInt64LE(out.AccessPassword)
    return
}
func (stream *InputStream) StructDeletionEntry() (in DeletionEntry) {
    in.Base = stream.Struct("Structure").(Structure)
    in.IdGathering = stream.UInt32LE()
    in.Pid = PID(stream.UInt32LE())
    in.UiReason = stream.UInt32LE()
    return
}
func (stream *OutputStream) StructDeletionEntry(out DeletionEntry) {
    stream.Struct(out.Base)
    stream.UInt32LE(out.IdGathering)
    stream.UInt32LE(uint32(out.Pid))
    stream.UInt32LE(out.UiReason)
    return
}
func (stream *InputStream) StructFindMatchmakeSessionByParticipantParam() (in FindMatchmakeSessionByParticipantParam) {
    in.PrincipalIdList = stream.List("PID", func (innerStream *InputStream) PID { return PID(innerStream.UInt32LE()) }).([]PID)
    in.ResultOptions = stream.UInt32LE()
    in.BlockListParam = stream.Struct("MatchmakeBlockListParam").(MatchmakeBlockListParam)
    return
}
func (stream *OutputStream) StructFindMatchmakeSessionByParticipantParam(out FindMatchmakeSessionByParticipantParam) {
    stream.List(func (innerStream *OutputStream, data PID) { innerStream.UInt32LE(uint32(data)) }, out.PrincipalIdList)
    stream.UInt32LE(out.ResultOptions)
    stream.Struct(out.BlockListParam)
    return
}
func (stream *InputStream) StructFindMatchmakeSessionByParticipantResult() (in FindMatchmakeSessionByParticipantResult) {
    in.PrincipalId = PID(stream.UInt32LE())
    in.Session = stream.Struct("MatchmakeSession").(MatchmakeSession)
    return
}
func (stream *OutputStream) StructFindMatchmakeSessionByParticipantResult(out FindMatchmakeSessionByParticipantResult) {
    stream.UInt32LE(uint32(out.PrincipalId))
    stream.Struct(out.Session)
    return
}
func (stream *InputStream) StructFriendData() (in FriendData) {
    in.Pid = stream.UInt32LE()
    in.StrName = string(stream.String())
    in.ByRelationship = stream.UInt8()
    in.UiDetails = stream.UInt32LE()
    in.StrStatus = string(stream.String())
    return
}
func (stream *OutputStream) StructFriendData(out FriendData) {
    stream.UInt32LE(out.Pid)
    stream.String(string(out.StrName))
    stream.UInt8(out.ByRelationship)
    stream.UInt32LE(out.UiDetails)
    stream.String(string(out.StrStatus))
    return
}
func (stream *InputStream) StructFriendInfo() (in FriendInfo) {
    in.NNAInfo = stream.Struct("NNAInfo").(NNAInfo)
    in.NintendoPresence = stream.Struct("NintendoPresenceV2").(NintendoPresenceV2)
    in.StatusMessage = stream.Struct("Comment").(Comment)
    in.BecameFriend = DateTime(stream.UInt64LE())
    in.LastOnline = DateTime(stream.UInt64LE())
    in.Unknown = stream.UInt64LE()
    return
}
func (stream *OutputStream) StructFriendInfo(out FriendInfo) {
    stream.Struct(out.NNAInfo)
    stream.Struct(out.NintendoPresence)
    stream.Struct(out.StatusMessage)
    stream.UInt64LE(uint64(out.BecameFriend))
    stream.UInt64LE(uint64(out.LastOnline))
    stream.UInt64LE(out.Unknown)
    return
}
func (stream *InputStream) StructFriendMii() (in FriendMii) {
    in.Unknown = stream.UInt32LE()
    in.Mii = stream.Struct("Mii").(Mii)
    in.Unknown2 = DateTime(stream.UInt64LE())
    return
}
func (stream *OutputStream) StructFriendMii(out FriendMii) {
    stream.UInt32LE(out.Unknown)
    stream.Struct(out.Mii)
    stream.UInt64LE(uint64(out.Unknown2))
    return
}
func (stream *InputStream) StructFriendMiiList() (in FriendMiiList) {
    in.Unknown = stream.UInt32LE()
    in.MiiList = stream.Struct("MiiList").(MiiList)
    in.Unknown2 = DateTime(stream.UInt64LE())
    return
}
func (stream *OutputStream) StructFriendMiiList(out FriendMiiList) {
    stream.UInt32LE(out.Unknown)
    stream.Struct(out.MiiList)
    stream.UInt64LE(uint64(out.Unknown2))
    return
}
func (stream *InputStream) StructFriendMiiRequest() (in FriendMiiRequest) {
    in.Unknown = stream.UInt32LE()
    in.Unknown2 = DateTime(stream.UInt64LE())
    return
}
func (stream *OutputStream) StructFriendMiiRequest(out FriendMiiRequest) {
    stream.UInt32LE(out.Unknown)
    stream.UInt64LE(uint64(out.Unknown2))
    return
}
func (stream *InputStream) StructFriendPersistentInfo() (in FriendPersistentInfo) {
    in.Unknown = stream.UInt32LE()
    in.Region = stream.UInt8()
    in.Country = stream.UInt8()
    in.Area = stream.UInt8()
    in.Language = stream.UInt8()
    in.Platform = stream.UInt8()
    in.GameKey = stream.Struct("GameKey").(GameKey)
    in.Unknown2 = string(stream.String())
    in.Unknown3 = DateTime(stream.UInt64LE())
    in.Unknown4 = DateTime(stream.UInt64LE())
    in.Unknown5 = DateTime(stream.UInt64LE())
    return
}
func (stream *OutputStream) StructFriendPersistentInfo(out FriendPersistentInfo) {
    stream.UInt32LE(out.Unknown)
    stream.UInt8(out.Region)
    stream.UInt8(out.Country)
    stream.UInt8(out.Area)
    stream.UInt8(out.Language)
    stream.UInt8(out.Platform)
    stream.Struct(out.GameKey)
    stream.String(string(out.Unknown2))
    stream.UInt64LE(uint64(out.Unknown3))
    stream.UInt64LE(uint64(out.Unknown4))
    stream.UInt64LE(uint64(out.Unknown5))
    return
}
func (stream *InputStream) StructFriendPicture() (in FriendPicture) {
    in.Unknown = stream.UInt32LE()
    in.Data = stream.Buffer()
    in.DateTime = DateTime(stream.UInt64LE())
    return
}
func (stream *OutputStream) StructFriendPicture(out FriendPicture) {
    stream.UInt32LE(out.Unknown)
    stream.Buffer(out.Data)
    stream.UInt64LE(uint64(out.DateTime))
    return
}
func (stream *InputStream) StructFriendPresence() (in FriendPresence) {
    in.Unknown = stream.UInt32LE()
    in.NintendoPresence = stream.Struct("NintendoPresence").(NintendoPresence)
    return
}
func (stream *OutputStream) StructFriendPresence(out FriendPresence) {
    stream.UInt32LE(out.Unknown)
    stream.Struct(out.NintendoPresence)
    return
}
func (stream *InputStream) StructFriendRelationship() (in FriendRelationship) {
    in.Unknown = stream.UInt32LE()
    in.Unknown2 = stream.UInt64LE()
    in.Unknown3 = stream.UInt8()
    return
}
func (stream *OutputStream) StructFriendRelationship(out FriendRelationship) {
    stream.UInt32LE(out.Unknown)
    stream.UInt64LE(out.Unknown2)
    stream.UInt8(out.Unknown3)
    return
}
func (stream *InputStream) StructFriendRequest() (in FriendRequest) {
    in.PrincipalBasicInfo = stream.Struct("PrincipalBasicInfo").(PrincipalBasicInfo)
    in.Message = stream.Struct("FriendRequestMessage").(FriendRequestMessage)
    in.SentOn = DateTime(stream.UInt64LE())
    return
}
func (stream *OutputStream) StructFriendRequest(out FriendRequest) {
    stream.Struct(out.PrincipalBasicInfo)
    stream.Struct(out.Message)
    stream.UInt64LE(uint64(out.SentOn))
    return
}
func (stream *InputStream) StructFriendRequestMessage() (in FriendRequestMessage) {
    in.Unknown = stream.UInt64LE()
    in.Unknown2 = stream.UInt8()
    in.Unknown3 = stream.UInt8()
    in.Message = string(stream.String())
    in.Unknown4 = stream.UInt8()
    in.Unknown5 = string(stream.String())
    in.GameKey = stream.Struct("GameKey").(GameKey)
    in.Unknown6 = DateTime(stream.UInt64LE())
    in.ExpiresOn = DateTime(stream.UInt64LE())
    return
}
func (stream *OutputStream) StructFriendRequestMessage(out FriendRequestMessage) {
    stream.UInt64LE(out.Unknown)
    stream.UInt8(out.Unknown2)
    stream.UInt8(out.Unknown3)
    stream.String(string(out.Message))
    stream.UInt8(out.Unknown4)
    stream.String(string(out.Unknown5))
    stream.Struct(out.GameKey)
    stream.UInt64LE(uint64(out.Unknown6))
    stream.UInt64LE(uint64(out.ExpiresOn))
    return
}
func (stream *InputStream) StructGameKey() (in GameKey) {
    in.TitleId = stream.UInt64LE()
    in.TitleVersion = stream.UInt16LE()
    return
}
func (stream *OutputStream) StructGameKey(out GameKey) {
    stream.UInt64LE(out.TitleId)
    stream.UInt16LE(out.TitleVersion)
    return
}
func (stream *InputStream) StructGathering() (in Gathering) {
    in.Base = stream.Struct("Structure").(Structure)
    in.IdMyself = stream.UInt32LE()
    in.PidOwner = PID(stream.UInt32LE())
    in.PidHost = PID(stream.UInt32LE())
    in.UiMinParticipants = stream.UInt16LE()
    in.UiMaxParticipants = stream.UInt16LE()
    in.UiParticipationPolicy = stream.UInt32LE()
    in.UiPolicyArgument = stream.UInt32LE()
    in.UiFlags = stream.UInt32LE()
    in.UiState = stream.UInt32LE()
    in.StrDescription = string(stream.String())
    return
}
func (stream *OutputStream) StructGathering(out Gathering) {
    stream.Struct(out.Base)
    stream.UInt32LE(out.IdMyself)
    stream.UInt32LE(uint32(out.PidOwner))
    stream.UInt32LE(uint32(out.PidHost))
    stream.UInt16LE(out.UiMinParticipants)
    stream.UInt16LE(out.UiMaxParticipants)
    stream.UInt32LE(out.UiParticipationPolicy)
    stream.UInt32LE(out.UiPolicyArgument)
    stream.UInt32LE(out.UiFlags)
    stream.UInt32LE(out.UiState)
    stream.String(string(out.StrDescription))
    return
}
func (stream *InputStream) StructGatheringStats() (in GatheringStats) {
    in.Base = stream.Struct("Structure").(Structure)
    in.PidParticipant = stream.UInt32LE()
    in.UiFlags = stream.UInt32LE()
    in.LstValues = stream.List("Float", func (innerStream *InputStream) float32 { return innerStream.Float32LE() }).([]float32)
    return
}
func (stream *OutputStream) StructGatheringStats(out GatheringStats) {
    stream.Struct(out.Base)
    stream.UInt32LE(out.PidParticipant)
    stream.UInt32LE(out.UiFlags)
    stream.List(func (innerStream *OutputStream, data float32) { innerStream.Float32LE(data) }, out.LstValues)
    return
}
func (stream *InputStream) StructGatheringURLs() (in GatheringURLs) {
    in.Base = stream.Struct("Structure").(Structure)
    in.Gid = stream.UInt32LE()
    in.LstStationURLs = stream.List("StationURL", func (innerStream *InputStream) StationURL { return StationURL(innerStream.String()) }).([]StationURL)
    return
}
func (stream *OutputStream) StructGatheringURLs(out GatheringURLs) {
    stream.Struct(out.Base)
    stream.UInt32LE(out.Gid)
    stream.List(func (innerStream *OutputStream, data StationURL) { innerStream.String(string(data)) }, out.LstStationURLs)
    return
}
func (stream *InputStream) StructInvitation() (in Invitation) {
    in.Base = stream.Struct("Structure").(Structure)
    in.IdGathering = stream.UInt32LE()
    in.IdGuest = stream.UInt32LE()
    in.StrMessage = string(stream.String())
    return
}
func (stream *OutputStream) StructInvitation(out Invitation) {
    stream.Struct(out.Base)
    stream.UInt32LE(out.IdGathering)
    stream.UInt32LE(out.IdGuest)
    stream.String(string(out.StrMessage))
    return
}
func (stream *InputStream) StructJoinMatchmakeSessionParam() (in JoinMatchmakeSessionParam) {
    in.Base = stream.Struct("Structure").(Structure)
    in.Gid = stream.UInt32LE()
    in.AdditionalParticipants = stream.List("PID", func (innerStream *InputStream) PID { return PID(innerStream.UInt32LE()) }).([]PID)
    in.GidForParticipationCheck = stream.UInt32LE()
    in.JoinMatchmakeSessionOption = stream.UInt32LE()
    in.JoinMatchmakeSessionBehavior = stream.UInt8()
    in.StrUserPassword = string(stream.String())
    in.StrSystemPassword = string(stream.String())
    in.JoinMessage = string(stream.String())
    in.ParticipationCount = stream.UInt16LE()
    in.ExtraParticipants = stream.UInt16LE()
    in.BlockListParam = stream.Struct("MatchmakeBlockListParam").(MatchmakeBlockListParam)
    return
}
func (stream *OutputStream) StructJoinMatchmakeSessionParam(out JoinMatchmakeSessionParam) {
    stream.Struct(out.Base)
    stream.UInt32LE(out.Gid)
    stream.List(func (innerStream *OutputStream, data PID) { innerStream.UInt32LE(uint32(data)) }, out.AdditionalParticipants)
    stream.UInt32LE(out.GidForParticipationCheck)
    stream.UInt32LE(out.JoinMatchmakeSessionOption)
    stream.UInt8(out.JoinMatchmakeSessionBehavior)
    stream.String(string(out.StrUserPassword))
    stream.String(string(out.StrSystemPassword))
    stream.String(string(out.JoinMessage))
    stream.UInt16LE(out.ParticipationCount)
    stream.UInt16LE(out.ExtraParticipants)
    stream.Struct(out.BlockListParam)
    return
}
func (stream *InputStream) StructMatchmakeBlockListParam() (in MatchmakeBlockListParam) {
    in.Base = stream.Struct("Structure").(Structure)
    in.OptionFlag = stream.UInt32LE()
    return
}
func (stream *OutputStream) StructMatchmakeBlockListParam(out MatchmakeBlockListParam) {
    stream.Struct(out.Base)
    stream.UInt32LE(out.OptionFlag)
    return
}
func (stream *InputStream) StructMatchmakeParam() (in MatchmakeParam) {
    in.Base = stream.Struct("Structure").(Structure)
    in.Params = stream.Map("Map<String,Variant>", func (innerStream *InputStream)(string, Variant) { return string(innerStream.String()), innerStream.Variant() }).(map[string]Variant)
    return
}
func (stream *OutputStream) StructMatchmakeParam(out MatchmakeParam) {
    stream.Struct(out.Base)
    stream.Map(func (innerStream *OutputStream, key string, value Variant) { innerStream.String(string(key)); innerStream.Variant(value) }, out.Params)
    return
}
func (stream *InputStream) StructMatchmakeSession() (in MatchmakeSession) {
    in.Base = stream.Struct("Structure").(Structure)
    in.Base2 = stream.Struct("Gathering").(Gathering)
    in.GameMode = stream.UInt32LE()
    in.Attribs = stream.List("Uint32", func (innerStream *InputStream) uint32 { return innerStream.UInt32LE() }).([]uint32)
    in.OpenParticipation = stream.Bool()
    in.MatchmakeSystemType = stream.UInt32LE()
    in.ApplicationBuffer = stream.Buffer()
    in.ParticipationCount = stream.UInt32LE()
    in.ProgressScore = stream.UInt8()
    in.SessionKey = stream.Buffer()
    in.Option0 = stream.UInt32LE()
    in.MatchmakeParam = stream.Struct("MatchmakeParam").(MatchmakeParam)
    in.StartedTime = DateTime(stream.UInt64LE())
    in.UserPassword = string(stream.String())
    in.ReferGid = stream.UInt32LE()
    in.UserPasswordEnabled = stream.Bool()
    in.SystemPasswordEnabled = stream.Bool()
    in.Codeword = string(stream.String())
    return
}
func (stream *OutputStream) StructMatchmakeSession(out MatchmakeSession) {
    stream.Struct(out.Base)
    stream.Struct(out.Base2)
    stream.UInt32LE(out.GameMode)
    stream.List(func (innerStream *OutputStream, data uint32) { innerStream.UInt32LE(data) }, out.Attribs)
    stream.Bool(out.OpenParticipation)
    stream.UInt32LE(out.MatchmakeSystemType)
    stream.Buffer(out.ApplicationBuffer)
    stream.UInt32LE(out.ParticipationCount)
    stream.UInt8(out.ProgressScore)
    stream.Buffer(out.SessionKey)
    stream.UInt32LE(out.Option0)
    stream.Struct(out.MatchmakeParam)
    stream.UInt64LE(uint64(out.StartedTime))
    stream.String(string(out.UserPassword))
    stream.UInt32LE(out.ReferGid)
    stream.Bool(out.UserPasswordEnabled)
    stream.Bool(out.SystemPasswordEnabled)
    stream.String(string(out.Codeword))
    return
}
func (stream *InputStream) StructMatchmakeSessionSearchCriteria() (in MatchmakeSessionSearchCriteria) {
    in.Base = stream.Struct("Structure").(Structure)
    in.Attribs = stream.List("String", func (innerStream *InputStream) string { return string(innerStream.String()) }).([]string)
    in.GameMode = string(stream.String())
    in.MinParticipants = string(stream.String())
    in.MaxParticipants = string(stream.String())
    in.MatchmakeSystemType = string(stream.String())
    in.VacantOnly = stream.Bool()
    in.ExcludeLocked = stream.Bool()
    in.ExcludeNonHostPid = stream.Bool()
    in.SelectionMethod = stream.UInt32LE()
    in.VacantParticipants = stream.UInt16LE()
    in.MatchmakeParam = stream.Struct("MatchmakeParam").(MatchmakeParam)
    in.ExcludeUserPasswordSet = stream.Bool()
    in.ExcludeSystemPasswordSet = stream.Bool()
    in.ReferGid = stream.UInt32LE()
    in.Codeword = string(stream.String())
    in.ResultRange = stream.Struct("ResultRange").(ResultRange)
    return
}
func (stream *OutputStream) StructMatchmakeSessionSearchCriteria(out MatchmakeSessionSearchCriteria) {
    stream.Struct(out.Base)
    stream.List(func (innerStream *OutputStream, data string) { innerStream.String(string(data)) }, out.Attribs)
    stream.String(string(out.GameMode))
    stream.String(string(out.MinParticipants))
    stream.String(string(out.MaxParticipants))
    stream.String(string(out.MatchmakeSystemType))
    stream.Bool(out.VacantOnly)
    stream.Bool(out.ExcludeLocked)
    stream.Bool(out.ExcludeNonHostPid)
    stream.UInt32LE(out.SelectionMethod)
    stream.UInt16LE(out.VacantParticipants)
    stream.Struct(out.MatchmakeParam)
    stream.Bool(out.ExcludeUserPasswordSet)
    stream.Bool(out.ExcludeSystemPasswordSet)
    stream.UInt32LE(out.ReferGid)
    stream.String(string(out.Codeword))
    stream.Struct(out.ResultRange)
    return
}
func (stream *InputStream) StructMessageRecipient() (in MessageRecipient) {
    in.UiRecipientType = stream.UInt32LE()
    in.PrincipalId = PID(stream.UInt32LE())
    in.GatheringId = stream.UInt32LE()
    return
}
func (stream *OutputStream) StructMessageRecipient(out MessageRecipient) {
    stream.UInt32LE(out.UiRecipientType)
    stream.UInt32LE(uint32(out.PrincipalId))
    stream.UInt32LE(out.GatheringId)
    return
}
func (stream *InputStream) StructMii() (in Mii) {
    in.Unknown = string(stream.String())
    in.Unknown2 = stream.Bool()
    in.Unknown3 = stream.UInt8()
    in.MiiData = stream.Buffer()
    return
}
func (stream *OutputStream) StructMii(out Mii) {
    stream.String(string(out.Unknown))
    stream.Bool(out.Unknown2)
    stream.UInt8(out.Unknown3)
    stream.Buffer(out.MiiData)
    return
}
func (stream *InputStream) StructMiiList() (in MiiList) {
    in.Unknown = string(stream.String())
    in.Unknown2 = stream.Bool()
    in.Unknown3 = stream.UInt8()
    in.MiiDataList = stream.List("Buffer", func (innerStream *InputStream) Buffer { return innerStream.Buffer() }).([]Buffer)
    return
}
func (stream *OutputStream) StructMiiList(out MiiList) {
    stream.String(string(out.Unknown))
    stream.Bool(out.Unknown2)
    stream.UInt8(out.Unknown3)
    stream.List(func (innerStream *OutputStream, data Buffer) { innerStream.Buffer(data) }, out.MiiDataList)
    return
}
func (stream *InputStream) StructMiiV2() (in MiiV2) {
    in.Name = string(stream.String())
    in.Unknown = stream.UInt8()
    in.Unknown2 = stream.UInt8()
    in.MiiDataFFLStoreData = stream.Buffer()
    in.Unknown3 = DateTime(stream.UInt64LE())
    return
}
func (stream *OutputStream) StructMiiV2(out MiiV2) {
    stream.String(string(out.Name))
    stream.UInt8(out.Unknown)
    stream.UInt8(out.Unknown2)
    stream.Buffer(out.MiiDataFFLStoreData)
    stream.UInt64LE(uint64(out.Unknown3))
    return
}
func (stream *InputStream) StructMyProfile() (in MyProfile) {
    in.Region = stream.UInt8()
    in.Country = stream.UInt8()
    in.Area = stream.UInt8()
    in.Language = stream.UInt8()
    in.Platform = stream.UInt8()
    in.Unknown = stream.UInt64LE()
    in.Unknown2 = string(stream.String())
    in.Unknown3 = string(stream.String())
    return
}
func (stream *OutputStream) StructMyProfile(out MyProfile) {
    stream.UInt8(out.Region)
    stream.UInt8(out.Country)
    stream.UInt8(out.Area)
    stream.UInt8(out.Language)
    stream.UInt8(out.Platform)
    stream.UInt64LE(out.Unknown)
    stream.String(string(out.Unknown2))
    stream.String(string(out.Unknown3))
    return
}
func (stream *InputStream) StructNNAInfo() (in NNAInfo) {
    in.PrincipalBasicInfo = stream.Struct("PrincipalBasicInfo").(PrincipalBasicInfo)
    in.Unknown = stream.UInt8()
    in.Unknown2 = stream.UInt8()
    return
}
func (stream *OutputStream) StructNNAInfo(out NNAInfo) {
    stream.Struct(out.PrincipalBasicInfo)
    stream.UInt8(out.Unknown)
    stream.UInt8(out.Unknown2)
    return
}
func (stream *InputStream) StructNintendoNotificationEvent() (in NintendoNotificationEvent) {
    in.Base = stream.Struct("Structure").(Structure)
    in.UiType = stream.UInt32LE()
    in.PidSender = PID(stream.UInt32LE())
    in.Dataholder = stream.Struct("Data").(Data)
    return
}
func (stream *OutputStream) StructNintendoNotificationEvent(out NintendoNotificationEvent) {
    stream.Struct(out.Base)
    stream.UInt32LE(out.UiType)
    stream.UInt32LE(uint32(out.PidSender))
    stream.Struct(out.Dataholder)
    return
}
func (stream *InputStream) StructNintendoNotificationEventGeneral() (in NintendoNotificationEventGeneral) {
    in.Base = stream.Struct("Structure").(Structure)
    in.U32Param = stream.UInt32LE()
    in.U64Param1 = stream.UInt64LE()
    in.U64Param2 = stream.UInt64LE()
    in.StrParam = string(stream.String())
    return
}
func (stream *OutputStream) StructNintendoNotificationEventGeneral(out NintendoNotificationEventGeneral) {
    stream.Struct(out.Base)
    stream.UInt32LE(out.U32Param)
    stream.UInt64LE(out.U64Param1)
    stream.UInt64LE(out.U64Param2)
    stream.String(string(out.StrParam))
    return
}
func (stream *InputStream) StructNintendoNotificationEventProfile() (in NintendoNotificationEventProfile) {
    in.Base = stream.Struct("Structure").(Structure)
    in.Region = stream.UInt8()
    in.Country = stream.UInt8()
    in.Area = stream.UInt8()
    in.Language = stream.UInt8()
    in.Platform = stream.UInt8()
    return
}
func (stream *OutputStream) StructNintendoNotificationEventProfile(out NintendoNotificationEventProfile) {
    stream.Struct(out.Base)
    stream.UInt8(out.Region)
    stream.UInt8(out.Country)
    stream.UInt8(out.Area)
    stream.UInt8(out.Language)
    stream.UInt8(out.Platform)
    return
}
func (stream *InputStream) StructNintendoPresence() (in NintendoPresence) {
    in.ChangedBitFlag = stream.UInt32LE()
    in.GameKey = stream.Struct("GameKey").(GameKey)
    in.GameModeDescription = string(stream.String())
    in.JoinAvailabilityFlag = stream.UInt32LE()
    in.MatchmakeSystemType = stream.UInt8()
    in.JoinGameID = stream.UInt32LE()
    in.JoinGameMode = stream.UInt32LE()
    in.OwnerPrincipalID = PID(stream.UInt32LE())
    in.JoinGroupID = stream.UInt32LE()
    in.ApplicationArg = stream.Buffer()
    return
}
func (stream *OutputStream) StructNintendoPresence(out NintendoPresence) {
    stream.UInt32LE(out.ChangedBitFlag)
    stream.Struct(out.GameKey)
    stream.String(string(out.GameModeDescription))
    stream.UInt32LE(out.JoinAvailabilityFlag)
    stream.UInt8(out.MatchmakeSystemType)
    stream.UInt32LE(out.JoinGameID)
    stream.UInt32LE(out.JoinGameMode)
    stream.UInt32LE(uint32(out.OwnerPrincipalID))
    stream.UInt32LE(out.JoinGroupID)
    stream.Buffer(out.ApplicationArg)
    return
}
func (stream *InputStream) StructNintendoPresenceV2() (in NintendoPresenceV2) {
    in.ChangedFlags = stream.UInt32LE()
    in.IsOnline = stream.Bool()
    in.GameKey = stream.Struct("GameKey").(GameKey)
    in.Unknown1 = stream.UInt8()
    in.Message = string(stream.String())
    in.Unknown2 = stream.UInt32LE()
    in.Unknown3 = stream.UInt8()
    in.GameServerId = stream.UInt32LE()
    in.Unknown4 = stream.UInt32LE()
    in.Pid = PID(stream.UInt32LE())
    in.GatheringId = stream.UInt32LE()
    in.ApplicationData = stream.Buffer()
    in.Unknown5 = stream.UInt8()
    in.Unknown6 = stream.UInt8()
    in.Unknown7 = stream.UInt8()
    return
}
func (stream *OutputStream) StructNintendoPresenceV2(out NintendoPresenceV2) {
    stream.UInt32LE(out.ChangedFlags)
    stream.Bool(out.IsOnline)
    stream.Struct(out.GameKey)
    stream.UInt8(out.Unknown1)
    stream.String(string(out.Message))
    stream.UInt32LE(out.Unknown2)
    stream.UInt8(out.Unknown3)
    stream.UInt32LE(out.GameServerId)
    stream.UInt32LE(out.Unknown4)
    stream.UInt32LE(uint32(out.Pid))
    stream.UInt32LE(out.GatheringId)
    stream.Buffer(out.ApplicationData)
    stream.UInt8(out.Unknown5)
    stream.UInt8(out.Unknown6)
    stream.UInt8(out.Unknown7)
    return
}
func (stream *InputStream) StructNotificationEvent() (in NotificationEvent) {
    in.Base = stream.Struct("Structure").(Structure)
    in.PidSource = PID(stream.UInt32LE())
    in.UiType = stream.UInt32LE()
    in.UiParam1 = stream.UInt32LE()
    in.UiParam2 = stream.UInt32LE()
    in.StrParam = string(stream.String())
    return
}
func (stream *OutputStream) StructNotificationEvent(out NotificationEvent) {
    stream.Struct(out.Base)
    stream.UInt32LE(uint32(out.PidSource))
    stream.UInt32LE(out.UiType)
    stream.UInt32LE(out.UiParam1)
    stream.UInt32LE(out.UiParam2)
    stream.String(string(out.StrParam))
    return
}
func (stream *InputStream) StructParticipantDetails() (in ParticipantDetails) {
    in.Base = stream.Struct("Structure").(Structure)
    in.IdParticipant = stream.UInt32LE()
    in.StrName = string(stream.String())
    in.StrMessage = string(stream.String())
    in.UiParticipants = stream.UInt16LE()
    return
}
func (stream *OutputStream) StructParticipantDetails(out ParticipantDetails) {
    stream.Struct(out.Base)
    stream.UInt32LE(out.IdParticipant)
    stream.String(string(out.StrName))
    stream.String(string(out.StrMessage))
    stream.UInt16LE(out.UiParticipants)
    return
}
func (stream *InputStream) StructPersistentGathering() (in PersistentGathering) {
    in.Base = stream.Struct("Structure").(Structure)
    in.Base2 = stream.Struct("Gathering").(Gathering)
    in.CommunityType = stream.UInt32LE()
    in.Password = string(stream.String())
    in.Attribs = stream.List("Uint32", func (innerStream *InputStream) uint32 { return innerStream.UInt32LE() }).([]uint32)
    in.ApplicationBuffer = stream.Buffer()
    in.ParticipationStartDate = DateTime(stream.UInt64LE())
    in.ParticipationEndDate = DateTime(stream.UInt64LE())
    in.MatchmakeSessionCount = stream.UInt32LE()
    in.ParticipationCount = stream.UInt32LE()
    return
}
func (stream *OutputStream) StructPersistentGathering(out PersistentGathering) {
    stream.Struct(out.Base)
    stream.Struct(out.Base2)
    stream.UInt32LE(out.CommunityType)
    stream.String(string(out.Password))
    stream.List(func (innerStream *OutputStream, data uint32) { innerStream.UInt32LE(data) }, out.Attribs)
    stream.Buffer(out.ApplicationBuffer)
    stream.UInt64LE(uint64(out.ParticipationStartDate))
    stream.UInt64LE(uint64(out.ParticipationEndDate))
    stream.UInt32LE(out.MatchmakeSessionCount)
    stream.UInt32LE(out.ParticipationCount)
    return
}
func (stream *InputStream) StructPersistentNotification() (in PersistentNotification) {
    in.Unknown = stream.UInt64LE()
    in.Unknown2 = stream.UInt32LE()
    in.Unknown3 = stream.UInt32LE()
    in.Unknown4 = stream.UInt32LE()
    in.Unknown5 = string(stream.String())
    return
}
func (stream *OutputStream) StructPersistentNotification(out PersistentNotification) {
    stream.UInt64LE(out.Unknown)
    stream.UInt32LE(out.Unknown2)
    stream.UInt32LE(out.Unknown3)
    stream.UInt32LE(out.Unknown4)
    stream.String(string(out.Unknown5))
    return
}
func (stream *InputStream) StructPlayedGame() (in PlayedGame) {
    in.GameKey = stream.Struct("GameKey").(GameKey)
    in.DateTime = DateTime(stream.UInt64LE())
    return
}
func (stream *OutputStream) StructPlayedGame(out PlayedGame) {
    stream.Struct(out.GameKey)
    stream.UInt64LE(uint64(out.DateTime))
    return
}
func (stream *InputStream) StructPlayingSession() (in PlayingSession) {
    in.Base = stream.Struct("Structure").(Structure)
    in.PrincipalId = PID(stream.UInt32LE())
    in.Gathering = stream.Struct("Data").(Data)
    return
}
func (stream *OutputStream) StructPlayingSession(out PlayingSession) {
    stream.Struct(out.Base)
    stream.UInt32LE(uint32(out.PrincipalId))
    stream.Struct(out.Gathering)
    return
}
func (stream *InputStream) StructPrincipalBasicInfo() (in PrincipalBasicInfo) {
    in.Pid = PID(stream.UInt32LE())
    in.NNID = string(stream.String())
    in.Mii = stream.Struct("MiiV2").(MiiV2)
    in.Unknown = stream.UInt8()
    return
}
func (stream *OutputStream) StructPrincipalBasicInfo(out PrincipalBasicInfo) {
    stream.UInt32LE(uint32(out.Pid))
    stream.String(string(out.NNID))
    stream.Struct(out.Mii)
    stream.UInt8(out.Unknown)
    return
}
func (stream *InputStream) StructPrincipalPreference() (in PrincipalPreference) {
    in.Unknown = stream.Bool()
    in.Unknown2 = stream.Bool()
    in.Unknown3 = stream.Bool()
    return
}
func (stream *OutputStream) StructPrincipalPreference(out PrincipalPreference) {
    stream.Bool(out.Unknown)
    stream.Bool(out.Unknown2)
    stream.Bool(out.Unknown3)
    return
}
func (stream *InputStream) StructPrincipalRequestBlockSetting() (in PrincipalRequestBlockSetting) {
    in.Unknown = stream.UInt32LE()
    in.Unknown2 = stream.Bool()
    return
}
func (stream *OutputStream) StructPrincipalRequestBlockSetting(out PrincipalRequestBlockSetting) {
    stream.UInt32LE(out.Unknown)
    stream.Bool(out.Unknown2)
    return
}
func (stream *InputStream) StructRVConnectionData() (in RVConnectionData) {
    in.UrlRegularProtocols = string(stream.String())
    in.LstSpecialProtocols = stream.List("byte", func (innerStream *InputStream) uint8 { return innerStream.UInt8() }).([]uint8)
    in.UrlSpecialProtocols = string(stream.String())
    return
}
func (stream *OutputStream) StructRVConnectionData(out RVConnectionData) {
    stream.String(string(out.UrlRegularProtocols))
    stream.List(func (innerStream *OutputStream, data uint8) { innerStream.UInt8(data) }, out.LstSpecialProtocols)
    stream.String(string(out.UrlSpecialProtocols))
    return
}
func (stream *InputStream) StructRankingCachedResult() (in RankingCachedResult) {
    in.CreatedTime = DateTime(stream.UInt64LE())
    in.ExpiredTime = DateTime(stream.UInt64LE())
    in.MaxLength = stream.UInt8()
    return
}
func (stream *OutputStream) StructRankingCachedResult(out RankingCachedResult) {
    stream.UInt64LE(uint64(out.CreatedTime))
    stream.UInt64LE(uint64(out.ExpiredTime))
    stream.UInt8(out.MaxLength)
    return
}
func (stream *InputStream) StructRankingChangeAttributesParam() (in RankingChangeAttributesParam) {
    in.Base = stream.Struct("Structure").(Structure)
    in.ModificationFlag = stream.UInt8()
    in.Groups = stream.List("Uint8", func (innerStream *InputStream) uint8 { return innerStream.UInt8() }).([]uint8)
    in.Param = stream.UInt64LE()
    return
}
func (stream *OutputStream) StructRankingChangeAttributesParam(out RankingChangeAttributesParam) {
    stream.Struct(out.Base)
    stream.UInt8(out.ModificationFlag)
    stream.List(func (innerStream *OutputStream, data uint8) { innerStream.UInt8(data) }, out.Groups)
    stream.UInt64LE(out.Param)
    return
}
func (stream *InputStream) StructRankingOrderParam() (in RankingOrderParam) {
    in.Base = stream.Struct("Structure").(Structure)
    in.OrderCalculation = stream.UInt8()
    in.GroupIndex = stream.UInt8()
    in.GroupNum = stream.UInt8()
    in.TimeScope = stream.UInt8()
    in.Offset = stream.UInt32LE()
    in.Length = stream.UInt8()
    return
}
func (stream *OutputStream) StructRankingOrderParam(out RankingOrderParam) {
    stream.Struct(out.Base)
    stream.UInt8(out.OrderCalculation)
    stream.UInt8(out.GroupIndex)
    stream.UInt8(out.GroupNum)
    stream.UInt8(out.TimeScope)
    stream.UInt32LE(out.Offset)
    stream.UInt8(out.Length)
    return
}
func (stream *InputStream) StructRankingRankData() (in RankingRankData) {
    in.Base = stream.Struct("Structure").(Structure)
    in.PrincipalId = PID(stream.UInt32LE())
    in.UniqueId = stream.UInt64LE()
    in.Order = stream.UInt32LE()
    in.Category = stream.UInt32LE()
    in.Score = stream.UInt32LE()
    in.Groups = stream.List("byte", func (innerStream *InputStream) uint8 { return innerStream.UInt8() }).([]uint8)
    in.Param = stream.UInt64LE()
    in.CommonData = stream.Buffer()
    return
}
func (stream *OutputStream) StructRankingRankData(out RankingRankData) {
    stream.Struct(out.Base)
    stream.UInt32LE(uint32(out.PrincipalId))
    stream.UInt64LE(out.UniqueId)
    stream.UInt32LE(out.Order)
    stream.UInt32LE(out.Category)
    stream.UInt32LE(out.Score)
    stream.List(func (innerStream *OutputStream, data uint8) { innerStream.UInt8(data) }, out.Groups)
    stream.UInt64LE(out.Param)
    stream.Buffer(out.CommonData)
    return
}
func (stream *InputStream) StructRankingResult() (in RankingResult) {
    in.Base = stream.Struct("Structure").(Structure)
    in.RankDataList = stream.List("RankingRankData", func (innerStream *InputStream) RankingRankData { return innerStream.Struct("RankingRankData").(RankingRankData) }).([]RankingRankData)
    in.TotalCount = stream.UInt32LE()
    in.SinceTime = DateTime(stream.UInt64LE())
    return
}
func (stream *OutputStream) StructRankingResult(out RankingResult) {
    stream.Struct(out.Base)
    stream.List(func (innerStream *OutputStream, data RankingRankData) { innerStream.Struct(data) }, out.RankDataList)
    stream.UInt32LE(out.TotalCount)
    stream.UInt64LE(uint64(out.SinceTime))
    return
}
func (stream *InputStream) StructRankingScoreData() (in RankingScoreData) {
    in.Base = stream.Struct("Structure").(Structure)
    in.PrincipalId = PID(stream.UInt32LE())
    in.UniqueId = stream.UInt64LE()
    in.Order = stream.UInt32LE()
    in.Category = stream.UInt32LE()
    in.Score = stream.UInt32LE()
    in.Groups = stream.List("byte", func (innerStream *InputStream) uint8 { return innerStream.UInt8() }).([]uint8)
    in.Param = stream.UInt64LE()
    in.CommonData = stream.Buffer()
    return
}
func (stream *OutputStream) StructRankingScoreData(out RankingScoreData) {
    stream.Struct(out.Base)
    stream.UInt32LE(uint32(out.PrincipalId))
    stream.UInt64LE(out.UniqueId)
    stream.UInt32LE(out.Order)
    stream.UInt32LE(out.Category)
    stream.UInt32LE(out.Score)
    stream.List(func (innerStream *OutputStream, data uint8) { innerStream.UInt8(data) }, out.Groups)
    stream.UInt64LE(out.Param)
    stream.Buffer(out.CommonData)
    return
}
func (stream *InputStream) StructRankingStats() (in RankingStats) {
    in.Base = stream.Struct("Structure").(Structure)
    in.StatsList = stream.List("Double", func (innerStream *InputStream) float64 { return innerStream.Float64LE() }).([]float64)
    return
}
func (stream *OutputStream) StructRankingStats(out RankingStats) {
    stream.Struct(out.Base)
    stream.List(func (innerStream *OutputStream, data float64) { innerStream.Float64LE(data) }, out.StatsList)
    return
}
func (stream *InputStream) StructRelationshipData() (in RelationshipData) {
    in.Pid = stream.UInt32LE()
    in.StrName = string(stream.String())
    in.ByRelationship = stream.UInt8()
    in.UiDetails = stream.UInt32LE()
    in.ByStatus = stream.UInt8()
    return
}
func (stream *OutputStream) StructRelationshipData(out RelationshipData) {
    stream.UInt32LE(out.Pid)
    stream.String(string(out.StrName))
    stream.UInt8(out.ByRelationship)
    stream.UInt32LE(out.UiDetails)
    stream.UInt8(out.ByStatus)
    return
}
func (stream *InputStream) StructResultRange() (in ResultRange) {
    in.Base = stream.Struct("Structure").(Structure)
    in.UiOffset = stream.UInt32LE()
    in.UiSize = stream.UInt32LE()
    return
}
func (stream *OutputStream) StructResultRange(out ResultRange) {
    stream.Struct(out.Base)
    stream.UInt32LE(out.UiOffset)
    stream.UInt32LE(out.UiSize)
    return
}
func (stream *InputStream) StructSimpleCommunity() (in SimpleCommunity) {
    in.Base = stream.Struct("Structure").(Structure)
    in.GatheringID = stream.UInt32LE()
    in.MatchmakeSessionCount = stream.UInt32LE()
    return
}
func (stream *OutputStream) StructSimpleCommunity(out SimpleCommunity) {
    stream.Struct(out.Base)
    stream.UInt32LE(out.GatheringID)
    stream.UInt32LE(out.MatchmakeSessionCount)
    return
}
func (stream *InputStream) StructSimplePlayingSession() (in SimplePlayingSession) {
    in.Base = stream.Struct("Structure").(Structure)
    in.PrincipalID = PID(stream.UInt32LE())
    in.GatheringID = stream.UInt32LE()
    in.GameMode = stream.UInt32LE()
    in.Attribute_0 = stream.UInt32LE()
    return
}
func (stream *OutputStream) StructSimplePlayingSession(out SimplePlayingSession) {
    stream.Struct(out.Base)
    stream.UInt32LE(uint32(out.PrincipalID))
    stream.UInt32LE(out.GatheringID)
    stream.UInt32LE(out.GameMode)
    stream.UInt32LE(out.Attribute_0)
    return
}
func (stream *InputStream) StructStructure() (in Structure) {
    return
}
func (stream *OutputStream) StructStructure(out Structure) {
    return
}
func (stream *InputStream) StructUniqueIdInfo() (in UniqueIdInfo) {
    in.Base = stream.Struct("Structure").(Structure)
    in.NexUniqueId = stream.UInt64LE()
    in.NexUniqueIdPassword = stream.UInt64LE()
    return
}
func (stream *OutputStream) StructUniqueIdInfo(out UniqueIdInfo) {
    stream.Struct(out.Base)
    stream.UInt64LE(out.NexUniqueId)
    stream.UInt64LE(out.NexUniqueIdPassword)
    return
}
func (stream *InputStream) StructUpdateMatchmakeSessionParam() (in UpdateMatchmakeSessionParam) {
    in.Base = stream.Struct("Structure").(Structure)
    in.Gid = stream.UInt32LE()
    in.ModificationFlag = stream.UInt32LE()
    in.Attributes = stream.List("Uint32", func (innerStream *InputStream) uint32 { return innerStream.UInt32LE() }).([]uint32)
    in.OpenParticipation = stream.Bool()
    in.ApplicationBuffer = stream.Buffer()
    in.ProgressScore = stream.UInt8()
    in.MatchmakeParam = stream.Struct("MatchmakeParam").(MatchmakeParam)
    in.StartedTime = DateTime(stream.UInt64LE())
    in.UserPassword = string(stream.String())
    in.GameMode = stream.UInt32LE()
    in.Description = string(stream.String())
    in.MinParticipants = stream.UInt16LE()
    in.MaxParticipants = stream.UInt16LE()
    in.MatchmakeSystemType = stream.UInt32LE()
    in.ParticipationPolicy = stream.UInt32LE()
    in.PolicyArgument = stream.UInt32LE()
    in.Codeword = string(stream.String())
    return
}
func (stream *OutputStream) StructUpdateMatchmakeSessionParam(out UpdateMatchmakeSessionParam) {
    stream.Struct(out.Base)
    stream.UInt32LE(out.Gid)
    stream.UInt32LE(out.ModificationFlag)
    stream.List(func (innerStream *OutputStream, data uint32) { innerStream.UInt32LE(data) }, out.Attributes)
    stream.Bool(out.OpenParticipation)
    stream.Buffer(out.ApplicationBuffer)
    stream.UInt8(out.ProgressScore)
    stream.Struct(out.MatchmakeParam)
    stream.UInt64LE(uint64(out.StartedTime))
    stream.String(string(out.UserPassword))
    stream.UInt32LE(out.GameMode)
    stream.String(string(out.Description))
    stream.UInt16LE(out.MinParticipants)
    stream.UInt16LE(out.MaxParticipants)
    stream.UInt32LE(out.MatchmakeSystemType)
    stream.UInt32LE(out.ParticipationPolicy)
    stream.UInt32LE(out.PolicyArgument)
    stream.String(string(out.Codeword))
    return
}
func (stream *InputStream) StructUserMessage() (in UserMessage) {
    in.UiID = stream.UInt32LE()
    in.UiParentID = stream.UInt32LE()
    in.PidSender = PID(stream.UInt32LE())
    in.Receptiontime = DateTime(stream.UInt64LE())
    in.UiLifeTime = stream.UInt32LE()
    in.UiFlags = stream.UInt32LE()
    in.StrSubject = string(stream.String())
    in.StrSender = string(stream.String())
    in.MessageRecipient = stream.Struct("MessageRecipient").(MessageRecipient)
    return
}
func (stream *OutputStream) StructUserMessage(out UserMessage) {
    stream.UInt32LE(out.UiID)
    stream.UInt32LE(out.UiParentID)
    stream.UInt32LE(uint32(out.PidSender))
    stream.UInt64LE(uint64(out.Receptiontime))
    stream.UInt32LE(out.UiLifeTime)
    stream.UInt32LE(out.UiFlags)
    stream.String(string(out.StrSubject))
    stream.String(string(out.StrSender))
    stream.Struct(out.MessageRecipient)
    return
}
func (stream *InputStream) ListBasicAccountInfo(cb func(*InputStream)BasicAccountInfo) []BasicAccountInfo {
    list_len := int(stream.UInt32LE())
    list := make([]BasicAccountInfo, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = cb(stream)
	}
	return list
}
func (stream *OutputStream) ListBasicAccountInfo(cb func(*OutputStream,BasicAccountInfo)(), out []BasicAccountInfo) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		cb(stream, item)
	}
	return
}
func (stream *InputStream) ListBlacklistedPrincipal(cb func(*InputStream)BlacklistedPrincipal) []BlacklistedPrincipal {
    list_len := int(stream.UInt32LE())
    list := make([]BlacklistedPrincipal, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = cb(stream)
	}
	return list
}
func (stream *OutputStream) ListBlacklistedPrincipal(cb func(*OutputStream,BlacklistedPrincipal)(), out []BlacklistedPrincipal) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		cb(stream, item)
	}
	return
}
func (stream *InputStream) ListBuffer(cb func(*InputStream)Buffer) []Buffer {
    list_len := int(stream.UInt32LE())
    list := make([]Buffer, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = cb(stream)
	}
	return list
}
func (stream *OutputStream) ListBuffer(cb func(*OutputStream,Buffer)(), out []Buffer) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		cb(stream, item)
	}
	return
}
func (stream *InputStream) ListBufferQueueParam(cb func(*InputStream)BufferQueueParam) []BufferQueueParam {
    list_len := int(stream.UInt32LE())
    list := make([]BufferQueueParam, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = cb(stream)
	}
	return list
}
func (stream *OutputStream) ListBufferQueueParam(cb func(*OutputStream,BufferQueueParam)(), out []BufferQueueParam) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		cb(stream, item)
	}
	return
}
func (stream *InputStream) ListConnectionData(cb func(*InputStream)ConnectionData) []ConnectionData {
    list_len := int(stream.UInt32LE())
    list := make([]ConnectionData, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = cb(stream)
	}
	return list
}
func (stream *OutputStream) ListConnectionData(cb func(*OutputStream,ConnectionData)(), out []ConnectionData) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		cb(stream, item)
	}
	return
}
func (stream *InputStream) ListData(cb func(*InputStream)Data) []Data {
    list_len := int(stream.UInt32LE())
    list := make([]Data, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = cb(stream)
	}
	return list
}
func (stream *OutputStream) ListData(cb func(*OutputStream,Data)(), out []Data) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		cb(stream, item)
	}
	return
}
func (stream *InputStream) ListDeletionEntry(cb func(*InputStream)DeletionEntry) []DeletionEntry {
    list_len := int(stream.UInt32LE())
    list := make([]DeletionEntry, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = cb(stream)
	}
	return list
}
func (stream *OutputStream) ListDeletionEntry(cb func(*OutputStream,DeletionEntry)(), out []DeletionEntry) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		cb(stream, item)
	}
	return
}
func (stream *InputStream) ListDouble(cb func(*InputStream)float64) []float64 {
    list_len := int(stream.UInt32LE())
    list := make([]float64, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = cb(stream)
	}
	return list
}
func (stream *OutputStream) ListDouble(cb func(*OutputStream,float64)(), out []float64) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		cb(stream, item)
	}
	return
}
func (stream *InputStream) ListFindMatchmakeSessionByParticipantResult(cb func(*InputStream)FindMatchmakeSessionByParticipantResult) []FindMatchmakeSessionByParticipantResult {
    list_len := int(stream.UInt32LE())
    list := make([]FindMatchmakeSessionByParticipantResult, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = cb(stream)
	}
	return list
}
func (stream *OutputStream) ListFindMatchmakeSessionByParticipantResult(cb func(*OutputStream,FindMatchmakeSessionByParticipantResult)(), out []FindMatchmakeSessionByParticipantResult) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		cb(stream, item)
	}
	return
}
func (stream *InputStream) ListFloat(cb func(*InputStream)float32) []float32 {
    list_len := int(stream.UInt32LE())
    list := make([]float32, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = cb(stream)
	}
	return list
}
func (stream *OutputStream) ListFloat(cb func(*OutputStream,float32)(), out []float32) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		cb(stream, item)
	}
	return
}
func (stream *InputStream) ListFriendData(cb func(*InputStream)FriendData) []FriendData {
    list_len := int(stream.UInt32LE())
    list := make([]FriendData, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = cb(stream)
	}
	return list
}
func (stream *OutputStream) ListFriendData(cb func(*OutputStream,FriendData)(), out []FriendData) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		cb(stream, item)
	}
	return
}
func (stream *InputStream) ListFriendInfo(cb func(*InputStream)FriendInfo) []FriendInfo {
    list_len := int(stream.UInt32LE())
    list := make([]FriendInfo, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = cb(stream)
	}
	return list
}
func (stream *OutputStream) ListFriendInfo(cb func(*OutputStream,FriendInfo)(), out []FriendInfo) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		cb(stream, item)
	}
	return
}
func (stream *InputStream) ListFriendMii(cb func(*InputStream)FriendMii) []FriendMii {
    list_len := int(stream.UInt32LE())
    list := make([]FriendMii, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = cb(stream)
	}
	return list
}
func (stream *OutputStream) ListFriendMii(cb func(*OutputStream,FriendMii)(), out []FriendMii) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		cb(stream, item)
	}
	return
}
func (stream *InputStream) ListFriendMiiList(cb func(*InputStream)FriendMiiList) []FriendMiiList {
    list_len := int(stream.UInt32LE())
    list := make([]FriendMiiList, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = cb(stream)
	}
	return list
}
func (stream *OutputStream) ListFriendMiiList(cb func(*OutputStream,FriendMiiList)(), out []FriendMiiList) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		cb(stream, item)
	}
	return
}
func (stream *InputStream) ListFriendMiiRequest(cb func(*InputStream)FriendMiiRequest) []FriendMiiRequest {
    list_len := int(stream.UInt32LE())
    list := make([]FriendMiiRequest, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = cb(stream)
	}
	return list
}
func (stream *OutputStream) ListFriendMiiRequest(cb func(*OutputStream,FriendMiiRequest)(), out []FriendMiiRequest) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		cb(stream, item)
	}
	return
}
func (stream *InputStream) ListFriendPersistentInfo(cb func(*InputStream)FriendPersistentInfo) []FriendPersistentInfo {
    list_len := int(stream.UInt32LE())
    list := make([]FriendPersistentInfo, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = cb(stream)
	}
	return list
}
func (stream *OutputStream) ListFriendPersistentInfo(cb func(*OutputStream,FriendPersistentInfo)(), out []FriendPersistentInfo) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		cb(stream, item)
	}
	return
}
func (stream *InputStream) ListFriendPicture(cb func(*InputStream)FriendPicture) []FriendPicture {
    list_len := int(stream.UInt32LE())
    list := make([]FriendPicture, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = cb(stream)
	}
	return list
}
func (stream *OutputStream) ListFriendPicture(cb func(*OutputStream,FriendPicture)(), out []FriendPicture) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		cb(stream, item)
	}
	return
}
func (stream *InputStream) ListFriendPresence(cb func(*InputStream)FriendPresence) []FriendPresence {
    list_len := int(stream.UInt32LE())
    list := make([]FriendPresence, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = cb(stream)
	}
	return list
}
func (stream *OutputStream) ListFriendPresence(cb func(*OutputStream,FriendPresence)(), out []FriendPresence) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		cb(stream, item)
	}
	return
}
func (stream *InputStream) ListFriendRelationship(cb func(*InputStream)FriendRelationship) []FriendRelationship {
    list_len := int(stream.UInt32LE())
    list := make([]FriendRelationship, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = cb(stream)
	}
	return list
}
func (stream *OutputStream) ListFriendRelationship(cb func(*OutputStream,FriendRelationship)(), out []FriendRelationship) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		cb(stream, item)
	}
	return
}
func (stream *InputStream) ListFriendRequest(cb func(*InputStream)FriendRequest) []FriendRequest {
    list_len := int(stream.UInt32LE())
    list := make([]FriendRequest, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = cb(stream)
	}
	return list
}
func (stream *OutputStream) ListFriendRequest(cb func(*OutputStream,FriendRequest)(), out []FriendRequest) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		cb(stream, item)
	}
	return
}
func (stream *InputStream) ListGatheringStats(cb func(*InputStream)GatheringStats) []GatheringStats {
    list_len := int(stream.UInt32LE())
    list := make([]GatheringStats, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = cb(stream)
	}
	return list
}
func (stream *OutputStream) ListGatheringStats(cb func(*OutputStream,GatheringStats)(), out []GatheringStats) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		cb(stream, item)
	}
	return
}
func (stream *InputStream) ListGatheringURLs(cb func(*InputStream)GatheringURLs) []GatheringURLs {
    list_len := int(stream.UInt32LE())
    list := make([]GatheringURLs, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = cb(stream)
	}
	return list
}
func (stream *OutputStream) ListGatheringURLs(cb func(*OutputStream,GatheringURLs)(), out []GatheringURLs) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		cb(stream, item)
	}
	return
}
func (stream *InputStream) ListInvitation(cb func(*InputStream)Invitation) []Invitation {
    list_len := int(stream.UInt32LE())
    list := make([]Invitation, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = cb(stream)
	}
	return list
}
func (stream *OutputStream) ListInvitation(cb func(*OutputStream,Invitation)(), out []Invitation) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		cb(stream, item)
	}
	return
}
func (stream *InputStream) ListList_DataStoreRatingInfoWithSlot_(cb func(*InputStream)[]DataStoreRatingInfoWithSlot) [][]DataStoreRatingInfoWithSlot {
    list_len := int(stream.UInt32LE())
    list := make([][]DataStoreRatingInfoWithSlot, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = cb(stream)
	}
	return list
}
func (stream *OutputStream) ListList_DataStoreRatingInfoWithSlot_(cb func(*OutputStream,[]DataStoreRatingInfoWithSlot)(), out [][]DataStoreRatingInfoWithSlot) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		cb(stream, item)
	}
	return
}
func (stream *InputStream) ListList_qBuffer_(cb func(*InputStream)[]QBuffer) [][]QBuffer {
    list_len := int(stream.UInt32LE())
    list := make([][]QBuffer, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = cb(stream)
	}
	return list
}
func (stream *OutputStream) ListList_qBuffer_(cb func(*OutputStream,[]QBuffer)(), out [][]QBuffer) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		cb(stream, item)
	}
	return
}
func (stream *InputStream) ListMatchmakeSession(cb func(*InputStream)MatchmakeSession) []MatchmakeSession {
    list_len := int(stream.UInt32LE())
    list := make([]MatchmakeSession, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = cb(stream)
	}
	return list
}
func (stream *OutputStream) ListMatchmakeSession(cb func(*OutputStream,MatchmakeSession)(), out []MatchmakeSession) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		cb(stream, item)
	}
	return
}
func (stream *InputStream) ListMatchmakeSessionSearchCriteria(cb func(*InputStream)MatchmakeSessionSearchCriteria) []MatchmakeSessionSearchCriteria {
    list_len := int(stream.UInt32LE())
    list := make([]MatchmakeSessionSearchCriteria, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = cb(stream)
	}
	return list
}
func (stream *OutputStream) ListMatchmakeSessionSearchCriteria(cb func(*OutputStream,MatchmakeSessionSearchCriteria)(), out []MatchmakeSessionSearchCriteria) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		cb(stream, item)
	}
	return
}
func (stream *InputStream) ListNotificationEvent(cb func(*InputStream)NotificationEvent) []NotificationEvent {
    list_len := int(stream.UInt32LE())
    list := make([]NotificationEvent, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = cb(stream)
	}
	return list
}
func (stream *OutputStream) ListNotificationEvent(cb func(*OutputStream,NotificationEvent)(), out []NotificationEvent) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		cb(stream, item)
	}
	return
}
func (stream *InputStream) ListPID(cb func(*InputStream)PID) []PID {
    list_len := int(stream.UInt32LE())
    list := make([]PID, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = cb(stream)
	}
	return list
}
func (stream *OutputStream) ListPID(cb func(*OutputStream,PID)(), out []PID) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		cb(stream, item)
	}
	return
}
func (stream *InputStream) ListParticipantDetails(cb func(*InputStream)ParticipantDetails) []ParticipantDetails {
    list_len := int(stream.UInt32LE())
    list := make([]ParticipantDetails, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = cb(stream)
	}
	return list
}
func (stream *OutputStream) ListParticipantDetails(cb func(*OutputStream,ParticipantDetails)(), out []ParticipantDetails) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		cb(stream, item)
	}
	return
}
func (stream *InputStream) ListPersistentGathering(cb func(*InputStream)PersistentGathering) []PersistentGathering {
    list_len := int(stream.UInt32LE())
    list := make([]PersistentGathering, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = cb(stream)
	}
	return list
}
func (stream *OutputStream) ListPersistentGathering(cb func(*OutputStream,PersistentGathering)(), out []PersistentGathering) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		cb(stream, item)
	}
	return
}
func (stream *InputStream) ListPersistentNotification(cb func(*InputStream)PersistentNotification) []PersistentNotification {
    list_len := int(stream.UInt32LE())
    list := make([]PersistentNotification, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = cb(stream)
	}
	return list
}
func (stream *OutputStream) ListPersistentNotification(cb func(*OutputStream,PersistentNotification)(), out []PersistentNotification) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		cb(stream, item)
	}
	return
}
func (stream *InputStream) ListPlayedGame(cb func(*InputStream)PlayedGame) []PlayedGame {
    list_len := int(stream.UInt32LE())
    list := make([]PlayedGame, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = cb(stream)
	}
	return list
}
func (stream *OutputStream) ListPlayedGame(cb func(*OutputStream,PlayedGame)(), out []PlayedGame) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		cb(stream, item)
	}
	return
}
func (stream *InputStream) ListPlayingSession(cb func(*InputStream)PlayingSession) []PlayingSession {
    list_len := int(stream.UInt32LE())
    list := make([]PlayingSession, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = cb(stream)
	}
	return list
}
func (stream *OutputStream) ListPlayingSession(cb func(*OutputStream,PlayingSession)(), out []PlayingSession) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		cb(stream, item)
	}
	return
}
func (stream *InputStream) ListPrincipalBasicInfo(cb func(*InputStream)PrincipalBasicInfo) []PrincipalBasicInfo {
    list_len := int(stream.UInt32LE())
    list := make([]PrincipalBasicInfo, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = cb(stream)
	}
	return list
}
func (stream *OutputStream) ListPrincipalBasicInfo(cb func(*OutputStream,PrincipalBasicInfo)(), out []PrincipalBasicInfo) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		cb(stream, item)
	}
	return
}
func (stream *InputStream) ListPrincipalRequestBlockSetting(cb func(*InputStream)PrincipalRequestBlockSetting) []PrincipalRequestBlockSetting {
    list_len := int(stream.UInt32LE())
    list := make([]PrincipalRequestBlockSetting, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = cb(stream)
	}
	return list
}
func (stream *OutputStream) ListPrincipalRequestBlockSetting(cb func(*OutputStream,PrincipalRequestBlockSetting)(), out []PrincipalRequestBlockSetting) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		cb(stream, item)
	}
	return
}
func (stream *InputStream) ListRankingCachedResult(cb func(*InputStream)RankingCachedResult) []RankingCachedResult {
    list_len := int(stream.UInt32LE())
    list := make([]RankingCachedResult, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = cb(stream)
	}
	return list
}
func (stream *OutputStream) ListRankingCachedResult(cb func(*OutputStream,RankingCachedResult)(), out []RankingCachedResult) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		cb(stream, item)
	}
	return
}
func (stream *InputStream) ListRankingOrderParam(cb func(*InputStream)RankingOrderParam) []RankingOrderParam {
    list_len := int(stream.UInt32LE())
    list := make([]RankingOrderParam, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = cb(stream)
	}
	return list
}
func (stream *OutputStream) ListRankingOrderParam(cb func(*OutputStream,RankingOrderParam)(), out []RankingOrderParam) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		cb(stream, item)
	}
	return
}
func (stream *InputStream) ListRankingRankData(cb func(*InputStream)RankingRankData) []RankingRankData {
    list_len := int(stream.UInt32LE())
    list := make([]RankingRankData, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = cb(stream)
	}
	return list
}
func (stream *OutputStream) ListRankingRankData(cb func(*OutputStream,RankingRankData)(), out []RankingRankData) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		cb(stream, item)
	}
	return
}
func (stream *InputStream) ListRelationshipData(cb func(*InputStream)RelationshipData) []RelationshipData {
    list_len := int(stream.UInt32LE())
    list := make([]RelationshipData, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = cb(stream)
	}
	return list
}
func (stream *OutputStream) ListRelationshipData(cb func(*OutputStream,RelationshipData)(), out []RelationshipData) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		cb(stream, item)
	}
	return
}
func (stream *InputStream) ListResult(cb func(*InputStream)Result) []Result {
    list_len := int(stream.UInt32LE())
    list := make([]Result, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = cb(stream)
	}
	return list
}
func (stream *OutputStream) ListResult(cb func(*OutputStream,Result)(), out []Result) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		cb(stream, item)
	}
	return
}
func (stream *InputStream) ListSimpleCommunity(cb func(*InputStream)SimpleCommunity) []SimpleCommunity {
    list_len := int(stream.UInt32LE())
    list := make([]SimpleCommunity, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = cb(stream)
	}
	return list
}
func (stream *OutputStream) ListSimpleCommunity(cb func(*OutputStream,SimpleCommunity)(), out []SimpleCommunity) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		cb(stream, item)
	}
	return
}
func (stream *InputStream) ListSimplePlayingSession(cb func(*InputStream)SimplePlayingSession) []SimplePlayingSession {
    list_len := int(stream.UInt32LE())
    list := make([]SimplePlayingSession, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = cb(stream)
	}
	return list
}
func (stream *OutputStream) ListSimplePlayingSession(cb func(*OutputStream,SimplePlayingSession)(), out []SimplePlayingSession) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		cb(stream, item)
	}
	return
}
func (stream *InputStream) ListStationURL(cb func(*InputStream)StationURL) []StationURL {
    list_len := int(stream.UInt32LE())
    list := make([]StationURL, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = cb(stream)
	}
	return list
}
func (stream *OutputStream) ListStationURL(cb func(*OutputStream,StationURL)(), out []StationURL) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		cb(stream, item)
	}
	return
}
func (stream *InputStream) ListString(cb func(*InputStream)string) []string {
    list_len := int(stream.UInt32LE())
    list := make([]string, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = cb(stream)
	}
	return list
}
func (stream *OutputStream) ListString(cb func(*OutputStream,string)(), out []string) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		cb(stream, item)
	}
	return
}
func (stream *InputStream) ListUint16(cb func(*InputStream)uint16) []uint16 {
    list_len := int(stream.UInt32LE())
    list := make([]uint16, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = cb(stream)
	}
	return list
}
func (stream *OutputStream) ListUint16(cb func(*OutputStream,uint16)(), out []uint16) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		cb(stream, item)
	}
	return
}
func (stream *InputStream) ListUint32(cb func(*InputStream)uint32) []uint32 {
    list_len := int(stream.UInt32LE())
    list := make([]uint32, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = cb(stream)
	}
	return list
}
func (stream *OutputStream) ListUint32(cb func(*OutputStream,uint32)(), out []uint32) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		cb(stream, item)
	}
	return
}
func (stream *InputStream) ListUint64(cb func(*InputStream)uint64) []uint64 {
    list_len := int(stream.UInt32LE())
    list := make([]uint64, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = cb(stream)
	}
	return list
}
func (stream *OutputStream) ListUint64(cb func(*OutputStream,uint64)(), out []uint64) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		cb(stream, item)
	}
	return
}
func (stream *InputStream) ListUint8(cb func(*InputStream)uint8) []uint8 {
    list_len := int(stream.UInt32LE())
    list := make([]uint8, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = cb(stream)
	}
	return list
}
func (stream *OutputStream) ListUint8(cb func(*OutputStream,uint8)(), out []uint8) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		cb(stream, item)
	}
	return
}
func (stream *InputStream) ListUniqueIdInfo(cb func(*InputStream)UniqueIdInfo) []UniqueIdInfo {
    list_len := int(stream.UInt32LE())
    list := make([]UniqueIdInfo, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = cb(stream)
	}
	return list
}
func (stream *OutputStream) ListUniqueIdInfo(cb func(*OutputStream,UniqueIdInfo)(), out []UniqueIdInfo) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		cb(stream, item)
	}
	return
}
func (stream *InputStream) ListUserMessage(cb func(*InputStream)UserMessage) []UserMessage {
    list_len := int(stream.UInt32LE())
    list := make([]UserMessage, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = cb(stream)
	}
	return list
}
func (stream *OutputStream) ListUserMessage(cb func(*OutputStream,UserMessage)(), out []UserMessage) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		cb(stream, item)
	}
	return
}
func (stream *InputStream) ListqBuffer(cb func(*InputStream)QBuffer) []QBuffer {
    list_len := int(stream.UInt32LE())
    list := make([]QBuffer, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = cb(stream)
	}
	return list
}
func (stream *OutputStream) ListqBuffer(cb func(*OutputStream,QBuffer)(), out []QBuffer) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		cb(stream, item)
	}
	return
}
func (stream *InputStream) MapSint8_DataStoreRatingInfo(cb func(*InputStream)(int8,DataStoreRatingInfo)) map[int8]DataStoreRatingInfo {
    map_len := int(stream.UInt32LE())
    m := make(map[int8]DataStoreRatingInfo)
    for i := 0; i < map_len; i++ {
		key, value := cb(stream)
		m[key] = value
	}
	return m
}
func (stream *OutputStream) MapSint8_DataStoreRatingInfo(cb func(*OutputStream,int8,DataStoreRatingInfo)(), out map[int8]DataStoreRatingInfo) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for key, value := range out {
		cb(stream, key, value)
	}
	return
}
func (stream *InputStream) MapSint8_List_qBuffer_(cb func(*InputStream)(int8,[]QBuffer)) map[int8][]QBuffer {
    map_len := int(stream.UInt32LE())
    m := make(map[int8][]QBuffer)
    for i := 0; i < map_len; i++ {
		key, value := cb(stream)
		m[key] = value
	}
	return m
}
func (stream *OutputStream) MapSint8_List_qBuffer_(cb func(*OutputStream,int8,[]QBuffer)(), out map[int8][]QBuffer) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for key, value := range out {
		cb(stream, key, value)
	}
	return
}
func (stream *InputStream) MapString_Variant(cb func(*InputStream)(string,Variant)) map[string]Variant {
    map_len := int(stream.UInt32LE())
    m := make(map[string]Variant)
    for i := 0; i < map_len; i++ {
		key, value := cb(stream)
		m[key] = value
	}
	return m
}
func (stream *OutputStream) MapString_Variant(cb func(*OutputStream,string,Variant)(), out map[string]Variant) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for key, value := range out {
		cb(stream, key, value)
	}
	return
}
func (stream *InputStream) MapUint16_Sint32(cb func(*InputStream)(uint16,int32)) map[uint16]int32 {
    map_len := int(stream.UInt32LE())
    m := make(map[uint16]int32)
    for i := 0; i < map_len; i++ {
		key, value := cb(stream)
		m[key] = value
	}
	return m
}
func (stream *OutputStream) MapUint16_Sint32(cb func(*OutputStream,uint16,int32)(), out map[uint16]int32) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for key, value := range out {
		cb(stream, key, value)
	}
	return
}
func (stream *InputStream) MapUint16_String(cb func(*InputStream)(uint16,string)) map[uint16]string {
    map_len := int(stream.UInt32LE())
    m := make(map[uint16]string)
    for i := 0; i < map_len; i++ {
		key, value := cb(stream)
		m[key] = value
	}
	return m
}
func (stream *OutputStream) MapUint16_String(cb func(*OutputStream,uint16,string)(), out map[uint16]string) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for key, value := range out {
		cb(stream, key, value)
	}
	return
}
