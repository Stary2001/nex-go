// This file is autogenerated.
// I apologise in advance.
package nex
import "fmt"
import "reflect"
func (stream *InputStream) Struct(typeName string) interface{} {
	switch typeName {
    case "AccountData":
        return stream.Struct_AccountData()
    case "AutoMatchmakeParam":
        return stream.Struct_AutoMatchmakeParam()
    case "BasicAccountInfo":
        return stream.Struct_BasicAccountInfo()
    case "BlacklistedPrincipal":
        return stream.Struct_BlacklistedPrincipal()
    case "BufferQueueParam":
        return stream.Struct_BufferQueueParam()
    case "Comment":
        return stream.Struct_Comment()
    case "ConnectionData":
        return stream.Struct_ConnectionData()
    case "CreateMatchmakeSessionParam":
        return stream.Struct_CreateMatchmakeSessionParam()
    case "Data":
        return stream.Struct_Data()
    case "DataStoreChangeMetaCompareParam":
        return stream.Struct_DataStoreChangeMetaCompareParam()
    case "DataStoreChangeMetaParam":
        return stream.Struct_DataStoreChangeMetaParam()
    case "DataStoreChangeMetaParamV1":
        return stream.Struct_DataStoreChangeMetaParamV1()
    case "DataStoreCompletePostParam":
        return stream.Struct_DataStoreCompletePostParam()
    case "DataStoreCompletePostParamV1":
        return stream.Struct_DataStoreCompletePostParamV1()
    case "DataStoreCompleteUpdateParam":
        return stream.Struct_DataStoreCompleteUpdateParam()
    case "DataStoreDeleteParam":
        return stream.Struct_DataStoreDeleteParam()
    case "DataStoreFetchMyInfosAchievementResult":
        return stream.Struct_DataStoreFetchMyInfosAchievementResult()
    case "DataStoreFetchMyInfosBalloonResult":
        return stream.Struct_DataStoreFetchMyInfosBalloonResult()
    case "DataStoreFetchMyInfosParam":
        return stream.Struct_DataStoreFetchMyInfosParam()
    case "DataStoreFetchMyInfosResult":
        return stream.Struct_DataStoreFetchMyInfosResult()
    case "DataStoreGetMetaParam":
        return stream.Struct_DataStoreGetMetaParam()
    case "DataStoreGetNewArrivedNotificationsParam":
        return stream.Struct_DataStoreGetNewArrivedNotificationsParam()
    case "DataStoreGetNotificationUrlParam":
        return stream.Struct_DataStoreGetNotificationUrlParam()
    case "DataStoreGetSpecificMetaParam":
        return stream.Struct_DataStoreGetSpecificMetaParam()
    case "DataStoreGetSpecificMetaParamV1":
        return stream.Struct_DataStoreGetSpecificMetaParamV1()
    case "DataStoreKeyValue":
        return stream.Struct_DataStoreKeyValue()
    case "DataStoreMetaInfo":
        return stream.Struct_DataStoreMetaInfo()
    case "DataStoreNotification":
        return stream.Struct_DataStoreNotification()
    case "DataStoreNotificationV1":
        return stream.Struct_DataStoreNotificationV1()
    case "DataStorePasswordInfo":
        return stream.Struct_DataStorePasswordInfo()
    case "DataStorePermission":
        return stream.Struct_DataStorePermission()
    case "DataStorePersistenceInfo":
        return stream.Struct_DataStorePersistenceInfo()
    case "DataStorePersistenceInitParam":
        return stream.Struct_DataStorePersistenceInitParam()
    case "DataStorePersistenceTarget":
        return stream.Struct_DataStorePersistenceTarget()
    case "DataStorePrepareGetParam":
        return stream.Struct_DataStorePrepareGetParam()
    case "DataStorePrepareGetParamV1":
        return stream.Struct_DataStorePrepareGetParamV1()
    case "DataStorePreparePostParam":
        return stream.Struct_DataStorePreparePostParam()
    case "DataStorePreparePostParamV1":
        return stream.Struct_DataStorePreparePostParamV1()
    case "DataStorePrepareUpdateParam":
        return stream.Struct_DataStorePrepareUpdateParam()
    case "DataStoreRateObjectParam":
        return stream.Struct_DataStoreRateObjectParam()
    case "DataStoreRatingInfo":
        return stream.Struct_DataStoreRatingInfo()
    case "DataStoreRatingInfoWithSlot":
        return stream.Struct_DataStoreRatingInfoWithSlot()
    case "DataStoreRatingInitParam":
        return stream.Struct_DataStoreRatingInitParam()
    case "DataStoreRatingInitParamWithSlot":
        return stream.Struct_DataStoreRatingInitParamWithSlot()
    case "DataStoreRatingLog":
        return stream.Struct_DataStoreRatingLog()
    case "DataStoreRatingTarget":
        return stream.Struct_DataStoreRatingTarget()
    case "DataStoreReqGetAdditionalMeta":
        return stream.Struct_DataStoreReqGetAdditionalMeta()
    case "DataStoreReqGetInfo":
        return stream.Struct_DataStoreReqGetInfo()
    case "DataStoreReqGetInfoV1":
        return stream.Struct_DataStoreReqGetInfoV1()
    case "DataStoreReqGetNotificationUrlInfo":
        return stream.Struct_DataStoreReqGetNotificationUrlInfo()
    case "DataStoreReqPostInfo":
        return stream.Struct_DataStoreReqPostInfo()
    case "DataStoreReqPostInfoV1":
        return stream.Struct_DataStoreReqPostInfoV1()
    case "DataStoreReqUpdateInfo":
        return stream.Struct_DataStoreReqUpdateInfo()
    case "DataStoreSearchBalloonParam":
        return stream.Struct_DataStoreSearchBalloonParam()
    case "DataStoreSearchBalloonResult":
        return stream.Struct_DataStoreSearchBalloonResult()
    case "DataStoreSearchBalloonResultSet":
        return stream.Struct_DataStoreSearchBalloonResultSet()
    case "DataStoreSearchParam":
        return stream.Struct_DataStoreSearchParam()
    case "DataStoreSearchResult":
        return stream.Struct_DataStoreSearchResult()
    case "DataStoreSpecificMetaInfo":
        return stream.Struct_DataStoreSpecificMetaInfo()
    case "DataStoreSpecificMetaInfoV1":
        return stream.Struct_DataStoreSpecificMetaInfoV1()
    case "DataStoreTouchObjectParam":
        return stream.Struct_DataStoreTouchObjectParam()
    case "DeletionEntry":
        return stream.Struct_DeletionEntry()
    case "FindMatchmakeSessionByParticipantParam":
        return stream.Struct_FindMatchmakeSessionByParticipantParam()
    case "FindMatchmakeSessionByParticipantResult":
        return stream.Struct_FindMatchmakeSessionByParticipantResult()
    case "FriendData":
        return stream.Struct_FriendData()
    case "FriendInfo":
        return stream.Struct_FriendInfo()
    case "FriendMii":
        return stream.Struct_FriendMii()
    case "FriendMiiList":
        return stream.Struct_FriendMiiList()
    case "FriendMiiRequest":
        return stream.Struct_FriendMiiRequest()
    case "FriendPersistentInfo":
        return stream.Struct_FriendPersistentInfo()
    case "FriendPicture":
        return stream.Struct_FriendPicture()
    case "FriendPresence":
        return stream.Struct_FriendPresence()
    case "FriendRelationship":
        return stream.Struct_FriendRelationship()
    case "FriendRequest":
        return stream.Struct_FriendRequest()
    case "FriendRequestMessage":
        return stream.Struct_FriendRequestMessage()
    case "GameKey":
        return stream.Struct_GameKey()
    case "Gathering":
        return stream.Struct_Gathering()
    case "GatheringStats":
        return stream.Struct_GatheringStats()
    case "GatheringURLs":
        return stream.Struct_GatheringURLs()
    case "Invitation":
        return stream.Struct_Invitation()
    case "JoinMatchmakeSessionParam":
        return stream.Struct_JoinMatchmakeSessionParam()
    case "MatchmakeBlockListParam":
        return stream.Struct_MatchmakeBlockListParam()
    case "MatchmakeParam":
        return stream.Struct_MatchmakeParam()
    case "MatchmakeSession":
        return stream.Struct_MatchmakeSession()
    case "MatchmakeSessionSearchCriteria":
        return stream.Struct_MatchmakeSessionSearchCriteria()
    case "MessageRecipient":
        return stream.Struct_MessageRecipient()
    case "Mii":
        return stream.Struct_Mii()
    case "MiiList":
        return stream.Struct_MiiList()
    case "MiiV2":
        return stream.Struct_MiiV2()
    case "MyProfile":
        return stream.Struct_MyProfile()
    case "NNAInfo":
        return stream.Struct_NNAInfo()
    case "NintendoNotificationEvent":
        return stream.Struct_NintendoNotificationEvent()
    case "NintendoNotificationEventGeneral":
        return stream.Struct_NintendoNotificationEventGeneral()
    case "NintendoNotificationEventProfile":
        return stream.Struct_NintendoNotificationEventProfile()
    case "NintendoPresence":
        return stream.Struct_NintendoPresence()
    case "NintendoPresenceV2":
        return stream.Struct_NintendoPresenceV2()
    case "NotificationEvent":
        return stream.Struct_NotificationEvent()
    case "ParticipantDetails":
        return stream.Struct_ParticipantDetails()
    case "PersistentGathering":
        return stream.Struct_PersistentGathering()
    case "PersistentNotification":
        return stream.Struct_PersistentNotification()
    case "PlayedGame":
        return stream.Struct_PlayedGame()
    case "PlayingSession":
        return stream.Struct_PlayingSession()
    case "PrincipalBasicInfo":
        return stream.Struct_PrincipalBasicInfo()
    case "PrincipalPreference":
        return stream.Struct_PrincipalPreference()
    case "PrincipalRequestBlockSetting":
        return stream.Struct_PrincipalRequestBlockSetting()
    case "RVConnectionData":
        return stream.Struct_RVConnectionData()
    case "RankingCachedResult":
        return stream.Struct_RankingCachedResult()
    case "RankingChangeAttributesParam":
        return stream.Struct_RankingChangeAttributesParam()
    case "RankingOrderParam":
        return stream.Struct_RankingOrderParam()
    case "RankingRankData":
        return stream.Struct_RankingRankData()
    case "RankingResult":
        return stream.Struct_RankingResult()
    case "RankingScoreData":
        return stream.Struct_RankingScoreData()
    case "RankingStats":
        return stream.Struct_RankingStats()
    case "RelationshipData":
        return stream.Struct_RelationshipData()
    case "ResultRange":
        return stream.Struct_ResultRange()
    case "SimpleCommunity":
        return stream.Struct_SimpleCommunity()
    case "SimplePlayingSession":
        return stream.Struct_SimplePlayingSession()
    case "Structure":
        return stream.Struct_Structure()
    case "UniqueIdInfo":
        return stream.Struct_UniqueIdInfo()
    case "UpdateMatchmakeSessionParam":
        return stream.Struct_UpdateMatchmakeSessionParam()
    case "UserMessage":
        return stream.Struct_UserMessage()

	default:
		fmt.Println("struct: invalid type", typeName)
		return nil
	}
}
func (stream *OutputStream) Struct(out interface{}) {
	switch out.(type) {
    case AccountData:
        stream.Struct_AccountData(out.(AccountData))
    case AutoMatchmakeParam:
        stream.Struct_AutoMatchmakeParam(out.(AutoMatchmakeParam))
    case BasicAccountInfo:
        stream.Struct_BasicAccountInfo(out.(BasicAccountInfo))
    case BlacklistedPrincipal:
        stream.Struct_BlacklistedPrincipal(out.(BlacklistedPrincipal))
    case BufferQueueParam:
        stream.Struct_BufferQueueParam(out.(BufferQueueParam))
    case Comment:
        stream.Struct_Comment(out.(Comment))
    case ConnectionData:
        stream.Struct_ConnectionData(out.(ConnectionData))
    case CreateMatchmakeSessionParam:
        stream.Struct_CreateMatchmakeSessionParam(out.(CreateMatchmakeSessionParam))
    case Data:
        stream.Struct_Data(out.(Data))
    case DataStoreChangeMetaCompareParam:
        stream.Struct_DataStoreChangeMetaCompareParam(out.(DataStoreChangeMetaCompareParam))
    case DataStoreChangeMetaParam:
        stream.Struct_DataStoreChangeMetaParam(out.(DataStoreChangeMetaParam))
    case DataStoreChangeMetaParamV1:
        stream.Struct_DataStoreChangeMetaParamV1(out.(DataStoreChangeMetaParamV1))
    case DataStoreCompletePostParam:
        stream.Struct_DataStoreCompletePostParam(out.(DataStoreCompletePostParam))
    case DataStoreCompletePostParamV1:
        stream.Struct_DataStoreCompletePostParamV1(out.(DataStoreCompletePostParamV1))
    case DataStoreCompleteUpdateParam:
        stream.Struct_DataStoreCompleteUpdateParam(out.(DataStoreCompleteUpdateParam))
    case DataStoreDeleteParam:
        stream.Struct_DataStoreDeleteParam(out.(DataStoreDeleteParam))
    case DataStoreFetchMyInfosAchievementResult:
        stream.Struct_DataStoreFetchMyInfosAchievementResult(out.(DataStoreFetchMyInfosAchievementResult))
    case DataStoreFetchMyInfosBalloonResult:
        stream.Struct_DataStoreFetchMyInfosBalloonResult(out.(DataStoreFetchMyInfosBalloonResult))
    case DataStoreFetchMyInfosParam:
        stream.Struct_DataStoreFetchMyInfosParam(out.(DataStoreFetchMyInfosParam))
    case DataStoreFetchMyInfosResult:
        stream.Struct_DataStoreFetchMyInfosResult(out.(DataStoreFetchMyInfosResult))
    case DataStoreGetMetaParam:
        stream.Struct_DataStoreGetMetaParam(out.(DataStoreGetMetaParam))
    case DataStoreGetNewArrivedNotificationsParam:
        stream.Struct_DataStoreGetNewArrivedNotificationsParam(out.(DataStoreGetNewArrivedNotificationsParam))
    case DataStoreGetNotificationUrlParam:
        stream.Struct_DataStoreGetNotificationUrlParam(out.(DataStoreGetNotificationUrlParam))
    case DataStoreGetSpecificMetaParam:
        stream.Struct_DataStoreGetSpecificMetaParam(out.(DataStoreGetSpecificMetaParam))
    case DataStoreGetSpecificMetaParamV1:
        stream.Struct_DataStoreGetSpecificMetaParamV1(out.(DataStoreGetSpecificMetaParamV1))
    case DataStoreKeyValue:
        stream.Struct_DataStoreKeyValue(out.(DataStoreKeyValue))
    case DataStoreMetaInfo:
        stream.Struct_DataStoreMetaInfo(out.(DataStoreMetaInfo))
    case DataStoreNotification:
        stream.Struct_DataStoreNotification(out.(DataStoreNotification))
    case DataStoreNotificationV1:
        stream.Struct_DataStoreNotificationV1(out.(DataStoreNotificationV1))
    case DataStorePasswordInfo:
        stream.Struct_DataStorePasswordInfo(out.(DataStorePasswordInfo))
    case DataStorePermission:
        stream.Struct_DataStorePermission(out.(DataStorePermission))
    case DataStorePersistenceInfo:
        stream.Struct_DataStorePersistenceInfo(out.(DataStorePersistenceInfo))
    case DataStorePersistenceInitParam:
        stream.Struct_DataStorePersistenceInitParam(out.(DataStorePersistenceInitParam))
    case DataStorePersistenceTarget:
        stream.Struct_DataStorePersistenceTarget(out.(DataStorePersistenceTarget))
    case DataStorePrepareGetParam:
        stream.Struct_DataStorePrepareGetParam(out.(DataStorePrepareGetParam))
    case DataStorePrepareGetParamV1:
        stream.Struct_DataStorePrepareGetParamV1(out.(DataStorePrepareGetParamV1))
    case DataStorePreparePostParam:
        stream.Struct_DataStorePreparePostParam(out.(DataStorePreparePostParam))
    case DataStorePreparePostParamV1:
        stream.Struct_DataStorePreparePostParamV1(out.(DataStorePreparePostParamV1))
    case DataStorePrepareUpdateParam:
        stream.Struct_DataStorePrepareUpdateParam(out.(DataStorePrepareUpdateParam))
    case DataStoreRateObjectParam:
        stream.Struct_DataStoreRateObjectParam(out.(DataStoreRateObjectParam))
    case DataStoreRatingInfo:
        stream.Struct_DataStoreRatingInfo(out.(DataStoreRatingInfo))
    case DataStoreRatingInfoWithSlot:
        stream.Struct_DataStoreRatingInfoWithSlot(out.(DataStoreRatingInfoWithSlot))
    case DataStoreRatingInitParam:
        stream.Struct_DataStoreRatingInitParam(out.(DataStoreRatingInitParam))
    case DataStoreRatingInitParamWithSlot:
        stream.Struct_DataStoreRatingInitParamWithSlot(out.(DataStoreRatingInitParamWithSlot))
    case DataStoreRatingLog:
        stream.Struct_DataStoreRatingLog(out.(DataStoreRatingLog))
    case DataStoreRatingTarget:
        stream.Struct_DataStoreRatingTarget(out.(DataStoreRatingTarget))
    case DataStoreReqGetAdditionalMeta:
        stream.Struct_DataStoreReqGetAdditionalMeta(out.(DataStoreReqGetAdditionalMeta))
    case DataStoreReqGetInfo:
        stream.Struct_DataStoreReqGetInfo(out.(DataStoreReqGetInfo))
    case DataStoreReqGetInfoV1:
        stream.Struct_DataStoreReqGetInfoV1(out.(DataStoreReqGetInfoV1))
    case DataStoreReqGetNotificationUrlInfo:
        stream.Struct_DataStoreReqGetNotificationUrlInfo(out.(DataStoreReqGetNotificationUrlInfo))
    case DataStoreReqPostInfo:
        stream.Struct_DataStoreReqPostInfo(out.(DataStoreReqPostInfo))
    case DataStoreReqPostInfoV1:
        stream.Struct_DataStoreReqPostInfoV1(out.(DataStoreReqPostInfoV1))
    case DataStoreReqUpdateInfo:
        stream.Struct_DataStoreReqUpdateInfo(out.(DataStoreReqUpdateInfo))
    case DataStoreSearchBalloonParam:
        stream.Struct_DataStoreSearchBalloonParam(out.(DataStoreSearchBalloonParam))
    case DataStoreSearchBalloonResult:
        stream.Struct_DataStoreSearchBalloonResult(out.(DataStoreSearchBalloonResult))
    case DataStoreSearchBalloonResultSet:
        stream.Struct_DataStoreSearchBalloonResultSet(out.(DataStoreSearchBalloonResultSet))
    case DataStoreSearchParam:
        stream.Struct_DataStoreSearchParam(out.(DataStoreSearchParam))
    case DataStoreSearchResult:
        stream.Struct_DataStoreSearchResult(out.(DataStoreSearchResult))
    case DataStoreSpecificMetaInfo:
        stream.Struct_DataStoreSpecificMetaInfo(out.(DataStoreSpecificMetaInfo))
    case DataStoreSpecificMetaInfoV1:
        stream.Struct_DataStoreSpecificMetaInfoV1(out.(DataStoreSpecificMetaInfoV1))
    case DataStoreTouchObjectParam:
        stream.Struct_DataStoreTouchObjectParam(out.(DataStoreTouchObjectParam))
    case DeletionEntry:
        stream.Struct_DeletionEntry(out.(DeletionEntry))
    case FindMatchmakeSessionByParticipantParam:
        stream.Struct_FindMatchmakeSessionByParticipantParam(out.(FindMatchmakeSessionByParticipantParam))
    case FindMatchmakeSessionByParticipantResult:
        stream.Struct_FindMatchmakeSessionByParticipantResult(out.(FindMatchmakeSessionByParticipantResult))
    case FriendData:
        stream.Struct_FriendData(out.(FriendData))
    case FriendInfo:
        stream.Struct_FriendInfo(out.(FriendInfo))
    case FriendMii:
        stream.Struct_FriendMii(out.(FriendMii))
    case FriendMiiList:
        stream.Struct_FriendMiiList(out.(FriendMiiList))
    case FriendMiiRequest:
        stream.Struct_FriendMiiRequest(out.(FriendMiiRequest))
    case FriendPersistentInfo:
        stream.Struct_FriendPersistentInfo(out.(FriendPersistentInfo))
    case FriendPicture:
        stream.Struct_FriendPicture(out.(FriendPicture))
    case FriendPresence:
        stream.Struct_FriendPresence(out.(FriendPresence))
    case FriendRelationship:
        stream.Struct_FriendRelationship(out.(FriendRelationship))
    case FriendRequest:
        stream.Struct_FriendRequest(out.(FriendRequest))
    case FriendRequestMessage:
        stream.Struct_FriendRequestMessage(out.(FriendRequestMessage))
    case GameKey:
        stream.Struct_GameKey(out.(GameKey))
    case Gathering:
        stream.Struct_Gathering(out.(Gathering))
    case GatheringStats:
        stream.Struct_GatheringStats(out.(GatheringStats))
    case GatheringURLs:
        stream.Struct_GatheringURLs(out.(GatheringURLs))
    case Invitation:
        stream.Struct_Invitation(out.(Invitation))
    case JoinMatchmakeSessionParam:
        stream.Struct_JoinMatchmakeSessionParam(out.(JoinMatchmakeSessionParam))
    case MatchmakeBlockListParam:
        stream.Struct_MatchmakeBlockListParam(out.(MatchmakeBlockListParam))
    case MatchmakeParam:
        stream.Struct_MatchmakeParam(out.(MatchmakeParam))
    case MatchmakeSession:
        stream.Struct_MatchmakeSession(out.(MatchmakeSession))
    case MatchmakeSessionSearchCriteria:
        stream.Struct_MatchmakeSessionSearchCriteria(out.(MatchmakeSessionSearchCriteria))
    case MessageRecipient:
        stream.Struct_MessageRecipient(out.(MessageRecipient))
    case Mii:
        stream.Struct_Mii(out.(Mii))
    case MiiList:
        stream.Struct_MiiList(out.(MiiList))
    case MiiV2:
        stream.Struct_MiiV2(out.(MiiV2))
    case MyProfile:
        stream.Struct_MyProfile(out.(MyProfile))
    case NNAInfo:
        stream.Struct_NNAInfo(out.(NNAInfo))
    case NintendoNotificationEvent:
        stream.Struct_NintendoNotificationEvent(out.(NintendoNotificationEvent))
    case NintendoNotificationEventGeneral:
        stream.Struct_NintendoNotificationEventGeneral(out.(NintendoNotificationEventGeneral))
    case NintendoNotificationEventProfile:
        stream.Struct_NintendoNotificationEventProfile(out.(NintendoNotificationEventProfile))
    case NintendoPresence:
        stream.Struct_NintendoPresence(out.(NintendoPresence))
    case NintendoPresenceV2:
        stream.Struct_NintendoPresenceV2(out.(NintendoPresenceV2))
    case NotificationEvent:
        stream.Struct_NotificationEvent(out.(NotificationEvent))
    case ParticipantDetails:
        stream.Struct_ParticipantDetails(out.(ParticipantDetails))
    case PersistentGathering:
        stream.Struct_PersistentGathering(out.(PersistentGathering))
    case PersistentNotification:
        stream.Struct_PersistentNotification(out.(PersistentNotification))
    case PlayedGame:
        stream.Struct_PlayedGame(out.(PlayedGame))
    case PlayingSession:
        stream.Struct_PlayingSession(out.(PlayingSession))
    case PrincipalBasicInfo:
        stream.Struct_PrincipalBasicInfo(out.(PrincipalBasicInfo))
    case PrincipalPreference:
        stream.Struct_PrincipalPreference(out.(PrincipalPreference))
    case PrincipalRequestBlockSetting:
        stream.Struct_PrincipalRequestBlockSetting(out.(PrincipalRequestBlockSetting))
    case RVConnectionData:
        stream.Struct_RVConnectionData(out.(RVConnectionData))
    case RankingCachedResult:
        stream.Struct_RankingCachedResult(out.(RankingCachedResult))
    case RankingChangeAttributesParam:
        stream.Struct_RankingChangeAttributesParam(out.(RankingChangeAttributesParam))
    case RankingOrderParam:
        stream.Struct_RankingOrderParam(out.(RankingOrderParam))
    case RankingRankData:
        stream.Struct_RankingRankData(out.(RankingRankData))
    case RankingResult:
        stream.Struct_RankingResult(out.(RankingResult))
    case RankingScoreData:
        stream.Struct_RankingScoreData(out.(RankingScoreData))
    case RankingStats:
        stream.Struct_RankingStats(out.(RankingStats))
    case RelationshipData:
        stream.Struct_RelationshipData(out.(RelationshipData))
    case ResultRange:
        stream.Struct_ResultRange(out.(ResultRange))
    case SimpleCommunity:
        stream.Struct_SimpleCommunity(out.(SimpleCommunity))
    case SimplePlayingSession:
        stream.Struct_SimplePlayingSession(out.(SimplePlayingSession))
    case Structure:
        stream.Struct_Structure(out.(Structure))
    case UniqueIdInfo:
        stream.Struct_UniqueIdInfo(out.(UniqueIdInfo))
    case UpdateMatchmakeSessionParam:
        stream.Struct_UpdateMatchmakeSessionParam(out.(UpdateMatchmakeSessionParam))
    case UserMessage:
        stream.Struct_UserMessage(out.(UserMessage))

	default:
	fmt.Println("struct: invalid type", reflect.TypeOf(out))
	}
}
func (stream *InputStream) Struct_AccountData() (in AccountData) {
    in.Base = stream.Struct_Structure()
    in.Pid = PID(stream.UInt32LE())
    in.StrName = string(stream.String())
    in.UiGroups = stream.UInt32LE()
    in.StrEmail = string(stream.String())
    in.DtCreationDate = DateTime(stream.UInt64LE())
    in.DtEffectiveDate = DateTime(stream.UInt64LE())
    in.StrNotEffectiveMsg = string(stream.String())
    in.DtExpiryDate = DateTime(stream.UInt64LE())
    in.StrExpiredMsg = string(stream.String())
    return
}
func (stream *OutputStream) Struct_AccountData(out AccountData) {
    stream.Struct_Structure(out.Base)
    stream.UInt32LE(uint32(out.Pid))
    stream.String(string(out.StrName))
    stream.UInt32LE(out.UiGroups)
    stream.String(string(out.StrEmail))
    stream.UInt64LE(uint64(out.DtCreationDate))
    stream.UInt64LE(uint64(out.DtEffectiveDate))
    stream.String(string(out.StrNotEffectiveMsg))
    stream.UInt64LE(uint64(out.DtExpiryDate))
    stream.String(string(out.StrExpiredMsg))
    return
}
func (stream *InputStream) Struct_AutoMatchmakeParam() (in AutoMatchmakeParam) {
    in.Base = stream.Struct_Structure()
    in.SourceMatchmakeSession = stream.Struct_MatchmakeSession()
    in.AdditionalParticipants = stream.List_PID()
    in.GidForParticipationCheck = stream.UInt32LE()
    in.AutoMatchmakeOption = stream.UInt32LE()
    in.JoinMessage = string(stream.String())
    in.ParticipationCount = stream.UInt16LE()
    in.LstSearchCriteria = stream.List_MatchmakeSessionSearchCriteria()
    in.TargetGids = stream.List_uint32()
    in.BlockListParam = stream.Struct_MatchmakeBlockListParam()
    return
}
func (stream *OutputStream) Struct_AutoMatchmakeParam(out AutoMatchmakeParam) {
    stream.Struct_Structure(out.Base)
    stream.Struct_MatchmakeSession(out.SourceMatchmakeSession)
    stream.List_PID(out.AdditionalParticipants)
    stream.UInt32LE(out.GidForParticipationCheck)
    stream.UInt32LE(out.AutoMatchmakeOption)
    stream.String(string(out.JoinMessage))
    stream.UInt16LE(out.ParticipationCount)
    stream.List_MatchmakeSessionSearchCriteria(out.LstSearchCriteria)
    stream.List_uint32(out.TargetGids)
    stream.Struct_MatchmakeBlockListParam(out.BlockListParam)
    return
}
func (stream *InputStream) Struct_BasicAccountInfo() (in BasicAccountInfo) {
    in.Base = stream.Struct_Structure()
    in.PidOwner = PID(stream.UInt32LE())
    in.StrName = string(stream.String())
    return
}
func (stream *OutputStream) Struct_BasicAccountInfo(out BasicAccountInfo) {
    stream.Struct_Structure(out.Base)
    stream.UInt32LE(uint32(out.PidOwner))
    stream.String(string(out.StrName))
    return
}
func (stream *InputStream) Struct_BlacklistedPrincipal() (in BlacklistedPrincipal) {
    in.PrincipalBasicInfo = stream.Struct_PrincipalBasicInfo()
    in.GameKey = stream.Struct_GameKey()
    in.BlacklistedSince = DateTime(stream.UInt64LE())
    return
}
func (stream *OutputStream) Struct_BlacklistedPrincipal(out BlacklistedPrincipal) {
    stream.Struct_PrincipalBasicInfo(out.PrincipalBasicInfo)
    stream.Struct_GameKey(out.GameKey)
    stream.UInt64LE(uint64(out.BlacklistedSince))
    return
}
func (stream *InputStream) Struct_BufferQueueParam() (in BufferQueueParam) {
    in.Base = stream.Struct_Structure()
    in.DataId = stream.UInt64LE()
    in.Slot = stream.UInt32LE()
    return
}
func (stream *OutputStream) Struct_BufferQueueParam(out BufferQueueParam) {
    stream.Struct_Structure(out.Base)
    stream.UInt64LE(out.DataId)
    stream.UInt32LE(out.Slot)
    return
}
func (stream *InputStream) Struct_Comment() (in Comment) {
    in.Unknown = stream.UInt8()
    in.StatusMessage = string(stream.String())
    in.LastChangedOn = DateTime(stream.UInt64LE())
    return
}
func (stream *OutputStream) Struct_Comment(out Comment) {
    stream.UInt8(out.Unknown)
    stream.String(string(out.StatusMessage))
    stream.UInt64LE(uint64(out.LastChangedOn))
    return
}
func (stream *InputStream) Struct_ConnectionData() (in ConnectionData) {
    in.Base = stream.Struct_Structure()
    in.Station = StationURL(stream.String())
    in.Connection_id = stream.UInt32LE()
    return
}
func (stream *OutputStream) Struct_ConnectionData(out ConnectionData) {
    stream.Struct_Structure(out.Base)
    stream.String(string(out.Station))
    stream.UInt32LE(out.Connection_id)
    return
}
func (stream *InputStream) Struct_CreateMatchmakeSessionParam() (in CreateMatchmakeSessionParam) {
    in.Base = stream.Struct_Structure()
    in.SourceMatchmakeSession = stream.Struct_MatchmakeSession()
    in.AdditionalParticipants = stream.List_PID()
    in.GidForParticipationCheck = stream.UInt32LE()
    in.CreateMatchmakeSessionOption = stream.UInt32LE()
    in.JoinMessage = string(stream.String())
    in.ParticipationCount = stream.UInt16LE()
    return
}
func (stream *OutputStream) Struct_CreateMatchmakeSessionParam(out CreateMatchmakeSessionParam) {
    stream.Struct_Structure(out.Base)
    stream.Struct_MatchmakeSession(out.SourceMatchmakeSession)
    stream.List_PID(out.AdditionalParticipants)
    stream.UInt32LE(out.GidForParticipationCheck)
    stream.UInt32LE(out.CreateMatchmakeSessionOption)
    stream.String(string(out.JoinMessage))
    stream.UInt16LE(out.ParticipationCount)
    return
}
func (stream *InputStream) Struct_Data() (in Data) {
    in.type_name = string(stream.String())
    in.len_plus_four = stream.UInt32LE()
    in.data = stream.Buffer()
    return
}
func (stream *OutputStream) Struct_Data(out Data) {
    stream.String(string(out.type_name))
    stream.UInt32LE(out.len_plus_four)
    stream.Buffer(out.data)
    return
}
func (stream *InputStream) Struct_DataStoreChangeMetaCompareParam() (in DataStoreChangeMetaCompareParam) {
    in.Base = stream.Struct_Structure()
    in.ComparisonFlag = stream.UInt32LE()
    in.Name = string(stream.String())
    in.Permission = stream.Struct_DataStorePermission()
    in.DelPermission = stream.Struct_DataStorePermission()
    in.Period = stream.UInt16LE()
    in.MetaBinary = stream.QBuffer()
    in.Tags = stream.List_string()
    in.ReferredCnt = stream.UInt32LE()
    in.DataType = stream.UInt16LE()
    in.Status = stream.UInt8()
    return
}
func (stream *OutputStream) Struct_DataStoreChangeMetaCompareParam(out DataStoreChangeMetaCompareParam) {
    stream.Struct_Structure(out.Base)
    stream.UInt32LE(out.ComparisonFlag)
    stream.String(string(out.Name))
    stream.Struct_DataStorePermission(out.Permission)
    stream.Struct_DataStorePermission(out.DelPermission)
    stream.UInt16LE(out.Period)
    stream.QBuffer(out.MetaBinary)
    stream.List_string(out.Tags)
    stream.UInt32LE(out.ReferredCnt)
    stream.UInt16LE(out.DataType)
    stream.UInt8(out.Status)
    return
}
func (stream *InputStream) Struct_DataStoreChangeMetaParam() (in DataStoreChangeMetaParam) {
    in.Base = stream.Struct_Structure()
    in.DataId = stream.UInt64LE()
    in.ModifiesFlag = stream.UInt32LE()
    in.Name = string(stream.String())
    in.Permission = stream.Struct_DataStorePermission()
    in.DelPermission = stream.Struct_DataStorePermission()
    in.Period = stream.UInt16LE()
    in.MetaBinary = stream.QBuffer()
    in.Tags = stream.List_string()
    in.UpdatePassword = stream.UInt64LE()
    in.ReferredCnt = stream.UInt32LE()
    in.DataType = stream.UInt16LE()
    in.Status = stream.UInt8()
    in.CompareParam = stream.Struct_DataStoreChangeMetaCompareParam()
    in.PersistenceTarget = stream.Struct_DataStorePersistenceTarget()
    return
}
func (stream *OutputStream) Struct_DataStoreChangeMetaParam(out DataStoreChangeMetaParam) {
    stream.Struct_Structure(out.Base)
    stream.UInt64LE(out.DataId)
    stream.UInt32LE(out.ModifiesFlag)
    stream.String(string(out.Name))
    stream.Struct_DataStorePermission(out.Permission)
    stream.Struct_DataStorePermission(out.DelPermission)
    stream.UInt16LE(out.Period)
    stream.QBuffer(out.MetaBinary)
    stream.List_string(out.Tags)
    stream.UInt64LE(out.UpdatePassword)
    stream.UInt32LE(out.ReferredCnt)
    stream.UInt16LE(out.DataType)
    stream.UInt8(out.Status)
    stream.Struct_DataStoreChangeMetaCompareParam(out.CompareParam)
    stream.Struct_DataStorePersistenceTarget(out.PersistenceTarget)
    return
}
func (stream *InputStream) Struct_DataStoreChangeMetaParamV1() (in DataStoreChangeMetaParamV1) {
    in.Base = stream.Struct_Structure()
    in.DataId = stream.UInt64LE()
    in.ModifiesFlag = stream.UInt32LE()
    in.Name = string(stream.String())
    in.Permission = stream.Struct_DataStorePermission()
    in.DelPermission = stream.Struct_DataStorePermission()
    in.Period = stream.UInt16LE()
    in.MetaBinary = stream.QBuffer()
    in.Tags = stream.List_string()
    in.UpdatePassword = stream.UInt64LE()
    return
}
func (stream *OutputStream) Struct_DataStoreChangeMetaParamV1(out DataStoreChangeMetaParamV1) {
    stream.Struct_Structure(out.Base)
    stream.UInt64LE(out.DataId)
    stream.UInt32LE(out.ModifiesFlag)
    stream.String(string(out.Name))
    stream.Struct_DataStorePermission(out.Permission)
    stream.Struct_DataStorePermission(out.DelPermission)
    stream.UInt16LE(out.Period)
    stream.QBuffer(out.MetaBinary)
    stream.List_string(out.Tags)
    stream.UInt64LE(out.UpdatePassword)
    return
}
func (stream *InputStream) Struct_DataStoreCompletePostParam() (in DataStoreCompletePostParam) {
    in.Base = stream.Struct_Structure()
    in.DataId = stream.UInt64LE()
    in.IsSuccess = stream.Bool()
    return
}
func (stream *OutputStream) Struct_DataStoreCompletePostParam(out DataStoreCompletePostParam) {
    stream.Struct_Structure(out.Base)
    stream.UInt64LE(out.DataId)
    stream.Bool(out.IsSuccess)
    return
}
func (stream *InputStream) Struct_DataStoreCompletePostParamV1() (in DataStoreCompletePostParamV1) {
    in.Base = stream.Struct_Structure()
    in.DataId = stream.UInt32LE()
    in.IsSuccess = stream.Bool()
    return
}
func (stream *OutputStream) Struct_DataStoreCompletePostParamV1(out DataStoreCompletePostParamV1) {
    stream.Struct_Structure(out.Base)
    stream.UInt32LE(out.DataId)
    stream.Bool(out.IsSuccess)
    return
}
func (stream *InputStream) Struct_DataStoreCompleteUpdateParam() (in DataStoreCompleteUpdateParam) {
    in.Base = stream.Struct_Structure()
    in.DataId = stream.UInt64LE()
    in.Version = stream.UInt32LE()
    in.IsSuccess = stream.Bool()
    return
}
func (stream *OutputStream) Struct_DataStoreCompleteUpdateParam(out DataStoreCompleteUpdateParam) {
    stream.Struct_Structure(out.Base)
    stream.UInt64LE(out.DataId)
    stream.UInt32LE(out.Version)
    stream.Bool(out.IsSuccess)
    return
}
func (stream *InputStream) Struct_DataStoreDeleteParam() (in DataStoreDeleteParam) {
    in.Base = stream.Struct_Structure()
    in.DataId = stream.UInt64LE()
    in.UpdatePassword = stream.UInt64LE()
    return
}
func (stream *OutputStream) Struct_DataStoreDeleteParam(out DataStoreDeleteParam) {
    stream.Struct_Structure(out.Base)
    stream.UInt64LE(out.DataId)
    stream.UInt64LE(out.UpdatePassword)
    return
}
func (stream *InputStream) Struct_DataStoreFetchMyInfosAchievementResult() (in DataStoreFetchMyInfosAchievementResult) {
    in.Base = stream.Struct_Structure()
    in.DataId = stream.UInt64LE()
    in.DataType = stream.UInt16LE()
    in.MetaBinary = stream.QBuffer()
    in.CreatedTime = DateTime(stream.UInt64LE())
    in.Ratings = stream.Map_int8_DataStoreRatingInfo()
    in.Buffers = stream.Map_int8_List_QBuffer()
    return
}
func (stream *OutputStream) Struct_DataStoreFetchMyInfosAchievementResult(out DataStoreFetchMyInfosAchievementResult) {
    stream.Struct_Structure(out.Base)
    stream.UInt64LE(out.DataId)
    stream.UInt16LE(out.DataType)
    stream.QBuffer(out.MetaBinary)
    stream.UInt64LE(uint64(out.CreatedTime))
    stream.Map_int8_DataStoreRatingInfo(out.Ratings)
    stream.Map_int8_List_QBuffer(out.Buffers)
    return
}
func (stream *InputStream) Struct_DataStoreFetchMyInfosBalloonResult() (in DataStoreFetchMyInfosBalloonResult) {
    in.Base = stream.Struct_Structure()
    in.DataId = stream.UInt64LE()
    in.DataType = stream.UInt16LE()
    in.MetaBinary = stream.QBuffer()
    in.CreatedTime = DateTime(stream.UInt64LE())
    in.UpdatedTime = DateTime(stream.UInt64LE())
    in.IsCleared = stream.Bool()
    in.Ratings = stream.Map_int8_DataStoreRatingInfo()
    in.Buffers = stream.Map_int8_List_QBuffer()
    return
}
func (stream *OutputStream) Struct_DataStoreFetchMyInfosBalloonResult(out DataStoreFetchMyInfosBalloonResult) {
    stream.Struct_Structure(out.Base)
    stream.UInt64LE(out.DataId)
    stream.UInt16LE(out.DataType)
    stream.QBuffer(out.MetaBinary)
    stream.UInt64LE(uint64(out.CreatedTime))
    stream.UInt64LE(uint64(out.UpdatedTime))
    stream.Bool(out.IsCleared)
    stream.Map_int8_DataStoreRatingInfo(out.Ratings)
    stream.Map_int8_List_QBuffer(out.Buffers)
    return
}
func (stream *InputStream) Struct_DataStoreFetchMyInfosParam() (in DataStoreFetchMyInfosParam) {
    in.Base = stream.Struct_Structure()
    in.BalloonDataTypes = stream.List_uint16()
    in.AdditionalOperation = stream.UInt16LE()
    return
}
func (stream *OutputStream) Struct_DataStoreFetchMyInfosParam(out DataStoreFetchMyInfosParam) {
    stream.Struct_Structure(out.Base)
    stream.List_uint16(out.BalloonDataTypes)
    stream.UInt16LE(out.AdditionalOperation)
    return
}
func (stream *InputStream) Struct_DataStoreFetchMyInfosResult() (in DataStoreFetchMyInfosResult) {
    in.Base = stream.Struct_Structure()
    in.Balloons = stream.List_DataStoreFetchMyInfosBalloonResult()
    in.Achievement = stream.Struct_DataStoreFetchMyInfosAchievementResult()
    return
}
func (stream *OutputStream) Struct_DataStoreFetchMyInfosResult(out DataStoreFetchMyInfosResult) {
    stream.Struct_Structure(out.Base)
    stream.List_DataStoreFetchMyInfosBalloonResult(out.Balloons)
    stream.Struct_DataStoreFetchMyInfosAchievementResult(out.Achievement)
    return
}
func (stream *InputStream) Struct_DataStoreGetMetaParam() (in DataStoreGetMetaParam) {
    in.Base = stream.Struct_Structure()
    in.DataId = stream.UInt64LE()
    in.PersistenceTarget = stream.Struct_DataStorePersistenceTarget()
    in.ResultOption = stream.UInt8()
    in.AccessPassword = stream.UInt64LE()
    return
}
func (stream *OutputStream) Struct_DataStoreGetMetaParam(out DataStoreGetMetaParam) {
    stream.Struct_Structure(out.Base)
    stream.UInt64LE(out.DataId)
    stream.Struct_DataStorePersistenceTarget(out.PersistenceTarget)
    stream.UInt8(out.ResultOption)
    stream.UInt64LE(out.AccessPassword)
    return
}
func (stream *InputStream) Struct_DataStoreGetNewArrivedNotificationsParam() (in DataStoreGetNewArrivedNotificationsParam) {
    in.Base = stream.Struct_Structure()
    in.LastNotificationId = stream.UInt64LE()
    in.Limit = stream.UInt16LE()
    return
}
func (stream *OutputStream) Struct_DataStoreGetNewArrivedNotificationsParam(out DataStoreGetNewArrivedNotificationsParam) {
    stream.Struct_Structure(out.Base)
    stream.UInt64LE(out.LastNotificationId)
    stream.UInt16LE(out.Limit)
    return
}
func (stream *InputStream) Struct_DataStoreGetNotificationUrlParam() (in DataStoreGetNotificationUrlParam) {
    in.Base = stream.Struct_Structure()
    in.PreviousUrl = string(stream.String())
    return
}
func (stream *OutputStream) Struct_DataStoreGetNotificationUrlParam(out DataStoreGetNotificationUrlParam) {
    stream.Struct_Structure(out.Base)
    stream.String(string(out.PreviousUrl))
    return
}
func (stream *InputStream) Struct_DataStoreGetSpecificMetaParam() (in DataStoreGetSpecificMetaParam) {
    in.Base = stream.Struct_Structure()
    in.DataIds = stream.List_uint64()
    return
}
func (stream *OutputStream) Struct_DataStoreGetSpecificMetaParam(out DataStoreGetSpecificMetaParam) {
    stream.Struct_Structure(out.Base)
    stream.List_uint64(out.DataIds)
    return
}
func (stream *InputStream) Struct_DataStoreGetSpecificMetaParamV1() (in DataStoreGetSpecificMetaParamV1) {
    in.Base = stream.Struct_Structure()
    in.DataIds = stream.List_uint32()
    return
}
func (stream *OutputStream) Struct_DataStoreGetSpecificMetaParamV1(out DataStoreGetSpecificMetaParamV1) {
    stream.Struct_Structure(out.Base)
    stream.List_uint32(out.DataIds)
    return
}
func (stream *InputStream) Struct_DataStoreKeyValue() (in DataStoreKeyValue) {
    in.Base = stream.Struct_Structure()
    in.Key = string(stream.String())
    in.Value = string(stream.String())
    return
}
func (stream *OutputStream) Struct_DataStoreKeyValue(out DataStoreKeyValue) {
    stream.Struct_Structure(out.Base)
    stream.String(string(out.Key))
    stream.String(string(out.Value))
    return
}
func (stream *InputStream) Struct_DataStoreMetaInfo() (in DataStoreMetaInfo) {
    in.Base = stream.Struct_Structure()
    in.DataId = stream.UInt64LE()
    in.OwnerId = PID(stream.UInt32LE())
    in.Size = stream.UInt32LE()
    in.Name = string(stream.String())
    in.DataType = stream.UInt16LE()
    in.MetaBinary = stream.QBuffer()
    in.Permission = stream.Struct_DataStorePermission()
    in.DelPermission = stream.Struct_DataStorePermission()
    in.CreatedTime = DateTime(stream.UInt64LE())
    in.UpdatedTime = DateTime(stream.UInt64LE())
    in.Period = stream.UInt16LE()
    in.Status = stream.UInt8()
    in.ReferredCnt = stream.UInt32LE()
    in.ReferDataId = stream.UInt32LE()
    in.Flag = stream.UInt32LE()
    in.ReferredTime = DateTime(stream.UInt64LE())
    in.ExpireTime = DateTime(stream.UInt64LE())
    in.Tags = stream.List_string()
    in.Ratings = stream.List_DataStoreRatingInfoWithSlot()
    return
}
func (stream *OutputStream) Struct_DataStoreMetaInfo(out DataStoreMetaInfo) {
    stream.Struct_Structure(out.Base)
    stream.UInt64LE(out.DataId)
    stream.UInt32LE(uint32(out.OwnerId))
    stream.UInt32LE(out.Size)
    stream.String(string(out.Name))
    stream.UInt16LE(out.DataType)
    stream.QBuffer(out.MetaBinary)
    stream.Struct_DataStorePermission(out.Permission)
    stream.Struct_DataStorePermission(out.DelPermission)
    stream.UInt64LE(uint64(out.CreatedTime))
    stream.UInt64LE(uint64(out.UpdatedTime))
    stream.UInt16LE(out.Period)
    stream.UInt8(out.Status)
    stream.UInt32LE(out.ReferredCnt)
    stream.UInt32LE(out.ReferDataId)
    stream.UInt32LE(out.Flag)
    stream.UInt64LE(uint64(out.ReferredTime))
    stream.UInt64LE(uint64(out.ExpireTime))
    stream.List_string(out.Tags)
    stream.List_DataStoreRatingInfoWithSlot(out.Ratings)
    return
}
func (stream *InputStream) Struct_DataStoreNotification() (in DataStoreNotification) {
    in.Base = stream.Struct_Structure()
    in.NotificationId = stream.UInt64LE()
    in.DataId = stream.UInt64LE()
    return
}
func (stream *OutputStream) Struct_DataStoreNotification(out DataStoreNotification) {
    stream.Struct_Structure(out.Base)
    stream.UInt64LE(out.NotificationId)
    stream.UInt64LE(out.DataId)
    return
}
func (stream *InputStream) Struct_DataStoreNotificationV1() (in DataStoreNotificationV1) {
    in.Base = stream.Struct_Structure()
    in.NotificationId = stream.UInt64LE()
    in.DataId = stream.UInt32LE()
    return
}
func (stream *OutputStream) Struct_DataStoreNotificationV1(out DataStoreNotificationV1) {
    stream.Struct_Structure(out.Base)
    stream.UInt64LE(out.NotificationId)
    stream.UInt32LE(out.DataId)
    return
}
func (stream *InputStream) Struct_DataStorePasswordInfo() (in DataStorePasswordInfo) {
    in.Base = stream.Struct_Structure()
    in.DataId = stream.UInt64LE()
    in.AccessPassword = stream.UInt64LE()
    in.UpdatePassword = stream.UInt64LE()
    return
}
func (stream *OutputStream) Struct_DataStorePasswordInfo(out DataStorePasswordInfo) {
    stream.Struct_Structure(out.Base)
    stream.UInt64LE(out.DataId)
    stream.UInt64LE(out.AccessPassword)
    stream.UInt64LE(out.UpdatePassword)
    return
}
func (stream *InputStream) Struct_DataStorePermission() (in DataStorePermission) {
    in.Base = stream.Struct_Structure()
    in.Permission = stream.UInt8()
    in.RecipientIds = stream.List_PID()
    return
}
func (stream *OutputStream) Struct_DataStorePermission(out DataStorePermission) {
    stream.Struct_Structure(out.Base)
    stream.UInt8(out.Permission)
    stream.List_PID(out.RecipientIds)
    return
}
func (stream *InputStream) Struct_DataStorePersistenceInfo() (in DataStorePersistenceInfo) {
    in.Base = stream.Struct_Structure()
    in.OwnerId = PID(stream.UInt32LE())
    in.PersistenceSlotId = stream.UInt16LE()
    in.DataId = stream.UInt64LE()
    return
}
func (stream *OutputStream) Struct_DataStorePersistenceInfo(out DataStorePersistenceInfo) {
    stream.Struct_Structure(out.Base)
    stream.UInt32LE(uint32(out.OwnerId))
    stream.UInt16LE(out.PersistenceSlotId)
    stream.UInt64LE(out.DataId)
    return
}
func (stream *InputStream) Struct_DataStorePersistenceInitParam() (in DataStorePersistenceInitParam) {
    in.Base = stream.Struct_Structure()
    in.PersistenceSlotId = stream.UInt16LE()
    in.DeleteLastObject = stream.Bool()
    return
}
func (stream *OutputStream) Struct_DataStorePersistenceInitParam(out DataStorePersistenceInitParam) {
    stream.Struct_Structure(out.Base)
    stream.UInt16LE(out.PersistenceSlotId)
    stream.Bool(out.DeleteLastObject)
    return
}
func (stream *InputStream) Struct_DataStorePersistenceTarget() (in DataStorePersistenceTarget) {
    in.Base = stream.Struct_Structure()
    in.OwnerId = PID(stream.UInt32LE())
    in.PersistenceSlotId = stream.UInt16LE()
    return
}
func (stream *OutputStream) Struct_DataStorePersistenceTarget(out DataStorePersistenceTarget) {
    stream.Struct_Structure(out.Base)
    stream.UInt32LE(uint32(out.OwnerId))
    stream.UInt16LE(out.PersistenceSlotId)
    return
}
func (stream *InputStream) Struct_DataStorePrepareGetParam() (in DataStorePrepareGetParam) {
    in.Base = stream.Struct_Structure()
    in.DataId = stream.UInt64LE()
    in.LockId = stream.UInt32LE()
    in.PersistenceTarget = stream.Struct_DataStorePersistenceTarget()
    in.AccessPassword = stream.UInt64LE()
    in.ExtraData = stream.List_string()
    return
}
func (stream *OutputStream) Struct_DataStorePrepareGetParam(out DataStorePrepareGetParam) {
    stream.Struct_Structure(out.Base)
    stream.UInt64LE(out.DataId)
    stream.UInt32LE(out.LockId)
    stream.Struct_DataStorePersistenceTarget(out.PersistenceTarget)
    stream.UInt64LE(out.AccessPassword)
    stream.List_string(out.ExtraData)
    return
}
func (stream *InputStream) Struct_DataStorePrepareGetParamV1() (in DataStorePrepareGetParamV1) {
    in.Base = stream.Struct_Structure()
    in.DataId = stream.UInt32LE()
    in.LockId = stream.UInt32LE()
    return
}
func (stream *OutputStream) Struct_DataStorePrepareGetParamV1(out DataStorePrepareGetParamV1) {
    stream.Struct_Structure(out.Base)
    stream.UInt32LE(out.DataId)
    stream.UInt32LE(out.LockId)
    return
}
func (stream *InputStream) Struct_DataStorePreparePostParam() (in DataStorePreparePostParam) {
    in.Base = stream.Struct_Structure()
    in.Size = stream.UInt32LE()
    in.Name = string(stream.String())
    in.DataType = stream.UInt16LE()
    in.MetaBinary = stream.QBuffer()
    in.Permission = stream.Struct_DataStorePermission()
    in.DelPermission = stream.Struct_DataStorePermission()
    in.Flag = stream.UInt32LE()
    in.Period = stream.UInt16LE()
    in.ReferDataId = stream.UInt32LE()
    in.Tags = stream.List_string()
    in.RatingInitParams = stream.List_DataStoreRatingInitParamWithSlot()
    in.PersistenceInitParam = stream.Struct_DataStorePersistenceInitParam()
    in.ExtraData = stream.List_string()
    return
}
func (stream *OutputStream) Struct_DataStorePreparePostParam(out DataStorePreparePostParam) {
    stream.Struct_Structure(out.Base)
    stream.UInt32LE(out.Size)
    stream.String(string(out.Name))
    stream.UInt16LE(out.DataType)
    stream.QBuffer(out.MetaBinary)
    stream.Struct_DataStorePermission(out.Permission)
    stream.Struct_DataStorePermission(out.DelPermission)
    stream.UInt32LE(out.Flag)
    stream.UInt16LE(out.Period)
    stream.UInt32LE(out.ReferDataId)
    stream.List_string(out.Tags)
    stream.List_DataStoreRatingInitParamWithSlot(out.RatingInitParams)
    stream.Struct_DataStorePersistenceInitParam(out.PersistenceInitParam)
    stream.List_string(out.ExtraData)
    return
}
func (stream *InputStream) Struct_DataStorePreparePostParamV1() (in DataStorePreparePostParamV1) {
    in.Base = stream.Struct_Structure()
    in.Size = stream.UInt32LE()
    in.Name = string(stream.String())
    in.DataType = stream.UInt16LE()
    in.MetaBinary = stream.QBuffer()
    in.Permission = stream.Struct_DataStorePermission()
    in.DelPermission = stream.Struct_DataStorePermission()
    in.Flag = stream.UInt32LE()
    in.Period = stream.UInt16LE()
    in.ReferDataId = stream.UInt32LE()
    in.Tags = stream.List_string()
    in.RatingInitParams = stream.List_DataStoreRatingInitParamWithSlot()
    return
}
func (stream *OutputStream) Struct_DataStorePreparePostParamV1(out DataStorePreparePostParamV1) {
    stream.Struct_Structure(out.Base)
    stream.UInt32LE(out.Size)
    stream.String(string(out.Name))
    stream.UInt16LE(out.DataType)
    stream.QBuffer(out.MetaBinary)
    stream.Struct_DataStorePermission(out.Permission)
    stream.Struct_DataStorePermission(out.DelPermission)
    stream.UInt32LE(out.Flag)
    stream.UInt16LE(out.Period)
    stream.UInt32LE(out.ReferDataId)
    stream.List_string(out.Tags)
    stream.List_DataStoreRatingInitParamWithSlot(out.RatingInitParams)
    return
}
func (stream *InputStream) Struct_DataStorePrepareUpdateParam() (in DataStorePrepareUpdateParam) {
    in.Base = stream.Struct_Structure()
    in.DataId = stream.UInt64LE()
    in.Size = stream.UInt32LE()
    in.UpdatePassword = stream.UInt64LE()
    in.ExtraData = stream.List_string()
    return
}
func (stream *OutputStream) Struct_DataStorePrepareUpdateParam(out DataStorePrepareUpdateParam) {
    stream.Struct_Structure(out.Base)
    stream.UInt64LE(out.DataId)
    stream.UInt32LE(out.Size)
    stream.UInt64LE(out.UpdatePassword)
    stream.List_string(out.ExtraData)
    return
}
func (stream *InputStream) Struct_DataStoreRateObjectParam() (in DataStoreRateObjectParam) {
    in.Base = stream.Struct_Structure()
    in.RatingValue = stream.Int32LE()
    in.AccessPassword = stream.UInt64LE()
    return
}
func (stream *OutputStream) Struct_DataStoreRateObjectParam(out DataStoreRateObjectParam) {
    stream.Struct_Structure(out.Base)
    stream.Int32LE(out.RatingValue)
    stream.UInt64LE(out.AccessPassword)
    return
}
func (stream *InputStream) Struct_DataStoreRatingInfo() (in DataStoreRatingInfo) {
    in.Base = stream.Struct_Structure()
    in.TotalValue = stream.Int64LE()
    in.Count = stream.UInt32LE()
    in.InitialValue = stream.Int64LE()
    return
}
func (stream *OutputStream) Struct_DataStoreRatingInfo(out DataStoreRatingInfo) {
    stream.Struct_Structure(out.Base)
    stream.Int64LE(out.TotalValue)
    stream.UInt32LE(out.Count)
    stream.Int64LE(out.InitialValue)
    return
}
func (stream *InputStream) Struct_DataStoreRatingInfoWithSlot() (in DataStoreRatingInfoWithSlot) {
    in.Base = stream.Struct_Structure()
    in.Slot = stream.Int8()
    in.Rating = stream.Struct_DataStoreRatingInfo()
    return
}
func (stream *OutputStream) Struct_DataStoreRatingInfoWithSlot(out DataStoreRatingInfoWithSlot) {
    stream.Struct_Structure(out.Base)
    stream.Int8(out.Slot)
    stream.Struct_DataStoreRatingInfo(out.Rating)
    return
}
func (stream *InputStream) Struct_DataStoreRatingInitParam() (in DataStoreRatingInitParam) {
    in.Base = stream.Struct_Structure()
    in.Flag = stream.UInt8()
    in.InternalFlag = stream.UInt8()
    in.LockType = stream.UInt8()
    in.InitialValue = stream.Int64LE()
    in.RangeMin = stream.Int32LE()
    in.RangeMax = stream.Int32LE()
    in.PeriodHour = stream.Int8()
    in.PeriodDuration = stream.Int16LE()
    return
}
func (stream *OutputStream) Struct_DataStoreRatingInitParam(out DataStoreRatingInitParam) {
    stream.Struct_Structure(out.Base)
    stream.UInt8(out.Flag)
    stream.UInt8(out.InternalFlag)
    stream.UInt8(out.LockType)
    stream.Int64LE(out.InitialValue)
    stream.Int32LE(out.RangeMin)
    stream.Int32LE(out.RangeMax)
    stream.Int8(out.PeriodHour)
    stream.Int16LE(out.PeriodDuration)
    return
}
func (stream *InputStream) Struct_DataStoreRatingInitParamWithSlot() (in DataStoreRatingInitParamWithSlot) {
    in.Base = stream.Struct_Structure()
    in.Slot = stream.Int8()
    in.Param = stream.Struct_DataStoreRatingInitParam()
    return
}
func (stream *OutputStream) Struct_DataStoreRatingInitParamWithSlot(out DataStoreRatingInitParamWithSlot) {
    stream.Struct_Structure(out.Base)
    stream.Int8(out.Slot)
    stream.Struct_DataStoreRatingInitParam(out.Param)
    return
}
func (stream *InputStream) Struct_DataStoreRatingLog() (in DataStoreRatingLog) {
    in.Base = stream.Struct_Structure()
    in.IsRated = stream.Bool()
    in.Pid = PID(stream.UInt32LE())
    in.RatingValue = stream.Int32LE()
    in.LockExpirationTime = DateTime(stream.UInt64LE())
    return
}
func (stream *OutputStream) Struct_DataStoreRatingLog(out DataStoreRatingLog) {
    stream.Struct_Structure(out.Base)
    stream.Bool(out.IsRated)
    stream.UInt32LE(uint32(out.Pid))
    stream.Int32LE(out.RatingValue)
    stream.UInt64LE(uint64(out.LockExpirationTime))
    return
}
func (stream *InputStream) Struct_DataStoreRatingTarget() (in DataStoreRatingTarget) {
    in.Base = stream.Struct_Structure()
    in.DataId = stream.UInt64LE()
    in.Slot = stream.Int8()
    return
}
func (stream *OutputStream) Struct_DataStoreRatingTarget(out DataStoreRatingTarget) {
    stream.Struct_Structure(out.Base)
    stream.UInt64LE(out.DataId)
    stream.Int8(out.Slot)
    return
}
func (stream *InputStream) Struct_DataStoreReqGetAdditionalMeta() (in DataStoreReqGetAdditionalMeta) {
    in.Base = stream.Struct_Structure()
    in.OwnerId = PID(stream.UInt32LE())
    in.DataType = stream.UInt16LE()
    in.Version = stream.UInt16LE()
    in.MetaBinary = stream.QBuffer()
    return
}
func (stream *OutputStream) Struct_DataStoreReqGetAdditionalMeta(out DataStoreReqGetAdditionalMeta) {
    stream.Struct_Structure(out.Base)
    stream.UInt32LE(uint32(out.OwnerId))
    stream.UInt16LE(out.DataType)
    stream.UInt16LE(out.Version)
    stream.QBuffer(out.MetaBinary)
    return
}
func (stream *InputStream) Struct_DataStoreReqGetInfo() (in DataStoreReqGetInfo) {
    in.Base = stream.Struct_Structure()
    in.Url = string(stream.String())
    in.RequestHeaders = stream.List_DataStoreKeyValue()
    in.Size = stream.UInt32LE()
    in.RootCaCert = stream.Buffer()
    in.DataId = stream.UInt64LE()
    return
}
func (stream *OutputStream) Struct_DataStoreReqGetInfo(out DataStoreReqGetInfo) {
    stream.Struct_Structure(out.Base)
    stream.String(string(out.Url))
    stream.List_DataStoreKeyValue(out.RequestHeaders)
    stream.UInt32LE(out.Size)
    stream.Buffer(out.RootCaCert)
    stream.UInt64LE(out.DataId)
    return
}
func (stream *InputStream) Struct_DataStoreReqGetInfoV1() (in DataStoreReqGetInfoV1) {
    in.Base = stream.Struct_Structure()
    in.Url = string(stream.String())
    in.RequestHeaders = stream.List_DataStoreKeyValue()
    in.Size = stream.UInt32LE()
    in.RootCaCert = stream.Buffer()
    return
}
func (stream *OutputStream) Struct_DataStoreReqGetInfoV1(out DataStoreReqGetInfoV1) {
    stream.Struct_Structure(out.Base)
    stream.String(string(out.Url))
    stream.List_DataStoreKeyValue(out.RequestHeaders)
    stream.UInt32LE(out.Size)
    stream.Buffer(out.RootCaCert)
    return
}
func (stream *InputStream) Struct_DataStoreReqGetNotificationUrlInfo() (in DataStoreReqGetNotificationUrlInfo) {
    in.Base = stream.Struct_Structure()
    in.Url = string(stream.String())
    in.Key = string(stream.String())
    in.Query = string(stream.String())
    in.RootCaCert = stream.Buffer()
    return
}
func (stream *OutputStream) Struct_DataStoreReqGetNotificationUrlInfo(out DataStoreReqGetNotificationUrlInfo) {
    stream.Struct_Structure(out.Base)
    stream.String(string(out.Url))
    stream.String(string(out.Key))
    stream.String(string(out.Query))
    stream.Buffer(out.RootCaCert)
    return
}
func (stream *InputStream) Struct_DataStoreReqPostInfo() (in DataStoreReqPostInfo) {
    in.Base = stream.Struct_Structure()
    in.DataId = stream.UInt64LE()
    in.Url = string(stream.String())
    in.RequestHeaders = stream.List_DataStoreKeyValue()
    in.FormFields = stream.List_DataStoreKeyValue()
    in.RootCaCert = stream.Buffer()
    return
}
func (stream *OutputStream) Struct_DataStoreReqPostInfo(out DataStoreReqPostInfo) {
    stream.Struct_Structure(out.Base)
    stream.UInt64LE(out.DataId)
    stream.String(string(out.Url))
    stream.List_DataStoreKeyValue(out.RequestHeaders)
    stream.List_DataStoreKeyValue(out.FormFields)
    stream.Buffer(out.RootCaCert)
    return
}
func (stream *InputStream) Struct_DataStoreReqPostInfoV1() (in DataStoreReqPostInfoV1) {
    in.Base = stream.Struct_Structure()
    in.DataId = stream.UInt32LE()
    in.Url = string(stream.String())
    in.RequestHeaders = stream.List_DataStoreKeyValue()
    in.FormFields = stream.List_DataStoreKeyValue()
    in.RootCaCert = stream.Buffer()
    return
}
func (stream *OutputStream) Struct_DataStoreReqPostInfoV1(out DataStoreReqPostInfoV1) {
    stream.Struct_Structure(out.Base)
    stream.UInt32LE(out.DataId)
    stream.String(string(out.Url))
    stream.List_DataStoreKeyValue(out.RequestHeaders)
    stream.List_DataStoreKeyValue(out.FormFields)
    stream.Buffer(out.RootCaCert)
    return
}
func (stream *InputStream) Struct_DataStoreReqUpdateInfo() (in DataStoreReqUpdateInfo) {
    in.Base = stream.Struct_Structure()
    in.Version = stream.UInt32LE()
    in.Url = string(stream.String())
    in.RequestHeaders = stream.List_DataStoreKeyValue()
    in.FormFields = stream.List_DataStoreKeyValue()
    in.RootCaCert = stream.Buffer()
    return
}
func (stream *OutputStream) Struct_DataStoreReqUpdateInfo(out DataStoreReqUpdateInfo) {
    stream.Struct_Structure(out.Base)
    stream.UInt32LE(out.Version)
    stream.String(string(out.Url))
    stream.List_DataStoreKeyValue(out.RequestHeaders)
    stream.List_DataStoreKeyValue(out.FormFields)
    stream.Buffer(out.RootCaCert)
    return
}
func (stream *InputStream) Struct_DataStoreSearchBalloonParam() (in DataStoreSearchBalloonParam) {
    in.Base = stream.Struct_Structure()
    in.DataType = stream.UInt16LE()
    in.UserRank = stream.UInt8()
    in.ResultSetCount = stream.UInt8()
    return
}
func (stream *OutputStream) Struct_DataStoreSearchBalloonParam(out DataStoreSearchBalloonParam) {
    stream.Struct_Structure(out.Base)
    stream.UInt16LE(out.DataType)
    stream.UInt8(out.UserRank)
    stream.UInt8(out.ResultSetCount)
    return
}
func (stream *InputStream) Struct_DataStoreSearchBalloonResult() (in DataStoreSearchBalloonResult) {
    in.Base = stream.Struct_Structure()
    in.DataId = stream.UInt64LE()
    in.OwnerId = PID(stream.UInt32LE())
    in.Size = stream.UInt32LE()
    in.Name = string(stream.String())
    in.DataType = stream.UInt16LE()
    in.MetaBinary = stream.QBuffer()
    in.CreatedTime = DateTime(stream.UInt64LE())
    in.UpdatedTime = DateTime(stream.UInt64LE())
    in.OwnerDataId = stream.UInt64LE()
    in.OwnerName = string(stream.String())
    in.IsFriendBalloon = stream.Bool()
    in.Ratings = stream.Map_int8_DataStoreRatingInfo()
    in.OwnerRatings = stream.Map_int8_DataStoreRatingInfo()
    return
}
func (stream *OutputStream) Struct_DataStoreSearchBalloonResult(out DataStoreSearchBalloonResult) {
    stream.Struct_Structure(out.Base)
    stream.UInt64LE(out.DataId)
    stream.UInt32LE(uint32(out.OwnerId))
    stream.UInt32LE(out.Size)
    stream.String(string(out.Name))
    stream.UInt16LE(out.DataType)
    stream.QBuffer(out.MetaBinary)
    stream.UInt64LE(uint64(out.CreatedTime))
    stream.UInt64LE(uint64(out.UpdatedTime))
    stream.UInt64LE(out.OwnerDataId)
    stream.String(string(out.OwnerName))
    stream.Bool(out.IsFriendBalloon)
    stream.Map_int8_DataStoreRatingInfo(out.Ratings)
    stream.Map_int8_DataStoreRatingInfo(out.OwnerRatings)
    return
}
func (stream *InputStream) Struct_DataStoreSearchBalloonResultSet() (in DataStoreSearchBalloonResultSet) {
    in.Base = stream.Struct_Structure()
    in.Balloons = stream.List_DataStoreSearchBalloonResult()
    return
}
func (stream *OutputStream) Struct_DataStoreSearchBalloonResultSet(out DataStoreSearchBalloonResultSet) {
    stream.Struct_Structure(out.Base)
    stream.List_DataStoreSearchBalloonResult(out.Balloons)
    return
}
func (stream *InputStream) Struct_DataStoreSearchParam() (in DataStoreSearchParam) {
    in.Base = stream.Struct_Structure()
    in.SearchTarget = stream.UInt8()
    in.OwnerIds = stream.List_PID()
    in.OwnerType = stream.UInt8()
    in.DestinationIds = stream.List_uint64()
    in.DataType = stream.UInt16LE()
    in.CreatedAfter = DateTime(stream.UInt64LE())
    in.CreatedBefore = DateTime(stream.UInt64LE())
    in.UpdatedAfter = DateTime(stream.UInt64LE())
    in.UpdatedBefore = DateTime(stream.UInt64LE())
    in.ReferDataId = stream.UInt32LE()
    in.Tags = stream.List_string()
    in.ResultOrderColumn = stream.UInt8()
    in.ResultOrder = stream.UInt8()
    in.ResultRange = stream.Struct_ResultRange()
    in.ResultOption = stream.UInt8()
    in.MinimalRatingFrequency = stream.UInt32LE()
    in.UseCache = stream.Bool()
    in.TotalCountEnabled = stream.Bool()
    in.DataTypes = stream.List_uint16()
    return
}
func (stream *OutputStream) Struct_DataStoreSearchParam(out DataStoreSearchParam) {
    stream.Struct_Structure(out.Base)
    stream.UInt8(out.SearchTarget)
    stream.List_PID(out.OwnerIds)
    stream.UInt8(out.OwnerType)
    stream.List_uint64(out.DestinationIds)
    stream.UInt16LE(out.DataType)
    stream.UInt64LE(uint64(out.CreatedAfter))
    stream.UInt64LE(uint64(out.CreatedBefore))
    stream.UInt64LE(uint64(out.UpdatedAfter))
    stream.UInt64LE(uint64(out.UpdatedBefore))
    stream.UInt32LE(out.ReferDataId)
    stream.List_string(out.Tags)
    stream.UInt8(out.ResultOrderColumn)
    stream.UInt8(out.ResultOrder)
    stream.Struct_ResultRange(out.ResultRange)
    stream.UInt8(out.ResultOption)
    stream.UInt32LE(out.MinimalRatingFrequency)
    stream.Bool(out.UseCache)
    stream.Bool(out.TotalCountEnabled)
    stream.List_uint16(out.DataTypes)
    return
}
func (stream *InputStream) Struct_DataStoreSearchResult() (in DataStoreSearchResult) {
    in.Base = stream.Struct_Structure()
    in.TotalCount = stream.UInt32LE()
    in.Result = stream.List_DataStoreMetaInfo()
    in.TotalCountType = stream.UInt8()
    return
}
func (stream *OutputStream) Struct_DataStoreSearchResult(out DataStoreSearchResult) {
    stream.Struct_Structure(out.Base)
    stream.UInt32LE(out.TotalCount)
    stream.List_DataStoreMetaInfo(out.Result)
    stream.UInt8(out.TotalCountType)
    return
}
func (stream *InputStream) Struct_DataStoreSpecificMetaInfo() (in DataStoreSpecificMetaInfo) {
    in.Base = stream.Struct_Structure()
    in.DataId = stream.UInt64LE()
    in.OwnerId = PID(stream.UInt32LE())
    in.Size = stream.UInt32LE()
    in.DataType = stream.UInt16LE()
    in.Version = stream.UInt32LE()
    return
}
func (stream *OutputStream) Struct_DataStoreSpecificMetaInfo(out DataStoreSpecificMetaInfo) {
    stream.Struct_Structure(out.Base)
    stream.UInt64LE(out.DataId)
    stream.UInt32LE(uint32(out.OwnerId))
    stream.UInt32LE(out.Size)
    stream.UInt16LE(out.DataType)
    stream.UInt32LE(out.Version)
    return
}
func (stream *InputStream) Struct_DataStoreSpecificMetaInfoV1() (in DataStoreSpecificMetaInfoV1) {
    in.Base = stream.Struct_Structure()
    in.DataId = stream.UInt32LE()
    in.OwnerId = PID(stream.UInt32LE())
    in.Size = stream.UInt32LE()
    in.DataType = stream.UInt16LE()
    in.Version = stream.UInt16LE()
    return
}
func (stream *OutputStream) Struct_DataStoreSpecificMetaInfoV1(out DataStoreSpecificMetaInfoV1) {
    stream.Struct_Structure(out.Base)
    stream.UInt32LE(out.DataId)
    stream.UInt32LE(uint32(out.OwnerId))
    stream.UInt32LE(out.Size)
    stream.UInt16LE(out.DataType)
    stream.UInt16LE(out.Version)
    return
}
func (stream *InputStream) Struct_DataStoreTouchObjectParam() (in DataStoreTouchObjectParam) {
    in.Base = stream.Struct_Structure()
    in.DataId = stream.UInt64LE()
    in.LockId = stream.UInt32LE()
    in.AccessPassword = stream.UInt64LE()
    return
}
func (stream *OutputStream) Struct_DataStoreTouchObjectParam(out DataStoreTouchObjectParam) {
    stream.Struct_Structure(out.Base)
    stream.UInt64LE(out.DataId)
    stream.UInt32LE(out.LockId)
    stream.UInt64LE(out.AccessPassword)
    return
}
func (stream *InputStream) Struct_DeletionEntry() (in DeletionEntry) {
    in.Base = stream.Struct_Structure()
    in.IdGathering = stream.UInt32LE()
    in.Pid = PID(stream.UInt32LE())
    in.UiReason = stream.UInt32LE()
    return
}
func (stream *OutputStream) Struct_DeletionEntry(out DeletionEntry) {
    stream.Struct_Structure(out.Base)
    stream.UInt32LE(out.IdGathering)
    stream.UInt32LE(uint32(out.Pid))
    stream.UInt32LE(out.UiReason)
    return
}
func (stream *InputStream) Struct_FindMatchmakeSessionByParticipantParam() (in FindMatchmakeSessionByParticipantParam) {
    in.PrincipalIdList = stream.List_PID()
    in.ResultOptions = stream.UInt32LE()
    in.BlockListParam = stream.Struct_MatchmakeBlockListParam()
    return
}
func (stream *OutputStream) Struct_FindMatchmakeSessionByParticipantParam(out FindMatchmakeSessionByParticipantParam) {
    stream.List_PID(out.PrincipalIdList)
    stream.UInt32LE(out.ResultOptions)
    stream.Struct_MatchmakeBlockListParam(out.BlockListParam)
    return
}
func (stream *InputStream) Struct_FindMatchmakeSessionByParticipantResult() (in FindMatchmakeSessionByParticipantResult) {
    in.PrincipalId = PID(stream.UInt32LE())
    in.Session = stream.Struct_MatchmakeSession()
    return
}
func (stream *OutputStream) Struct_FindMatchmakeSessionByParticipantResult(out FindMatchmakeSessionByParticipantResult) {
    stream.UInt32LE(uint32(out.PrincipalId))
    stream.Struct_MatchmakeSession(out.Session)
    return
}
func (stream *InputStream) Struct_FriendData() (in FriendData) {
    in.Pid = stream.UInt32LE()
    in.StrName = string(stream.String())
    in.ByRelationship = stream.UInt8()
    in.UiDetails = stream.UInt32LE()
    in.StrStatus = string(stream.String())
    return
}
func (stream *OutputStream) Struct_FriendData(out FriendData) {
    stream.UInt32LE(out.Pid)
    stream.String(string(out.StrName))
    stream.UInt8(out.ByRelationship)
    stream.UInt32LE(out.UiDetails)
    stream.String(string(out.StrStatus))
    return
}
func (stream *InputStream) Struct_FriendInfo() (in FriendInfo) {
    in.NNAInfo = stream.Struct_NNAInfo()
    in.NintendoPresence = stream.Struct_NintendoPresenceV2()
    in.StatusMessage = stream.Struct_Comment()
    in.BecameFriend = DateTime(stream.UInt64LE())
    in.LastOnline = DateTime(stream.UInt64LE())
    in.Unknown = stream.UInt64LE()
    return
}
func (stream *OutputStream) Struct_FriendInfo(out FriendInfo) {
    stream.Struct_NNAInfo(out.NNAInfo)
    stream.Struct_NintendoPresenceV2(out.NintendoPresence)
    stream.Struct_Comment(out.StatusMessage)
    stream.UInt64LE(uint64(out.BecameFriend))
    stream.UInt64LE(uint64(out.LastOnline))
    stream.UInt64LE(out.Unknown)
    return
}
func (stream *InputStream) Struct_FriendMii() (in FriendMii) {
    in.Unknown = stream.UInt32LE()
    in.Mii = stream.Struct_Mii()
    in.Unknown2 = DateTime(stream.UInt64LE())
    return
}
func (stream *OutputStream) Struct_FriendMii(out FriendMii) {
    stream.UInt32LE(out.Unknown)
    stream.Struct_Mii(out.Mii)
    stream.UInt64LE(uint64(out.Unknown2))
    return
}
func (stream *InputStream) Struct_FriendMiiList() (in FriendMiiList) {
    in.Unknown = stream.UInt32LE()
    in.MiiList = stream.Struct_MiiList()
    in.Unknown2 = DateTime(stream.UInt64LE())
    return
}
func (stream *OutputStream) Struct_FriendMiiList(out FriendMiiList) {
    stream.UInt32LE(out.Unknown)
    stream.Struct_MiiList(out.MiiList)
    stream.UInt64LE(uint64(out.Unknown2))
    return
}
func (stream *InputStream) Struct_FriendMiiRequest() (in FriendMiiRequest) {
    in.Unknown = stream.UInt32LE()
    in.Unknown2 = DateTime(stream.UInt64LE())
    return
}
func (stream *OutputStream) Struct_FriendMiiRequest(out FriendMiiRequest) {
    stream.UInt32LE(out.Unknown)
    stream.UInt64LE(uint64(out.Unknown2))
    return
}
func (stream *InputStream) Struct_FriendPersistentInfo() (in FriendPersistentInfo) {
    in.Unknown = stream.UInt32LE()
    in.Region = stream.UInt8()
    in.Country = stream.UInt8()
    in.Area = stream.UInt8()
    in.Language = stream.UInt8()
    in.Platform = stream.UInt8()
    in.GameKey = stream.Struct_GameKey()
    in.Unknown2 = string(stream.String())
    in.Unknown3 = DateTime(stream.UInt64LE())
    in.Unknown4 = DateTime(stream.UInt64LE())
    in.Unknown5 = DateTime(stream.UInt64LE())
    return
}
func (stream *OutputStream) Struct_FriendPersistentInfo(out FriendPersistentInfo) {
    stream.UInt32LE(out.Unknown)
    stream.UInt8(out.Region)
    stream.UInt8(out.Country)
    stream.UInt8(out.Area)
    stream.UInt8(out.Language)
    stream.UInt8(out.Platform)
    stream.Struct_GameKey(out.GameKey)
    stream.String(string(out.Unknown2))
    stream.UInt64LE(uint64(out.Unknown3))
    stream.UInt64LE(uint64(out.Unknown4))
    stream.UInt64LE(uint64(out.Unknown5))
    return
}
func (stream *InputStream) Struct_FriendPicture() (in FriendPicture) {
    in.Unknown = stream.UInt32LE()
    in.Data = stream.Buffer()
    in.DateTime = DateTime(stream.UInt64LE())
    return
}
func (stream *OutputStream) Struct_FriendPicture(out FriendPicture) {
    stream.UInt32LE(out.Unknown)
    stream.Buffer(out.Data)
    stream.UInt64LE(uint64(out.DateTime))
    return
}
func (stream *InputStream) Struct_FriendPresence() (in FriendPresence) {
    in.Unknown = stream.UInt32LE()
    in.NintendoPresence = stream.Struct_NintendoPresence()
    return
}
func (stream *OutputStream) Struct_FriendPresence(out FriendPresence) {
    stream.UInt32LE(out.Unknown)
    stream.Struct_NintendoPresence(out.NintendoPresence)
    return
}
func (stream *InputStream) Struct_FriendRelationship() (in FriendRelationship) {
    in.Unknown = stream.UInt32LE()
    in.Unknown2 = stream.UInt64LE()
    in.Unknown3 = stream.UInt8()
    return
}
func (stream *OutputStream) Struct_FriendRelationship(out FriendRelationship) {
    stream.UInt32LE(out.Unknown)
    stream.UInt64LE(out.Unknown2)
    stream.UInt8(out.Unknown3)
    return
}
func (stream *InputStream) Struct_FriendRequest() (in FriendRequest) {
    in.PrincipalBasicInfo = stream.Struct_PrincipalBasicInfo()
    in.Message = stream.Struct_FriendRequestMessage()
    in.SentOn = DateTime(stream.UInt64LE())
    return
}
func (stream *OutputStream) Struct_FriendRequest(out FriendRequest) {
    stream.Struct_PrincipalBasicInfo(out.PrincipalBasicInfo)
    stream.Struct_FriendRequestMessage(out.Message)
    stream.UInt64LE(uint64(out.SentOn))
    return
}
func (stream *InputStream) Struct_FriendRequestMessage() (in FriendRequestMessage) {
    in.Unknown = stream.UInt64LE()
    in.Unknown2 = stream.UInt8()
    in.Unknown3 = stream.UInt8()
    in.Message = string(stream.String())
    in.Unknown4 = stream.UInt8()
    in.Unknown5 = string(stream.String())
    in.GameKey = stream.Struct_GameKey()
    in.Unknown6 = DateTime(stream.UInt64LE())
    in.ExpiresOn = DateTime(stream.UInt64LE())
    return
}
func (stream *OutputStream) Struct_FriendRequestMessage(out FriendRequestMessage) {
    stream.UInt64LE(out.Unknown)
    stream.UInt8(out.Unknown2)
    stream.UInt8(out.Unknown3)
    stream.String(string(out.Message))
    stream.UInt8(out.Unknown4)
    stream.String(string(out.Unknown5))
    stream.Struct_GameKey(out.GameKey)
    stream.UInt64LE(uint64(out.Unknown6))
    stream.UInt64LE(uint64(out.ExpiresOn))
    return
}
func (stream *InputStream) Struct_GameKey() (in GameKey) {
    in.TitleId = stream.UInt64LE()
    in.TitleVersion = stream.UInt16LE()
    return
}
func (stream *OutputStream) Struct_GameKey(out GameKey) {
    stream.UInt64LE(out.TitleId)
    stream.UInt16LE(out.TitleVersion)
    return
}
func (stream *InputStream) Struct_Gathering() (in Gathering) {
    in.Base = stream.Struct_Structure()
    in.IdMyself = stream.UInt32LE()
    in.PidOwner = PID(stream.UInt32LE())
    in.PidHost = PID(stream.UInt32LE())
    in.UiMinParticipants = stream.UInt16LE()
    in.UiMaxParticipants = stream.UInt16LE()
    in.UiParticipationPolicy = stream.UInt32LE()
    in.UiPolicyArgument = stream.UInt32LE()
    in.UiFlags = stream.UInt32LE()
    in.UiState = stream.UInt32LE()
    in.StrDescription = string(stream.String())
    return
}
func (stream *OutputStream) Struct_Gathering(out Gathering) {
    stream.Struct_Structure(out.Base)
    stream.UInt32LE(out.IdMyself)
    stream.UInt32LE(uint32(out.PidOwner))
    stream.UInt32LE(uint32(out.PidHost))
    stream.UInt16LE(out.UiMinParticipants)
    stream.UInt16LE(out.UiMaxParticipants)
    stream.UInt32LE(out.UiParticipationPolicy)
    stream.UInt32LE(out.UiPolicyArgument)
    stream.UInt32LE(out.UiFlags)
    stream.UInt32LE(out.UiState)
    stream.String(string(out.StrDescription))
    return
}
func (stream *InputStream) Struct_GatheringStats() (in GatheringStats) {
    in.Base = stream.Struct_Structure()
    in.PidParticipant = stream.UInt32LE()
    in.UiFlags = stream.UInt32LE()
    in.LstValues = stream.List_float32()
    return
}
func (stream *OutputStream) Struct_GatheringStats(out GatheringStats) {
    stream.Struct_Structure(out.Base)
    stream.UInt32LE(out.PidParticipant)
    stream.UInt32LE(out.UiFlags)
    stream.List_float32(out.LstValues)
    return
}
func (stream *InputStream) Struct_GatheringURLs() (in GatheringURLs) {
    in.Base = stream.Struct_Structure()
    in.Gid = stream.UInt32LE()
    in.LstStationURLs = stream.List_StationURL()
    return
}
func (stream *OutputStream) Struct_GatheringURLs(out GatheringURLs) {
    stream.Struct_Structure(out.Base)
    stream.UInt32LE(out.Gid)
    stream.List_StationURL(out.LstStationURLs)
    return
}
func (stream *InputStream) Struct_Invitation() (in Invitation) {
    in.Base = stream.Struct_Structure()
    in.IdGathering = stream.UInt32LE()
    in.IdGuest = stream.UInt32LE()
    in.StrMessage = string(stream.String())
    return
}
func (stream *OutputStream) Struct_Invitation(out Invitation) {
    stream.Struct_Structure(out.Base)
    stream.UInt32LE(out.IdGathering)
    stream.UInt32LE(out.IdGuest)
    stream.String(string(out.StrMessage))
    return
}
func (stream *InputStream) Struct_JoinMatchmakeSessionParam() (in JoinMatchmakeSessionParam) {
    in.Base = stream.Struct_Structure()
    in.Gid = stream.UInt32LE()
    in.AdditionalParticipants = stream.List_PID()
    in.GidForParticipationCheck = stream.UInt32LE()
    in.JoinMatchmakeSessionOption = stream.UInt32LE()
    in.JoinMatchmakeSessionBehavior = stream.UInt8()
    in.StrUserPassword = string(stream.String())
    in.StrSystemPassword = string(stream.String())
    in.JoinMessage = string(stream.String())
    in.ParticipationCount = stream.UInt16LE()
    in.ExtraParticipants = stream.UInt16LE()
    in.BlockListParam = stream.Struct_MatchmakeBlockListParam()
    return
}
func (stream *OutputStream) Struct_JoinMatchmakeSessionParam(out JoinMatchmakeSessionParam) {
    stream.Struct_Structure(out.Base)
    stream.UInt32LE(out.Gid)
    stream.List_PID(out.AdditionalParticipants)
    stream.UInt32LE(out.GidForParticipationCheck)
    stream.UInt32LE(out.JoinMatchmakeSessionOption)
    stream.UInt8(out.JoinMatchmakeSessionBehavior)
    stream.String(string(out.StrUserPassword))
    stream.String(string(out.StrSystemPassword))
    stream.String(string(out.JoinMessage))
    stream.UInt16LE(out.ParticipationCount)
    stream.UInt16LE(out.ExtraParticipants)
    stream.Struct_MatchmakeBlockListParam(out.BlockListParam)
    return
}
func (stream *InputStream) Struct_MatchmakeBlockListParam() (in MatchmakeBlockListParam) {
    in.Base = stream.Struct_Structure()
    in.OptionFlag = stream.UInt32LE()
    return
}
func (stream *OutputStream) Struct_MatchmakeBlockListParam(out MatchmakeBlockListParam) {
    stream.Struct_Structure(out.Base)
    stream.UInt32LE(out.OptionFlag)
    return
}
func (stream *InputStream) Struct_MatchmakeParam() (in MatchmakeParam) {
    in.Base = stream.Struct_Structure()
    in.Params = stream.Map_string_Variant()
    return
}
func (stream *OutputStream) Struct_MatchmakeParam(out MatchmakeParam) {
    stream.Struct_Structure(out.Base)
    stream.Map_string_Variant(out.Params)
    return
}
func (stream *InputStream) Struct_MatchmakeSession() (in MatchmakeSession) {
    in.Base = stream.Struct_Structure()
    in.Base2 = stream.Struct_Gathering()
    in.GameMode = stream.UInt32LE()
    in.Attribs = stream.List_uint32()
    in.OpenParticipation = stream.Bool()
    in.MatchmakeSystemType = stream.UInt32LE()
    in.ApplicationBuffer = stream.Buffer()
    in.ParticipationCount = stream.UInt32LE()
    in.ProgressScore = stream.UInt8()
    in.SessionKey = stream.Buffer()
    in.Option0 = stream.UInt32LE()
    in.MatchmakeParam = stream.Struct_MatchmakeParam()
    in.StartedTime = DateTime(stream.UInt64LE())
    in.UserPassword = string(stream.String())
    in.ReferGid = stream.UInt32LE()
    in.UserPasswordEnabled = stream.Bool()
    in.SystemPasswordEnabled = stream.Bool()
    in.Codeword = string(stream.String())
    return
}
func (stream *OutputStream) Struct_MatchmakeSession(out MatchmakeSession) {
    stream.Struct_Structure(out.Base)
    stream.Struct_Gathering(out.Base2)
    stream.UInt32LE(out.GameMode)
    stream.List_uint32(out.Attribs)
    stream.Bool(out.OpenParticipation)
    stream.UInt32LE(out.MatchmakeSystemType)
    stream.Buffer(out.ApplicationBuffer)
    stream.UInt32LE(out.ParticipationCount)
    stream.UInt8(out.ProgressScore)
    stream.Buffer(out.SessionKey)
    stream.UInt32LE(out.Option0)
    stream.Struct_MatchmakeParam(out.MatchmakeParam)
    stream.UInt64LE(uint64(out.StartedTime))
    stream.String(string(out.UserPassword))
    stream.UInt32LE(out.ReferGid)
    stream.Bool(out.UserPasswordEnabled)
    stream.Bool(out.SystemPasswordEnabled)
    stream.String(string(out.Codeword))
    return
}
func (stream *InputStream) Struct_MatchmakeSessionSearchCriteria() (in MatchmakeSessionSearchCriteria) {
    in.Base = stream.Struct_Structure()
    in.Attribs = stream.List_string()
    in.GameMode = string(stream.String())
    in.MinParticipants = string(stream.String())
    in.MaxParticipants = string(stream.String())
    in.MatchmakeSystemType = string(stream.String())
    in.VacantOnly = stream.Bool()
    in.ExcludeLocked = stream.Bool()
    in.ExcludeNonHostPid = stream.Bool()
    in.SelectionMethod = stream.UInt32LE()
    in.VacantParticipants = stream.UInt16LE()
    in.MatchmakeParam = stream.Struct_MatchmakeParam()
    in.ExcludeUserPasswordSet = stream.Bool()
    in.ExcludeSystemPasswordSet = stream.Bool()
    in.ReferGid = stream.UInt32LE()
    in.Codeword = string(stream.String())
    in.ResultRange = stream.Struct_ResultRange()
    return
}
func (stream *OutputStream) Struct_MatchmakeSessionSearchCriteria(out MatchmakeSessionSearchCriteria) {
    stream.Struct_Structure(out.Base)
    stream.List_string(out.Attribs)
    stream.String(string(out.GameMode))
    stream.String(string(out.MinParticipants))
    stream.String(string(out.MaxParticipants))
    stream.String(string(out.MatchmakeSystemType))
    stream.Bool(out.VacantOnly)
    stream.Bool(out.ExcludeLocked)
    stream.Bool(out.ExcludeNonHostPid)
    stream.UInt32LE(out.SelectionMethod)
    stream.UInt16LE(out.VacantParticipants)
    stream.Struct_MatchmakeParam(out.MatchmakeParam)
    stream.Bool(out.ExcludeUserPasswordSet)
    stream.Bool(out.ExcludeSystemPasswordSet)
    stream.UInt32LE(out.ReferGid)
    stream.String(string(out.Codeword))
    stream.Struct_ResultRange(out.ResultRange)
    return
}
func (stream *InputStream) Struct_MessageRecipient() (in MessageRecipient) {
    in.UiRecipientType = stream.UInt32LE()
    in.PrincipalId = PID(stream.UInt32LE())
    in.GatheringId = stream.UInt32LE()
    return
}
func (stream *OutputStream) Struct_MessageRecipient(out MessageRecipient) {
    stream.UInt32LE(out.UiRecipientType)
    stream.UInt32LE(uint32(out.PrincipalId))
    stream.UInt32LE(out.GatheringId)
    return
}
func (stream *InputStream) Struct_Mii() (in Mii) {
    in.Unknown = string(stream.String())
    in.Unknown2 = stream.Bool()
    in.Unknown3 = stream.UInt8()
    in.MiiData = stream.Buffer()
    return
}
func (stream *OutputStream) Struct_Mii(out Mii) {
    stream.String(string(out.Unknown))
    stream.Bool(out.Unknown2)
    stream.UInt8(out.Unknown3)
    stream.Buffer(out.MiiData)
    return
}
func (stream *InputStream) Struct_MiiList() (in MiiList) {
    in.Unknown = string(stream.String())
    in.Unknown2 = stream.Bool()
    in.Unknown3 = stream.UInt8()
    in.MiiDataList = stream.List_Buffer()
    return
}
func (stream *OutputStream) Struct_MiiList(out MiiList) {
    stream.String(string(out.Unknown))
    stream.Bool(out.Unknown2)
    stream.UInt8(out.Unknown3)
    stream.List_Buffer(out.MiiDataList)
    return
}
func (stream *InputStream) Struct_MiiV2() (in MiiV2) {
    in.Name = string(stream.String())
    in.Unknown = stream.UInt8()
    in.Unknown2 = stream.UInt8()
    in.MiiDataFFLStoreData = stream.Buffer()
    in.Unknown3 = DateTime(stream.UInt64LE())
    return
}
func (stream *OutputStream) Struct_MiiV2(out MiiV2) {
    stream.String(string(out.Name))
    stream.UInt8(out.Unknown)
    stream.UInt8(out.Unknown2)
    stream.Buffer(out.MiiDataFFLStoreData)
    stream.UInt64LE(uint64(out.Unknown3))
    return
}
func (stream *InputStream) Struct_MyProfile() (in MyProfile) {
    in.Region = stream.UInt8()
    in.Country = stream.UInt8()
    in.Area = stream.UInt8()
    in.Language = stream.UInt8()
    in.Platform = stream.UInt8()
    in.Unknown = stream.UInt64LE()
    in.Unknown2 = string(stream.String())
    in.Unknown3 = string(stream.String())
    return
}
func (stream *OutputStream) Struct_MyProfile(out MyProfile) {
    stream.UInt8(out.Region)
    stream.UInt8(out.Country)
    stream.UInt8(out.Area)
    stream.UInt8(out.Language)
    stream.UInt8(out.Platform)
    stream.UInt64LE(out.Unknown)
    stream.String(string(out.Unknown2))
    stream.String(string(out.Unknown3))
    return
}
func (stream *InputStream) Struct_NNAInfo() (in NNAInfo) {
    in.PrincipalBasicInfo = stream.Struct_PrincipalBasicInfo()
    in.Unknown = stream.UInt8()
    in.Unknown2 = stream.UInt8()
    return
}
func (stream *OutputStream) Struct_NNAInfo(out NNAInfo) {
    stream.Struct_PrincipalBasicInfo(out.PrincipalBasicInfo)
    stream.UInt8(out.Unknown)
    stream.UInt8(out.Unknown2)
    return
}
func (stream *InputStream) Struct_NintendoNotificationEvent() (in NintendoNotificationEvent) {
    in.Base = stream.Struct_Structure()
    in.UiType = stream.UInt32LE()
    in.PidSender = PID(stream.UInt32LE())
    in.Dataholder = stream.Struct_Data()
    return
}
func (stream *OutputStream) Struct_NintendoNotificationEvent(out NintendoNotificationEvent) {
    stream.Struct_Structure(out.Base)
    stream.UInt32LE(out.UiType)
    stream.UInt32LE(uint32(out.PidSender))
    stream.Struct_Data(out.Dataholder)
    return
}
func (stream *InputStream) Struct_NintendoNotificationEventGeneral() (in NintendoNotificationEventGeneral) {
    in.Base = stream.Struct_Structure()
    in.U32Param = stream.UInt32LE()
    in.U64Param1 = stream.UInt64LE()
    in.U64Param2 = stream.UInt64LE()
    in.StrParam = string(stream.String())
    return
}
func (stream *OutputStream) Struct_NintendoNotificationEventGeneral(out NintendoNotificationEventGeneral) {
    stream.Struct_Structure(out.Base)
    stream.UInt32LE(out.U32Param)
    stream.UInt64LE(out.U64Param1)
    stream.UInt64LE(out.U64Param2)
    stream.String(string(out.StrParam))
    return
}
func (stream *InputStream) Struct_NintendoNotificationEventProfile() (in NintendoNotificationEventProfile) {
    in.Base = stream.Struct_Structure()
    in.Region = stream.UInt8()
    in.Country = stream.UInt8()
    in.Area = stream.UInt8()
    in.Language = stream.UInt8()
    in.Platform = stream.UInt8()
    return
}
func (stream *OutputStream) Struct_NintendoNotificationEventProfile(out NintendoNotificationEventProfile) {
    stream.Struct_Structure(out.Base)
    stream.UInt8(out.Region)
    stream.UInt8(out.Country)
    stream.UInt8(out.Area)
    stream.UInt8(out.Language)
    stream.UInt8(out.Platform)
    return
}
func (stream *InputStream) Struct_NintendoPresence() (in NintendoPresence) {
    in.ChangedBitFlag = stream.UInt32LE()
    in.GameKey = stream.Struct_GameKey()
    in.GameModeDescription = string(stream.String())
    in.JoinAvailabilityFlag = stream.UInt32LE()
    in.MatchmakeSystemType = stream.UInt8()
    in.JoinGameID = stream.UInt32LE()
    in.JoinGameMode = stream.UInt32LE()
    in.OwnerPrincipalID = PID(stream.UInt32LE())
    in.JoinGroupID = stream.UInt32LE()
    in.ApplicationArg = stream.Buffer()
    return
}
func (stream *OutputStream) Struct_NintendoPresence(out NintendoPresence) {
    stream.UInt32LE(out.ChangedBitFlag)
    stream.Struct_GameKey(out.GameKey)
    stream.String(string(out.GameModeDescription))
    stream.UInt32LE(out.JoinAvailabilityFlag)
    stream.UInt8(out.MatchmakeSystemType)
    stream.UInt32LE(out.JoinGameID)
    stream.UInt32LE(out.JoinGameMode)
    stream.UInt32LE(uint32(out.OwnerPrincipalID))
    stream.UInt32LE(out.JoinGroupID)
    stream.Buffer(out.ApplicationArg)
    return
}
func (stream *InputStream) Struct_NintendoPresenceV2() (in NintendoPresenceV2) {
    in.ChangedFlags = stream.UInt32LE()
    in.IsOnline = stream.Bool()
    in.GameKey = stream.Struct_GameKey()
    in.Unknown1 = stream.UInt8()
    in.Message = string(stream.String())
    in.Unknown2 = stream.UInt32LE()
    in.Unknown3 = stream.UInt8()
    in.GameServerId = stream.UInt32LE()
    in.Unknown4 = stream.UInt32LE()
    in.Pid = PID(stream.UInt32LE())
    in.GatheringId = stream.UInt32LE()
    in.ApplicationData = stream.Buffer()
    in.Unknown5 = stream.UInt8()
    in.Unknown6 = stream.UInt8()
    in.Unknown7 = stream.UInt8()
    return
}
func (stream *OutputStream) Struct_NintendoPresenceV2(out NintendoPresenceV2) {
    stream.UInt32LE(out.ChangedFlags)
    stream.Bool(out.IsOnline)
    stream.Struct_GameKey(out.GameKey)
    stream.UInt8(out.Unknown1)
    stream.String(string(out.Message))
    stream.UInt32LE(out.Unknown2)
    stream.UInt8(out.Unknown3)
    stream.UInt32LE(out.GameServerId)
    stream.UInt32LE(out.Unknown4)
    stream.UInt32LE(uint32(out.Pid))
    stream.UInt32LE(out.GatheringId)
    stream.Buffer(out.ApplicationData)
    stream.UInt8(out.Unknown5)
    stream.UInt8(out.Unknown6)
    stream.UInt8(out.Unknown7)
    return
}
func (stream *InputStream) Struct_NotificationEvent() (in NotificationEvent) {
    in.Base = stream.Struct_Structure()
    in.PidSource = PID(stream.UInt32LE())
    in.UiType = stream.UInt32LE()
    in.UiParam1 = stream.UInt32LE()
    in.UiParam2 = stream.UInt32LE()
    in.StrParam = string(stream.String())
    return
}
func (stream *OutputStream) Struct_NotificationEvent(out NotificationEvent) {
    stream.Struct_Structure(out.Base)
    stream.UInt32LE(uint32(out.PidSource))
    stream.UInt32LE(out.UiType)
    stream.UInt32LE(out.UiParam1)
    stream.UInt32LE(out.UiParam2)
    stream.String(string(out.StrParam))
    return
}
func (stream *InputStream) Struct_ParticipantDetails() (in ParticipantDetails) {
    in.Base = stream.Struct_Structure()
    in.IdParticipant = stream.UInt32LE()
    in.StrName = string(stream.String())
    in.StrMessage = string(stream.String())
    in.UiParticipants = stream.UInt16LE()
    return
}
func (stream *OutputStream) Struct_ParticipantDetails(out ParticipantDetails) {
    stream.Struct_Structure(out.Base)
    stream.UInt32LE(out.IdParticipant)
    stream.String(string(out.StrName))
    stream.String(string(out.StrMessage))
    stream.UInt16LE(out.UiParticipants)
    return
}
func (stream *InputStream) Struct_PersistentGathering() (in PersistentGathering) {
    in.Base = stream.Struct_Structure()
    in.Base2 = stream.Struct_Gathering()
    in.CommunityType = stream.UInt32LE()
    in.Password = string(stream.String())
    in.Attribs = stream.List_uint32()
    in.ApplicationBuffer = stream.Buffer()
    in.ParticipationStartDate = DateTime(stream.UInt64LE())
    in.ParticipationEndDate = DateTime(stream.UInt64LE())
    in.MatchmakeSessionCount = stream.UInt32LE()
    in.ParticipationCount = stream.UInt32LE()
    return
}
func (stream *OutputStream) Struct_PersistentGathering(out PersistentGathering) {
    stream.Struct_Structure(out.Base)
    stream.Struct_Gathering(out.Base2)
    stream.UInt32LE(out.CommunityType)
    stream.String(string(out.Password))
    stream.List_uint32(out.Attribs)
    stream.Buffer(out.ApplicationBuffer)
    stream.UInt64LE(uint64(out.ParticipationStartDate))
    stream.UInt64LE(uint64(out.ParticipationEndDate))
    stream.UInt32LE(out.MatchmakeSessionCount)
    stream.UInt32LE(out.ParticipationCount)
    return
}
func (stream *InputStream) Struct_PersistentNotification() (in PersistentNotification) {
    in.Unknown = stream.UInt64LE()
    in.Unknown2 = stream.UInt32LE()
    in.Unknown3 = stream.UInt32LE()
    in.Unknown4 = stream.UInt32LE()
    in.Unknown5 = string(stream.String())
    return
}
func (stream *OutputStream) Struct_PersistentNotification(out PersistentNotification) {
    stream.UInt64LE(out.Unknown)
    stream.UInt32LE(out.Unknown2)
    stream.UInt32LE(out.Unknown3)
    stream.UInt32LE(out.Unknown4)
    stream.String(string(out.Unknown5))
    return
}
func (stream *InputStream) Struct_PlayedGame() (in PlayedGame) {
    in.GameKey = stream.Struct_GameKey()
    in.DateTime = DateTime(stream.UInt64LE())
    return
}
func (stream *OutputStream) Struct_PlayedGame(out PlayedGame) {
    stream.Struct_GameKey(out.GameKey)
    stream.UInt64LE(uint64(out.DateTime))
    return
}
func (stream *InputStream) Struct_PlayingSession() (in PlayingSession) {
    in.Base = stream.Struct_Structure()
    in.PrincipalId = PID(stream.UInt32LE())
    in.Gathering = stream.Struct_Data()
    return
}
func (stream *OutputStream) Struct_PlayingSession(out PlayingSession) {
    stream.Struct_Structure(out.Base)
    stream.UInt32LE(uint32(out.PrincipalId))
    stream.Struct_Data(out.Gathering)
    return
}
func (stream *InputStream) Struct_PrincipalBasicInfo() (in PrincipalBasicInfo) {
    in.Pid = PID(stream.UInt32LE())
    in.NNID = string(stream.String())
    in.Mii = stream.Struct_MiiV2()
    in.Unknown = stream.UInt8()
    return
}
func (stream *OutputStream) Struct_PrincipalBasicInfo(out PrincipalBasicInfo) {
    stream.UInt32LE(uint32(out.Pid))
    stream.String(string(out.NNID))
    stream.Struct_MiiV2(out.Mii)
    stream.UInt8(out.Unknown)
    return
}
func (stream *InputStream) Struct_PrincipalPreference() (in PrincipalPreference) {
    in.Unknown = stream.Bool()
    in.Unknown2 = stream.Bool()
    in.Unknown3 = stream.Bool()
    return
}
func (stream *OutputStream) Struct_PrincipalPreference(out PrincipalPreference) {
    stream.Bool(out.Unknown)
    stream.Bool(out.Unknown2)
    stream.Bool(out.Unknown3)
    return
}
func (stream *InputStream) Struct_PrincipalRequestBlockSetting() (in PrincipalRequestBlockSetting) {
    in.Unknown = stream.UInt32LE()
    in.Unknown2 = stream.Bool()
    return
}
func (stream *OutputStream) Struct_PrincipalRequestBlockSetting(out PrincipalRequestBlockSetting) {
    stream.UInt32LE(out.Unknown)
    stream.Bool(out.Unknown2)
    return
}
func (stream *InputStream) Struct_RVConnectionData() (in RVConnectionData) {
    in.UrlRegularProtocols = string(stream.String())
    in.LstSpecialProtocols = stream.List_uint8()
    in.UrlSpecialProtocols = string(stream.String())
    return
}
func (stream *OutputStream) Struct_RVConnectionData(out RVConnectionData) {
    stream.String(string(out.UrlRegularProtocols))
    stream.List_uint8(out.LstSpecialProtocols)
    stream.String(string(out.UrlSpecialProtocols))
    return
}
func (stream *InputStream) Struct_RankingCachedResult() (in RankingCachedResult) {
    in.CreatedTime = DateTime(stream.UInt64LE())
    in.ExpiredTime = DateTime(stream.UInt64LE())
    in.MaxLength = stream.UInt8()
    return
}
func (stream *OutputStream) Struct_RankingCachedResult(out RankingCachedResult) {
    stream.UInt64LE(uint64(out.CreatedTime))
    stream.UInt64LE(uint64(out.ExpiredTime))
    stream.UInt8(out.MaxLength)
    return
}
func (stream *InputStream) Struct_RankingChangeAttributesParam() (in RankingChangeAttributesParam) {
    in.Base = stream.Struct_Structure()
    in.ModificationFlag = stream.UInt8()
    in.Groups = stream.List_uint8()
    in.Param = stream.UInt64LE()
    return
}
func (stream *OutputStream) Struct_RankingChangeAttributesParam(out RankingChangeAttributesParam) {
    stream.Struct_Structure(out.Base)
    stream.UInt8(out.ModificationFlag)
    stream.List_uint8(out.Groups)
    stream.UInt64LE(out.Param)
    return
}
func (stream *InputStream) Struct_RankingOrderParam() (in RankingOrderParam) {
    in.Base = stream.Struct_Structure()
    in.OrderCalculation = stream.UInt8()
    in.GroupIndex = stream.UInt8()
    in.GroupNum = stream.UInt8()
    in.TimeScope = stream.UInt8()
    in.Offset = stream.UInt32LE()
    in.Length = stream.UInt8()
    return
}
func (stream *OutputStream) Struct_RankingOrderParam(out RankingOrderParam) {
    stream.Struct_Structure(out.Base)
    stream.UInt8(out.OrderCalculation)
    stream.UInt8(out.GroupIndex)
    stream.UInt8(out.GroupNum)
    stream.UInt8(out.TimeScope)
    stream.UInt32LE(out.Offset)
    stream.UInt8(out.Length)
    return
}
func (stream *InputStream) Struct_RankingRankData() (in RankingRankData) {
    in.Base = stream.Struct_Structure()
    in.PrincipalId = PID(stream.UInt32LE())
    in.UniqueId = stream.UInt64LE()
    in.Order = stream.UInt32LE()
    in.Category = stream.UInt32LE()
    in.Score = stream.UInt32LE()
    in.Groups = stream.List_uint8()
    in.Param = stream.UInt64LE()
    in.CommonData = stream.Buffer()
    return
}
func (stream *OutputStream) Struct_RankingRankData(out RankingRankData) {
    stream.Struct_Structure(out.Base)
    stream.UInt32LE(uint32(out.PrincipalId))
    stream.UInt64LE(out.UniqueId)
    stream.UInt32LE(out.Order)
    stream.UInt32LE(out.Category)
    stream.UInt32LE(out.Score)
    stream.List_uint8(out.Groups)
    stream.UInt64LE(out.Param)
    stream.Buffer(out.CommonData)
    return
}
func (stream *InputStream) Struct_RankingResult() (in RankingResult) {
    in.Base = stream.Struct_Structure()
    in.RankDataList = stream.List_RankingRankData()
    in.TotalCount = stream.UInt32LE()
    in.SinceTime = DateTime(stream.UInt64LE())
    return
}
func (stream *OutputStream) Struct_RankingResult(out RankingResult) {
    stream.Struct_Structure(out.Base)
    stream.List_RankingRankData(out.RankDataList)
    stream.UInt32LE(out.TotalCount)
    stream.UInt64LE(uint64(out.SinceTime))
    return
}
func (stream *InputStream) Struct_RankingScoreData() (in RankingScoreData) {
    in.Base = stream.Struct_Structure()
    in.PrincipalId = PID(stream.UInt32LE())
    in.UniqueId = stream.UInt64LE()
    in.Order = stream.UInt32LE()
    in.Category = stream.UInt32LE()
    in.Score = stream.UInt32LE()
    in.Groups = stream.List_uint8()
    in.Param = stream.UInt64LE()
    in.CommonData = stream.Buffer()
    return
}
func (stream *OutputStream) Struct_RankingScoreData(out RankingScoreData) {
    stream.Struct_Structure(out.Base)
    stream.UInt32LE(uint32(out.PrincipalId))
    stream.UInt64LE(out.UniqueId)
    stream.UInt32LE(out.Order)
    stream.UInt32LE(out.Category)
    stream.UInt32LE(out.Score)
    stream.List_uint8(out.Groups)
    stream.UInt64LE(out.Param)
    stream.Buffer(out.CommonData)
    return
}
func (stream *InputStream) Struct_RankingStats() (in RankingStats) {
    in.Base = stream.Struct_Structure()
    in.StatsList = stream.List_float64()
    return
}
func (stream *OutputStream) Struct_RankingStats(out RankingStats) {
    stream.Struct_Structure(out.Base)
    stream.List_float64(out.StatsList)
    return
}
func (stream *InputStream) Struct_RelationshipData() (in RelationshipData) {
    in.Pid = stream.UInt32LE()
    in.StrName = string(stream.String())
    in.ByRelationship = stream.UInt8()
    in.UiDetails = stream.UInt32LE()
    in.ByStatus = stream.UInt8()
    return
}
func (stream *OutputStream) Struct_RelationshipData(out RelationshipData) {
    stream.UInt32LE(out.Pid)
    stream.String(string(out.StrName))
    stream.UInt8(out.ByRelationship)
    stream.UInt32LE(out.UiDetails)
    stream.UInt8(out.ByStatus)
    return
}
func (stream *InputStream) Struct_ResultRange() (in ResultRange) {
    in.Base = stream.Struct_Structure()
    in.UiOffset = stream.UInt32LE()
    in.UiSize = stream.UInt32LE()
    return
}
func (stream *OutputStream) Struct_ResultRange(out ResultRange) {
    stream.Struct_Structure(out.Base)
    stream.UInt32LE(out.UiOffset)
    stream.UInt32LE(out.UiSize)
    return
}
func (stream *InputStream) Struct_SimpleCommunity() (in SimpleCommunity) {
    in.Base = stream.Struct_Structure()
    in.GatheringID = stream.UInt32LE()
    in.MatchmakeSessionCount = stream.UInt32LE()
    return
}
func (stream *OutputStream) Struct_SimpleCommunity(out SimpleCommunity) {
    stream.Struct_Structure(out.Base)
    stream.UInt32LE(out.GatheringID)
    stream.UInt32LE(out.MatchmakeSessionCount)
    return
}
func (stream *InputStream) Struct_SimplePlayingSession() (in SimplePlayingSession) {
    in.Base = stream.Struct_Structure()
    in.PrincipalID = PID(stream.UInt32LE())
    in.GatheringID = stream.UInt32LE()
    in.GameMode = stream.UInt32LE()
    in.Attribute_0 = stream.UInt32LE()
    return
}
func (stream *OutputStream) Struct_SimplePlayingSession(out SimplePlayingSession) {
    stream.Struct_Structure(out.Base)
    stream.UInt32LE(uint32(out.PrincipalID))
    stream.UInt32LE(out.GatheringID)
    stream.UInt32LE(out.GameMode)
    stream.UInt32LE(out.Attribute_0)
    return
}
func (stream *InputStream) Struct_Structure() (in Structure) {
    return
}
func (stream *OutputStream) Struct_Structure(out Structure) {
    return
}
func (stream *InputStream) Struct_UniqueIdInfo() (in UniqueIdInfo) {
    in.Base = stream.Struct_Structure()
    in.NexUniqueId = stream.UInt64LE()
    in.NexUniqueIdPassword = stream.UInt64LE()
    return
}
func (stream *OutputStream) Struct_UniqueIdInfo(out UniqueIdInfo) {
    stream.Struct_Structure(out.Base)
    stream.UInt64LE(out.NexUniqueId)
    stream.UInt64LE(out.NexUniqueIdPassword)
    return
}
func (stream *InputStream) Struct_UpdateMatchmakeSessionParam() (in UpdateMatchmakeSessionParam) {
    in.Base = stream.Struct_Structure()
    in.Gid = stream.UInt32LE()
    in.ModificationFlag = stream.UInt32LE()
    in.Attributes = stream.List_uint32()
    in.OpenParticipation = stream.Bool()
    in.ApplicationBuffer = stream.Buffer()
    in.ProgressScore = stream.UInt8()
    in.MatchmakeParam = stream.Struct_MatchmakeParam()
    in.StartedTime = DateTime(stream.UInt64LE())
    in.UserPassword = string(stream.String())
    in.GameMode = stream.UInt32LE()
    in.Description = string(stream.String())
    in.MinParticipants = stream.UInt16LE()
    in.MaxParticipants = stream.UInt16LE()
    in.MatchmakeSystemType = stream.UInt32LE()
    in.ParticipationPolicy = stream.UInt32LE()
    in.PolicyArgument = stream.UInt32LE()
    in.Codeword = string(stream.String())
    return
}
func (stream *OutputStream) Struct_UpdateMatchmakeSessionParam(out UpdateMatchmakeSessionParam) {
    stream.Struct_Structure(out.Base)
    stream.UInt32LE(out.Gid)
    stream.UInt32LE(out.ModificationFlag)
    stream.List_uint32(out.Attributes)
    stream.Bool(out.OpenParticipation)
    stream.Buffer(out.ApplicationBuffer)
    stream.UInt8(out.ProgressScore)
    stream.Struct_MatchmakeParam(out.MatchmakeParam)
    stream.UInt64LE(uint64(out.StartedTime))
    stream.String(string(out.UserPassword))
    stream.UInt32LE(out.GameMode)
    stream.String(string(out.Description))
    stream.UInt16LE(out.MinParticipants)
    stream.UInt16LE(out.MaxParticipants)
    stream.UInt32LE(out.MatchmakeSystemType)
    stream.UInt32LE(out.ParticipationPolicy)
    stream.UInt32LE(out.PolicyArgument)
    stream.String(string(out.Codeword))
    return
}
func (stream *InputStream) Struct_UserMessage() (in UserMessage) {
    in.UiID = stream.UInt32LE()
    in.UiParentID = stream.UInt32LE()
    in.PidSender = PID(stream.UInt32LE())
    in.Receptiontime = DateTime(stream.UInt64LE())
    in.UiLifeTime = stream.UInt32LE()
    in.UiFlags = stream.UInt32LE()
    in.StrSubject = string(stream.String())
    in.StrSender = string(stream.String())
    in.MessageRecipient = stream.Struct_MessageRecipient()
    return
}
func (stream *OutputStream) Struct_UserMessage(out UserMessage) {
    stream.UInt32LE(out.UiID)
    stream.UInt32LE(out.UiParentID)
    stream.UInt32LE(uint32(out.PidSender))
    stream.UInt64LE(uint64(out.Receptiontime))
    stream.UInt32LE(out.UiLifeTime)
    stream.UInt32LE(out.UiFlags)
    stream.String(string(out.StrSubject))
    stream.String(string(out.StrSender))
    stream.Struct_MessageRecipient(out.MessageRecipient)
    return
}
func (stream *InputStream) List_BasicAccountInfo() []BasicAccountInfo {
    list_len := int(stream.UInt32LE())
    list := make([]BasicAccountInfo, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_BasicAccountInfo()
	}
	return list
}
func (stream *OutputStream) List_BasicAccountInfo(out []BasicAccountInfo) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_BasicAccountInfo(item)
	}
	return
}
func (stream *InputStream) List_BlacklistedPrincipal() []BlacklistedPrincipal {
    list_len := int(stream.UInt32LE())
    list := make([]BlacklistedPrincipal, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_BlacklistedPrincipal()
	}
	return list
}
func (stream *OutputStream) List_BlacklistedPrincipal(out []BlacklistedPrincipal) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_BlacklistedPrincipal(item)
	}
	return
}
func (stream *InputStream) List_Buffer() []Buffer {
    list_len := int(stream.UInt32LE())
    list := make([]Buffer, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Buffer()
	}
	return list
}
func (stream *OutputStream) List_Buffer(out []Buffer) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Buffer(item)
	}
	return
}
func (stream *InputStream) List_BufferQueueParam() []BufferQueueParam {
    list_len := int(stream.UInt32LE())
    list := make([]BufferQueueParam, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_BufferQueueParam()
	}
	return list
}
func (stream *OutputStream) List_BufferQueueParam(out []BufferQueueParam) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_BufferQueueParam(item)
	}
	return
}
func (stream *InputStream) List_ConnectionData() []ConnectionData {
    list_len := int(stream.UInt32LE())
    list := make([]ConnectionData, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_ConnectionData()
	}
	return list
}
func (stream *OutputStream) List_ConnectionData(out []ConnectionData) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_ConnectionData(item)
	}
	return
}
func (stream *InputStream) List_Data() []Data {
    list_len := int(stream.UInt32LE())
    list := make([]Data, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_Data()
	}
	return list
}
func (stream *OutputStream) List_Data(out []Data) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_Data(item)
	}
	return
}
func (stream *InputStream) List_DataStoreChangeMetaParam() []DataStoreChangeMetaParam {
    list_len := int(stream.UInt32LE())
    list := make([]DataStoreChangeMetaParam, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_DataStoreChangeMetaParam()
	}
	return list
}
func (stream *OutputStream) List_DataStoreChangeMetaParam(out []DataStoreChangeMetaParam) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_DataStoreChangeMetaParam(item)
	}
	return
}
func (stream *InputStream) List_DataStoreChangeMetaParamV1() []DataStoreChangeMetaParamV1 {
    list_len := int(stream.UInt32LE())
    list := make([]DataStoreChangeMetaParamV1, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_DataStoreChangeMetaParamV1()
	}
	return list
}
func (stream *OutputStream) List_DataStoreChangeMetaParamV1(out []DataStoreChangeMetaParamV1) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_DataStoreChangeMetaParamV1(item)
	}
	return
}
func (stream *InputStream) List_DataStoreDeleteParam() []DataStoreDeleteParam {
    list_len := int(stream.UInt32LE())
    list := make([]DataStoreDeleteParam, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_DataStoreDeleteParam()
	}
	return list
}
func (stream *OutputStream) List_DataStoreDeleteParam(out []DataStoreDeleteParam) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_DataStoreDeleteParam(item)
	}
	return
}
func (stream *InputStream) List_DataStoreFetchMyInfosBalloonResult() []DataStoreFetchMyInfosBalloonResult {
    list_len := int(stream.UInt32LE())
    list := make([]DataStoreFetchMyInfosBalloonResult, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_DataStoreFetchMyInfosBalloonResult()
	}
	return list
}
func (stream *OutputStream) List_DataStoreFetchMyInfosBalloonResult(out []DataStoreFetchMyInfosBalloonResult) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_DataStoreFetchMyInfosBalloonResult(item)
	}
	return
}
func (stream *InputStream) List_DataStoreGetMetaParam() []DataStoreGetMetaParam {
    list_len := int(stream.UInt32LE())
    list := make([]DataStoreGetMetaParam, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_DataStoreGetMetaParam()
	}
	return list
}
func (stream *OutputStream) List_DataStoreGetMetaParam(out []DataStoreGetMetaParam) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_DataStoreGetMetaParam(item)
	}
	return
}
func (stream *InputStream) List_DataStoreKeyValue() []DataStoreKeyValue {
    list_len := int(stream.UInt32LE())
    list := make([]DataStoreKeyValue, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_DataStoreKeyValue()
	}
	return list
}
func (stream *OutputStream) List_DataStoreKeyValue(out []DataStoreKeyValue) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_DataStoreKeyValue(item)
	}
	return
}
func (stream *InputStream) List_DataStoreMetaInfo() []DataStoreMetaInfo {
    list_len := int(stream.UInt32LE())
    list := make([]DataStoreMetaInfo, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_DataStoreMetaInfo()
	}
	return list
}
func (stream *OutputStream) List_DataStoreMetaInfo(out []DataStoreMetaInfo) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_DataStoreMetaInfo(item)
	}
	return
}
func (stream *InputStream) List_DataStoreNotification() []DataStoreNotification {
    list_len := int(stream.UInt32LE())
    list := make([]DataStoreNotification, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_DataStoreNotification()
	}
	return list
}
func (stream *OutputStream) List_DataStoreNotification(out []DataStoreNotification) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_DataStoreNotification(item)
	}
	return
}
func (stream *InputStream) List_DataStoreNotificationV1() []DataStoreNotificationV1 {
    list_len := int(stream.UInt32LE())
    list := make([]DataStoreNotificationV1, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_DataStoreNotificationV1()
	}
	return list
}
func (stream *OutputStream) List_DataStoreNotificationV1(out []DataStoreNotificationV1) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_DataStoreNotificationV1(item)
	}
	return
}
func (stream *InputStream) List_DataStorePasswordInfo() []DataStorePasswordInfo {
    list_len := int(stream.UInt32LE())
    list := make([]DataStorePasswordInfo, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_DataStorePasswordInfo()
	}
	return list
}
func (stream *OutputStream) List_DataStorePasswordInfo(out []DataStorePasswordInfo) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_DataStorePasswordInfo(item)
	}
	return
}
func (stream *InputStream) List_DataStorePersistenceInfo() []DataStorePersistenceInfo {
    list_len := int(stream.UInt32LE())
    list := make([]DataStorePersistenceInfo, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_DataStorePersistenceInfo()
	}
	return list
}
func (stream *OutputStream) List_DataStorePersistenceInfo(out []DataStorePersistenceInfo) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_DataStorePersistenceInfo(item)
	}
	return
}
func (stream *InputStream) List_DataStorePreparePostParam() []DataStorePreparePostParam {
    list_len := int(stream.UInt32LE())
    list := make([]DataStorePreparePostParam, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_DataStorePreparePostParam()
	}
	return list
}
func (stream *OutputStream) List_DataStorePreparePostParam(out []DataStorePreparePostParam) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_DataStorePreparePostParam(item)
	}
	return
}
func (stream *InputStream) List_DataStoreRateObjectParam() []DataStoreRateObjectParam {
    list_len := int(stream.UInt32LE())
    list := make([]DataStoreRateObjectParam, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_DataStoreRateObjectParam()
	}
	return list
}
func (stream *OutputStream) List_DataStoreRateObjectParam(out []DataStoreRateObjectParam) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_DataStoreRateObjectParam(item)
	}
	return
}
func (stream *InputStream) List_DataStoreRatingInfo() []DataStoreRatingInfo {
    list_len := int(stream.UInt32LE())
    list := make([]DataStoreRatingInfo, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_DataStoreRatingInfo()
	}
	return list
}
func (stream *OutputStream) List_DataStoreRatingInfo(out []DataStoreRatingInfo) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_DataStoreRatingInfo(item)
	}
	return
}
func (stream *InputStream) List_DataStoreRatingInfoWithSlot() []DataStoreRatingInfoWithSlot {
    list_len := int(stream.UInt32LE())
    list := make([]DataStoreRatingInfoWithSlot, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_DataStoreRatingInfoWithSlot()
	}
	return list
}
func (stream *OutputStream) List_DataStoreRatingInfoWithSlot(out []DataStoreRatingInfoWithSlot) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_DataStoreRatingInfoWithSlot(item)
	}
	return
}
func (stream *InputStream) List_DataStoreRatingInitParamWithSlot() []DataStoreRatingInitParamWithSlot {
    list_len := int(stream.UInt32LE())
    list := make([]DataStoreRatingInitParamWithSlot, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_DataStoreRatingInitParamWithSlot()
	}
	return list
}
func (stream *OutputStream) List_DataStoreRatingInitParamWithSlot(out []DataStoreRatingInitParamWithSlot) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_DataStoreRatingInitParamWithSlot(item)
	}
	return
}
func (stream *InputStream) List_DataStoreRatingTarget() []DataStoreRatingTarget {
    list_len := int(stream.UInt32LE())
    list := make([]DataStoreRatingTarget, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_DataStoreRatingTarget()
	}
	return list
}
func (stream *OutputStream) List_DataStoreRatingTarget(out []DataStoreRatingTarget) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_DataStoreRatingTarget(item)
	}
	return
}
func (stream *InputStream) List_DataStoreReqGetInfo() []DataStoreReqGetInfo {
    list_len := int(stream.UInt32LE())
    list := make([]DataStoreReqGetInfo, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_DataStoreReqGetInfo()
	}
	return list
}
func (stream *OutputStream) List_DataStoreReqGetInfo(out []DataStoreReqGetInfo) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_DataStoreReqGetInfo(item)
	}
	return
}
func (stream *InputStream) List_DataStoreSearchBalloonResult() []DataStoreSearchBalloonResult {
    list_len := int(stream.UInt32LE())
    list := make([]DataStoreSearchBalloonResult, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_DataStoreSearchBalloonResult()
	}
	return list
}
func (stream *OutputStream) List_DataStoreSearchBalloonResult(out []DataStoreSearchBalloonResult) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_DataStoreSearchBalloonResult(item)
	}
	return
}
func (stream *InputStream) List_DataStoreSearchBalloonResultSet() []DataStoreSearchBalloonResultSet {
    list_len := int(stream.UInt32LE())
    list := make([]DataStoreSearchBalloonResultSet, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_DataStoreSearchBalloonResultSet()
	}
	return list
}
func (stream *OutputStream) List_DataStoreSearchBalloonResultSet(out []DataStoreSearchBalloonResultSet) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_DataStoreSearchBalloonResultSet(item)
	}
	return
}
func (stream *InputStream) List_DataStoreSpecificMetaInfo() []DataStoreSpecificMetaInfo {
    list_len := int(stream.UInt32LE())
    list := make([]DataStoreSpecificMetaInfo, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_DataStoreSpecificMetaInfo()
	}
	return list
}
func (stream *OutputStream) List_DataStoreSpecificMetaInfo(out []DataStoreSpecificMetaInfo) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_DataStoreSpecificMetaInfo(item)
	}
	return
}
func (stream *InputStream) List_DataStoreSpecificMetaInfoV1() []DataStoreSpecificMetaInfoV1 {
    list_len := int(stream.UInt32LE())
    list := make([]DataStoreSpecificMetaInfoV1, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_DataStoreSpecificMetaInfoV1()
	}
	return list
}
func (stream *OutputStream) List_DataStoreSpecificMetaInfoV1(out []DataStoreSpecificMetaInfoV1) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_DataStoreSpecificMetaInfoV1(item)
	}
	return
}
func (stream *InputStream) List_DeletionEntry() []DeletionEntry {
    list_len := int(stream.UInt32LE())
    list := make([]DeletionEntry, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_DeletionEntry()
	}
	return list
}
func (stream *OutputStream) List_DeletionEntry(out []DeletionEntry) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_DeletionEntry(item)
	}
	return
}
func (stream *InputStream) List_float64() []float64 {
    list_len := int(stream.UInt32LE())
    list := make([]float64, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Float64LE()
	}
	return list
}
func (stream *OutputStream) List_float64(out []float64) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Float64LE(item)
	}
	return
}
func (stream *InputStream) List_FindMatchmakeSessionByParticipantResult() []FindMatchmakeSessionByParticipantResult {
    list_len := int(stream.UInt32LE())
    list := make([]FindMatchmakeSessionByParticipantResult, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_FindMatchmakeSessionByParticipantResult()
	}
	return list
}
func (stream *OutputStream) List_FindMatchmakeSessionByParticipantResult(out []FindMatchmakeSessionByParticipantResult) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_FindMatchmakeSessionByParticipantResult(item)
	}
	return
}
func (stream *InputStream) List_float32() []float32 {
    list_len := int(stream.UInt32LE())
    list := make([]float32, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Float32LE()
	}
	return list
}
func (stream *OutputStream) List_float32(out []float32) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Float32LE(item)
	}
	return
}
func (stream *InputStream) List_FriendData() []FriendData {
    list_len := int(stream.UInt32LE())
    list := make([]FriendData, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_FriendData()
	}
	return list
}
func (stream *OutputStream) List_FriendData(out []FriendData) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_FriendData(item)
	}
	return
}
func (stream *InputStream) List_FriendInfo() []FriendInfo {
    list_len := int(stream.UInt32LE())
    list := make([]FriendInfo, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_FriendInfo()
	}
	return list
}
func (stream *OutputStream) List_FriendInfo(out []FriendInfo) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_FriendInfo(item)
	}
	return
}
func (stream *InputStream) List_FriendMii() []FriendMii {
    list_len := int(stream.UInt32LE())
    list := make([]FriendMii, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_FriendMii()
	}
	return list
}
func (stream *OutputStream) List_FriendMii(out []FriendMii) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_FriendMii(item)
	}
	return
}
func (stream *InputStream) List_FriendMiiList() []FriendMiiList {
    list_len := int(stream.UInt32LE())
    list := make([]FriendMiiList, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_FriendMiiList()
	}
	return list
}
func (stream *OutputStream) List_FriendMiiList(out []FriendMiiList) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_FriendMiiList(item)
	}
	return
}
func (stream *InputStream) List_FriendMiiRequest() []FriendMiiRequest {
    list_len := int(stream.UInt32LE())
    list := make([]FriendMiiRequest, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_FriendMiiRequest()
	}
	return list
}
func (stream *OutputStream) List_FriendMiiRequest(out []FriendMiiRequest) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_FriendMiiRequest(item)
	}
	return
}
func (stream *InputStream) List_FriendPersistentInfo() []FriendPersistentInfo {
    list_len := int(stream.UInt32LE())
    list := make([]FriendPersistentInfo, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_FriendPersistentInfo()
	}
	return list
}
func (stream *OutputStream) List_FriendPersistentInfo(out []FriendPersistentInfo) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_FriendPersistentInfo(item)
	}
	return
}
func (stream *InputStream) List_FriendPicture() []FriendPicture {
    list_len := int(stream.UInt32LE())
    list := make([]FriendPicture, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_FriendPicture()
	}
	return list
}
func (stream *OutputStream) List_FriendPicture(out []FriendPicture) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_FriendPicture(item)
	}
	return
}
func (stream *InputStream) List_FriendPresence() []FriendPresence {
    list_len := int(stream.UInt32LE())
    list := make([]FriendPresence, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_FriendPresence()
	}
	return list
}
func (stream *OutputStream) List_FriendPresence(out []FriendPresence) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_FriendPresence(item)
	}
	return
}
func (stream *InputStream) List_FriendRelationship() []FriendRelationship {
    list_len := int(stream.UInt32LE())
    list := make([]FriendRelationship, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_FriendRelationship()
	}
	return list
}
func (stream *OutputStream) List_FriendRelationship(out []FriendRelationship) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_FriendRelationship(item)
	}
	return
}
func (stream *InputStream) List_FriendRequest() []FriendRequest {
    list_len := int(stream.UInt32LE())
    list := make([]FriendRequest, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_FriendRequest()
	}
	return list
}
func (stream *OutputStream) List_FriendRequest(out []FriendRequest) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_FriendRequest(item)
	}
	return
}
func (stream *InputStream) List_GatheringStats() []GatheringStats {
    list_len := int(stream.UInt32LE())
    list := make([]GatheringStats, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_GatheringStats()
	}
	return list
}
func (stream *OutputStream) List_GatheringStats(out []GatheringStats) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_GatheringStats(item)
	}
	return
}
func (stream *InputStream) List_GatheringURLs() []GatheringURLs {
    list_len := int(stream.UInt32LE())
    list := make([]GatheringURLs, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_GatheringURLs()
	}
	return list
}
func (stream *OutputStream) List_GatheringURLs(out []GatheringURLs) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_GatheringURLs(item)
	}
	return
}
func (stream *InputStream) List_Invitation() []Invitation {
    list_len := int(stream.UInt32LE())
    list := make([]Invitation, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_Invitation()
	}
	return list
}
func (stream *OutputStream) List_Invitation(out []Invitation) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_Invitation(item)
	}
	return
}
func (stream *InputStream) List_List_DataStoreRatingInfoWithSlot() [][]DataStoreRatingInfoWithSlot {
    list_len := int(stream.UInt32LE())
    list := make([][]DataStoreRatingInfoWithSlot, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.List_DataStoreRatingInfoWithSlot()
	}
	return list
}
func (stream *OutputStream) List_List_DataStoreRatingInfoWithSlot(out [][]DataStoreRatingInfoWithSlot) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.List_DataStoreRatingInfoWithSlot(item)
	}
	return
}
func (stream *InputStream) List_List_QBuffer() [][]QBuffer {
    list_len := int(stream.UInt32LE())
    list := make([][]QBuffer, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.List_QBuffer()
	}
	return list
}
func (stream *OutputStream) List_List_QBuffer(out [][]QBuffer) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.List_QBuffer(item)
	}
	return
}
func (stream *InputStream) List_MatchmakeSession() []MatchmakeSession {
    list_len := int(stream.UInt32LE())
    list := make([]MatchmakeSession, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_MatchmakeSession()
	}
	return list
}
func (stream *OutputStream) List_MatchmakeSession(out []MatchmakeSession) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_MatchmakeSession(item)
	}
	return
}
func (stream *InputStream) List_MatchmakeSessionSearchCriteria() []MatchmakeSessionSearchCriteria {
    list_len := int(stream.UInt32LE())
    list := make([]MatchmakeSessionSearchCriteria, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_MatchmakeSessionSearchCriteria()
	}
	return list
}
func (stream *OutputStream) List_MatchmakeSessionSearchCriteria(out []MatchmakeSessionSearchCriteria) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_MatchmakeSessionSearchCriteria(item)
	}
	return
}
func (stream *InputStream) List_NotificationEvent() []NotificationEvent {
    list_len := int(stream.UInt32LE())
    list := make([]NotificationEvent, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_NotificationEvent()
	}
	return list
}
func (stream *OutputStream) List_NotificationEvent(out []NotificationEvent) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_NotificationEvent(item)
	}
	return
}
func (stream *InputStream) List_PID() []PID {
    list_len := int(stream.UInt32LE())
    list := make([]PID, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = PID(stream.UInt32LE())
	}
	return list
}
func (stream *OutputStream) List_PID(out []PID) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.UInt32LE(uint32(item))
	}
	return
}
func (stream *InputStream) List_ParticipantDetails() []ParticipantDetails {
    list_len := int(stream.UInt32LE())
    list := make([]ParticipantDetails, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_ParticipantDetails()
	}
	return list
}
func (stream *OutputStream) List_ParticipantDetails(out []ParticipantDetails) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_ParticipantDetails(item)
	}
	return
}
func (stream *InputStream) List_PersistentGathering() []PersistentGathering {
    list_len := int(stream.UInt32LE())
    list := make([]PersistentGathering, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_PersistentGathering()
	}
	return list
}
func (stream *OutputStream) List_PersistentGathering(out []PersistentGathering) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_PersistentGathering(item)
	}
	return
}
func (stream *InputStream) List_PersistentNotification() []PersistentNotification {
    list_len := int(stream.UInt32LE())
    list := make([]PersistentNotification, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_PersistentNotification()
	}
	return list
}
func (stream *OutputStream) List_PersistentNotification(out []PersistentNotification) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_PersistentNotification(item)
	}
	return
}
func (stream *InputStream) List_PlayedGame() []PlayedGame {
    list_len := int(stream.UInt32LE())
    list := make([]PlayedGame, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_PlayedGame()
	}
	return list
}
func (stream *OutputStream) List_PlayedGame(out []PlayedGame) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_PlayedGame(item)
	}
	return
}
func (stream *InputStream) List_PlayingSession() []PlayingSession {
    list_len := int(stream.UInt32LE())
    list := make([]PlayingSession, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_PlayingSession()
	}
	return list
}
func (stream *OutputStream) List_PlayingSession(out []PlayingSession) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_PlayingSession(item)
	}
	return
}
func (stream *InputStream) List_PrincipalBasicInfo() []PrincipalBasicInfo {
    list_len := int(stream.UInt32LE())
    list := make([]PrincipalBasicInfo, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_PrincipalBasicInfo()
	}
	return list
}
func (stream *OutputStream) List_PrincipalBasicInfo(out []PrincipalBasicInfo) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_PrincipalBasicInfo(item)
	}
	return
}
func (stream *InputStream) List_PrincipalRequestBlockSetting() []PrincipalRequestBlockSetting {
    list_len := int(stream.UInt32LE())
    list := make([]PrincipalRequestBlockSetting, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_PrincipalRequestBlockSetting()
	}
	return list
}
func (stream *OutputStream) List_PrincipalRequestBlockSetting(out []PrincipalRequestBlockSetting) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_PrincipalRequestBlockSetting(item)
	}
	return
}
func (stream *InputStream) List_RankingCachedResult() []RankingCachedResult {
    list_len := int(stream.UInt32LE())
    list := make([]RankingCachedResult, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_RankingCachedResult()
	}
	return list
}
func (stream *OutputStream) List_RankingCachedResult(out []RankingCachedResult) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_RankingCachedResult(item)
	}
	return
}
func (stream *InputStream) List_RankingOrderParam() []RankingOrderParam {
    list_len := int(stream.UInt32LE())
    list := make([]RankingOrderParam, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_RankingOrderParam()
	}
	return list
}
func (stream *OutputStream) List_RankingOrderParam(out []RankingOrderParam) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_RankingOrderParam(item)
	}
	return
}
func (stream *InputStream) List_RankingRankData() []RankingRankData {
    list_len := int(stream.UInt32LE())
    list := make([]RankingRankData, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_RankingRankData()
	}
	return list
}
func (stream *OutputStream) List_RankingRankData(out []RankingRankData) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_RankingRankData(item)
	}
	return
}
func (stream *InputStream) List_RelationshipData() []RelationshipData {
    list_len := int(stream.UInt32LE())
    list := make([]RelationshipData, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_RelationshipData()
	}
	return list
}
func (stream *OutputStream) List_RelationshipData(out []RelationshipData) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_RelationshipData(item)
	}
	return
}
func (stream *InputStream) List_Result() []Result {
    list_len := int(stream.UInt32LE())
    list := make([]Result, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = Result(stream.UInt32LE())
	}
	return list
}
func (stream *OutputStream) List_Result(out []Result) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.UInt32LE(uint32(item))
	}
	return
}
func (stream *InputStream) List_SimpleCommunity() []SimpleCommunity {
    list_len := int(stream.UInt32LE())
    list := make([]SimpleCommunity, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_SimpleCommunity()
	}
	return list
}
func (stream *OutputStream) List_SimpleCommunity(out []SimpleCommunity) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_SimpleCommunity(item)
	}
	return
}
func (stream *InputStream) List_SimplePlayingSession() []SimplePlayingSession {
    list_len := int(stream.UInt32LE())
    list := make([]SimplePlayingSession, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_SimplePlayingSession()
	}
	return list
}
func (stream *OutputStream) List_SimplePlayingSession(out []SimplePlayingSession) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_SimplePlayingSession(item)
	}
	return
}
func (stream *InputStream) List_StationURL() []StationURL {
    list_len := int(stream.UInt32LE())
    list := make([]StationURL, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = StationURL(stream.String())
	}
	return list
}
func (stream *OutputStream) List_StationURL(out []StationURL) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.String(string(item))
	}
	return
}
func (stream *InputStream) List_string() []string {
    list_len := int(stream.UInt32LE())
    list := make([]string, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = string(stream.String())
	}
	return list
}
func (stream *OutputStream) List_string(out []string) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.String(string(item))
	}
	return
}
func (stream *InputStream) List_uint16() []uint16 {
    list_len := int(stream.UInt32LE())
    list := make([]uint16, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.UInt16LE()
	}
	return list
}
func (stream *OutputStream) List_uint16(out []uint16) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.UInt16LE(item)
	}
	return
}
func (stream *InputStream) List_uint32() []uint32 {
    list_len := int(stream.UInt32LE())
    list := make([]uint32, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.UInt32LE()
	}
	return list
}
func (stream *OutputStream) List_uint32(out []uint32) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.UInt32LE(item)
	}
	return
}
func (stream *InputStream) List_uint64() []uint64 {
    list_len := int(stream.UInt32LE())
    list := make([]uint64, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.UInt64LE()
	}
	return list
}
func (stream *OutputStream) List_uint64(out []uint64) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.UInt64LE(item)
	}
	return
}
func (stream *InputStream) List_uint8() []uint8 {
    list_len := int(stream.UInt32LE())
    list := make([]uint8, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.UInt8()
	}
	return list
}
func (stream *OutputStream) List_uint8(out []uint8) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.UInt8(item)
	}
	return
}
func (stream *InputStream) List_UniqueIdInfo() []UniqueIdInfo {
    list_len := int(stream.UInt32LE())
    list := make([]UniqueIdInfo, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_UniqueIdInfo()
	}
	return list
}
func (stream *OutputStream) List_UniqueIdInfo(out []UniqueIdInfo) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_UniqueIdInfo(item)
	}
	return
}
func (stream *InputStream) List_UserMessage() []UserMessage {
    list_len := int(stream.UInt32LE())
    list := make([]UserMessage, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.Struct_UserMessage()
	}
	return list
}
func (stream *OutputStream) List_UserMessage(out []UserMessage) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.Struct_UserMessage(item)
	}
	return
}
func (stream *InputStream) List_QBuffer() []QBuffer {
    list_len := int(stream.UInt32LE())
    list := make([]QBuffer, list_len)
    for i := 0; i < list_len; i++ {
		list[i] = stream.QBuffer()
	}
	return list
}
func (stream *OutputStream) List_QBuffer(out []QBuffer) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for _, item := range out {
		stream.QBuffer(item)
	}
	return
}
func (stream *InputStream) Map_int8_DataStoreRatingInfo() map[int8]DataStoreRatingInfo {
    map_len := int(stream.UInt32LE())
    m := make(map[int8]DataStoreRatingInfo)
    for i := 0; i < map_len; i++ {
		key := stream.Int8()
		value := stream.Struct_DataStoreRatingInfo()
		m[key] = value
	}
	return m
}
func (stream *OutputStream) Map_int8_DataStoreRatingInfo(out map[int8]DataStoreRatingInfo) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for key, value := range out {
    	stream.Int8(key)
    	stream.Struct_DataStoreRatingInfo(value)
	}
	return
}
func (stream *InputStream) Map_int8_List_QBuffer() map[int8][]QBuffer {
    map_len := int(stream.UInt32LE())
    m := make(map[int8][]QBuffer)
    for i := 0; i < map_len; i++ {
		key := stream.Int8()
		value := stream.List_QBuffer()
		m[key] = value
	}
	return m
}
func (stream *OutputStream) Map_int8_List_QBuffer(out map[int8][]QBuffer) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for key, value := range out {
    	stream.Int8(key)
    	stream.List_QBuffer(value)
	}
	return
}
func (stream *InputStream) Map_string_Variant() map[string]Variant {
    map_len := int(stream.UInt32LE())
    m := make(map[string]Variant)
    for i := 0; i < map_len; i++ {
		key := string(stream.String())
		value := stream.Variant()
		m[key] = value
	}
	return m
}
func (stream *OutputStream) Map_string_Variant(out map[string]Variant) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for key, value := range out {
    	stream.String(string(key))
    	stream.Variant(value)
	}
	return
}
func (stream *InputStream) Map_uint16_int32() map[uint16]int32 {
    map_len := int(stream.UInt32LE())
    m := make(map[uint16]int32)
    for i := 0; i < map_len; i++ {
		key := stream.UInt16LE()
		value := stream.Int32LE()
		m[key] = value
	}
	return m
}
func (stream *OutputStream) Map_uint16_int32(out map[uint16]int32) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for key, value := range out {
    	stream.UInt16LE(key)
    	stream.Int32LE(value)
	}
	return
}
func (stream *InputStream) Map_uint16_string() map[uint16]string {
    map_len := int(stream.UInt32LE())
    m := make(map[uint16]string)
    for i := 0; i < map_len; i++ {
		key := stream.UInt16LE()
		value := string(stream.String())
		m[key] = value
	}
	return m
}
func (stream *OutputStream) Map_uint16_string(out map[uint16]string) () {

	length := len(out)
    stream.UInt32LE(uint32(length))
    for key, value := range out {
    	stream.UInt16LE(key)
    	stream.String(string(value))
	}
	return
}
